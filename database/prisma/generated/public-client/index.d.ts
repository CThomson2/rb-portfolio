
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model bottle_sizes
 * 
 */
export type bottle_sizes = $Result.DefaultSelection<Prisma.$bottle_sizesPayload>
/**
 * Model chemical_groups
 * 
 */
export type chemical_groups = $Result.DefaultSelection<Prisma.$chemical_groupsPayload>
/**
 * Model product_prices
 * 
 */
export type product_prices = $Result.DefaultSelection<Prisma.$product_pricesPayload>
/**
 * Model products
 * 
 */
export type products = $Result.DefaultSelection<Prisma.$productsPayload>
/**
 * Model raw_materials
 * 
 */
export type raw_materials = $Result.DefaultSelection<Prisma.$raw_materialsPayload>
/**
 * Model batches
 * This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
 */
export type batches = $Result.DefaultSelection<Prisma.$batchesPayload>
/**
 * Model deliveries
 * 
 */
export type deliveries = $Result.DefaultSelection<Prisma.$deliveriesPayload>
/**
 * Model distillations
 * 
 */
export type distillations = $Result.DefaultSelection<Prisma.$distillationsPayload>
/**
 * Model drum_distillations
 * This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
 */
export type drum_distillations = $Result.DefaultSelection<Prisma.$drum_distillationsPayload>
/**
 * Model imports
 * This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
 */
export type imports = $Result.DefaultSelection<Prisma.$importsPayload>
/**
 * Model new_drums
 * 
 */
export type new_drums = $Result.DefaultSelection<Prisma.$new_drumsPayload>
/**
 * Model orders
 * 
 */
export type orders = $Result.DefaultSelection<Prisma.$ordersPayload>
/**
 * Model processes
 * 
 */
export type processes = $Result.DefaultSelection<Prisma.$processesPayload>
/**
 * Model repro_additions
 * 
 */
export type repro_additions = $Result.DefaultSelection<Prisma.$repro_additionsPayload>
/**
 * Model repro_drums
 * 
 */
export type repro_drums = $Result.DefaultSelection<Prisma.$repro_drumsPayload>
/**
 * Model transactions
 * This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
 */
export type transactions = $Result.DefaultSelection<Prisma.$transactionsPayload>
/**
 * Model stills
 * This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
 */
export type stills = $Result.DefaultSelection<Prisma.$stillsPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Bottle_sizes
 * const bottle_sizes = await prisma.bottle_sizes.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Bottle_sizes
   * const bottle_sizes = await prisma.bottle_sizes.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs, $Utils.Call<Prisma.TypeMapCb, {
    extArgs: ExtArgs
  }>, ClientOptions>

      /**
   * `prisma.bottle_sizes`: Exposes CRUD operations for the **bottle_sizes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bottle_sizes
    * const bottle_sizes = await prisma.bottle_sizes.findMany()
    * ```
    */
  get bottle_sizes(): Prisma.bottle_sizesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.chemical_groups`: Exposes CRUD operations for the **chemical_groups** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chemical_groups
    * const chemical_groups = await prisma.chemical_groups.findMany()
    * ```
    */
  get chemical_groups(): Prisma.chemical_groupsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.product_prices`: Exposes CRUD operations for the **product_prices** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Product_prices
    * const product_prices = await prisma.product_prices.findMany()
    * ```
    */
  get product_prices(): Prisma.product_pricesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.products`: Exposes CRUD operations for the **products** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.products.findMany()
    * ```
    */
  get products(): Prisma.productsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.raw_materials`: Exposes CRUD operations for the **raw_materials** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Raw_materials
    * const raw_materials = await prisma.raw_materials.findMany()
    * ```
    */
  get raw_materials(): Prisma.raw_materialsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.batches`: Exposes CRUD operations for the **batches** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Batches
    * const batches = await prisma.batches.findMany()
    * ```
    */
  get batches(): Prisma.batchesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.deliveries`: Exposes CRUD operations for the **deliveries** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Deliveries
    * const deliveries = await prisma.deliveries.findMany()
    * ```
    */
  get deliveries(): Prisma.deliveriesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.distillations`: Exposes CRUD operations for the **distillations** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Distillations
    * const distillations = await prisma.distillations.findMany()
    * ```
    */
  get distillations(): Prisma.distillationsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.drum_distillations`: Exposes CRUD operations for the **drum_distillations** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Drum_distillations
    * const drum_distillations = await prisma.drum_distillations.findMany()
    * ```
    */
  get drum_distillations(): Prisma.drum_distillationsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.imports`: Exposes CRUD operations for the **imports** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Imports
    * const imports = await prisma.imports.findMany()
    * ```
    */
  get imports(): Prisma.importsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.new_drums`: Exposes CRUD operations for the **new_drums** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more New_drums
    * const new_drums = await prisma.new_drums.findMany()
    * ```
    */
  get new_drums(): Prisma.new_drumsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.orders`: Exposes CRUD operations for the **orders** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.orders.findMany()
    * ```
    */
  get orders(): Prisma.ordersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.processes`: Exposes CRUD operations for the **processes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Processes
    * const processes = await prisma.processes.findMany()
    * ```
    */
  get processes(): Prisma.processesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.repro_additions`: Exposes CRUD operations for the **repro_additions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Repro_additions
    * const repro_additions = await prisma.repro_additions.findMany()
    * ```
    */
  get repro_additions(): Prisma.repro_additionsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.repro_drums`: Exposes CRUD operations for the **repro_drums** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Repro_drums
    * const repro_drums = await prisma.repro_drums.findMany()
    * ```
    */
  get repro_drums(): Prisma.repro_drumsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.transactions`: Exposes CRUD operations for the **transactions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transactions
    * const transactions = await prisma.transactions.findMany()
    * ```
    */
  get transactions(): Prisma.transactionsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.stills`: Exposes CRUD operations for the **stills** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stills
    * const stills = await prisma.stills.findMany()
    * ```
    */
  get stills(): Prisma.stillsDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.2.1
   * Query Engine version: 4123509d24aa4dede1e864b46351bf2790323b69
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    bottle_sizes: 'bottle_sizes',
    chemical_groups: 'chemical_groups',
    product_prices: 'product_prices',
    products: 'products',
    raw_materials: 'raw_materials',
    batches: 'batches',
    deliveries: 'deliveries',
    distillations: 'distillations',
    drum_distillations: 'drum_distillations',
    imports: 'imports',
    new_drums: 'new_drums',
    orders: 'orders',
    processes: 'processes',
    repro_additions: 'repro_additions',
    repro_drums: 'repro_drums',
    transactions: 'transactions',
    stills: 'stills'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "bottle_sizes" | "chemical_groups" | "product_prices" | "products" | "raw_materials" | "batches" | "deliveries" | "distillations" | "drum_distillations" | "imports" | "new_drums" | "orders" | "processes" | "repro_additions" | "repro_drums" | "transactions" | "stills"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      bottle_sizes: {
        payload: Prisma.$bottle_sizesPayload<ExtArgs>
        fields: Prisma.bottle_sizesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.bottle_sizesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bottle_sizesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.bottle_sizesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bottle_sizesPayload>
          }
          findFirst: {
            args: Prisma.bottle_sizesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bottle_sizesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.bottle_sizesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bottle_sizesPayload>
          }
          findMany: {
            args: Prisma.bottle_sizesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bottle_sizesPayload>[]
          }
          create: {
            args: Prisma.bottle_sizesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bottle_sizesPayload>
          }
          createMany: {
            args: Prisma.bottle_sizesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.bottle_sizesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bottle_sizesPayload>[]
          }
          delete: {
            args: Prisma.bottle_sizesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bottle_sizesPayload>
          }
          update: {
            args: Prisma.bottle_sizesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bottle_sizesPayload>
          }
          deleteMany: {
            args: Prisma.bottle_sizesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.bottle_sizesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.bottle_sizesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bottle_sizesPayload>[]
          }
          upsert: {
            args: Prisma.bottle_sizesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bottle_sizesPayload>
          }
          aggregate: {
            args: Prisma.Bottle_sizesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBottle_sizes>
          }
          groupBy: {
            args: Prisma.bottle_sizesGroupByArgs<ExtArgs>
            result: $Utils.Optional<Bottle_sizesGroupByOutputType>[]
          }
          count: {
            args: Prisma.bottle_sizesCountArgs<ExtArgs>
            result: $Utils.Optional<Bottle_sizesCountAggregateOutputType> | number
          }
        }
      }
      chemical_groups: {
        payload: Prisma.$chemical_groupsPayload<ExtArgs>
        fields: Prisma.chemical_groupsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.chemical_groupsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chemical_groupsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.chemical_groupsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chemical_groupsPayload>
          }
          findFirst: {
            args: Prisma.chemical_groupsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chemical_groupsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.chemical_groupsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chemical_groupsPayload>
          }
          findMany: {
            args: Prisma.chemical_groupsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chemical_groupsPayload>[]
          }
          create: {
            args: Prisma.chemical_groupsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chemical_groupsPayload>
          }
          createMany: {
            args: Prisma.chemical_groupsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.chemical_groupsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chemical_groupsPayload>[]
          }
          delete: {
            args: Prisma.chemical_groupsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chemical_groupsPayload>
          }
          update: {
            args: Prisma.chemical_groupsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chemical_groupsPayload>
          }
          deleteMany: {
            args: Prisma.chemical_groupsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.chemical_groupsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.chemical_groupsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chemical_groupsPayload>[]
          }
          upsert: {
            args: Prisma.chemical_groupsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chemical_groupsPayload>
          }
          aggregate: {
            args: Prisma.Chemical_groupsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChemical_groups>
          }
          groupBy: {
            args: Prisma.chemical_groupsGroupByArgs<ExtArgs>
            result: $Utils.Optional<Chemical_groupsGroupByOutputType>[]
          }
          count: {
            args: Prisma.chemical_groupsCountArgs<ExtArgs>
            result: $Utils.Optional<Chemical_groupsCountAggregateOutputType> | number
          }
        }
      }
      product_prices: {
        payload: Prisma.$product_pricesPayload<ExtArgs>
        fields: Prisma.product_pricesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.product_pricesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_pricesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.product_pricesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_pricesPayload>
          }
          findFirst: {
            args: Prisma.product_pricesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_pricesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.product_pricesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_pricesPayload>
          }
          findMany: {
            args: Prisma.product_pricesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_pricesPayload>[]
          }
          create: {
            args: Prisma.product_pricesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_pricesPayload>
          }
          createMany: {
            args: Prisma.product_pricesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.product_pricesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_pricesPayload>[]
          }
          delete: {
            args: Prisma.product_pricesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_pricesPayload>
          }
          update: {
            args: Prisma.product_pricesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_pricesPayload>
          }
          deleteMany: {
            args: Prisma.product_pricesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.product_pricesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.product_pricesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_pricesPayload>[]
          }
          upsert: {
            args: Prisma.product_pricesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_pricesPayload>
          }
          aggregate: {
            args: Prisma.Product_pricesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduct_prices>
          }
          groupBy: {
            args: Prisma.product_pricesGroupByArgs<ExtArgs>
            result: $Utils.Optional<Product_pricesGroupByOutputType>[]
          }
          count: {
            args: Prisma.product_pricesCountArgs<ExtArgs>
            result: $Utils.Optional<Product_pricesCountAggregateOutputType> | number
          }
        }
      }
      products: {
        payload: Prisma.$productsPayload<ExtArgs>
        fields: Prisma.productsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.productsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.productsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productsPayload>
          }
          findFirst: {
            args: Prisma.productsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.productsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productsPayload>
          }
          findMany: {
            args: Prisma.productsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productsPayload>[]
          }
          create: {
            args: Prisma.productsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productsPayload>
          }
          createMany: {
            args: Prisma.productsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.productsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productsPayload>[]
          }
          delete: {
            args: Prisma.productsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productsPayload>
          }
          update: {
            args: Prisma.productsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productsPayload>
          }
          deleteMany: {
            args: Prisma.productsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.productsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.productsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productsPayload>[]
          }
          upsert: {
            args: Prisma.productsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productsPayload>
          }
          aggregate: {
            args: Prisma.ProductsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProducts>
          }
          groupBy: {
            args: Prisma.productsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductsGroupByOutputType>[]
          }
          count: {
            args: Prisma.productsCountArgs<ExtArgs>
            result: $Utils.Optional<ProductsCountAggregateOutputType> | number
          }
        }
      }
      raw_materials: {
        payload: Prisma.$raw_materialsPayload<ExtArgs>
        fields: Prisma.raw_materialsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.raw_materialsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$raw_materialsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.raw_materialsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$raw_materialsPayload>
          }
          findFirst: {
            args: Prisma.raw_materialsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$raw_materialsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.raw_materialsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$raw_materialsPayload>
          }
          findMany: {
            args: Prisma.raw_materialsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$raw_materialsPayload>[]
          }
          create: {
            args: Prisma.raw_materialsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$raw_materialsPayload>
          }
          createMany: {
            args: Prisma.raw_materialsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.raw_materialsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$raw_materialsPayload>[]
          }
          delete: {
            args: Prisma.raw_materialsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$raw_materialsPayload>
          }
          update: {
            args: Prisma.raw_materialsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$raw_materialsPayload>
          }
          deleteMany: {
            args: Prisma.raw_materialsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.raw_materialsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.raw_materialsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$raw_materialsPayload>[]
          }
          upsert: {
            args: Prisma.raw_materialsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$raw_materialsPayload>
          }
          aggregate: {
            args: Prisma.Raw_materialsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRaw_materials>
          }
          groupBy: {
            args: Prisma.raw_materialsGroupByArgs<ExtArgs>
            result: $Utils.Optional<Raw_materialsGroupByOutputType>[]
          }
          count: {
            args: Prisma.raw_materialsCountArgs<ExtArgs>
            result: $Utils.Optional<Raw_materialsCountAggregateOutputType> | number
          }
        }
      }
      batches: {
        payload: Prisma.$batchesPayload<ExtArgs>
        fields: Prisma.batchesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.batchesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$batchesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.batchesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$batchesPayload>
          }
          findFirst: {
            args: Prisma.batchesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$batchesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.batchesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$batchesPayload>
          }
          findMany: {
            args: Prisma.batchesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$batchesPayload>[]
          }
          create: {
            args: Prisma.batchesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$batchesPayload>
          }
          createMany: {
            args: Prisma.batchesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.batchesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$batchesPayload>[]
          }
          delete: {
            args: Prisma.batchesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$batchesPayload>
          }
          update: {
            args: Prisma.batchesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$batchesPayload>
          }
          deleteMany: {
            args: Prisma.batchesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.batchesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.batchesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$batchesPayload>[]
          }
          upsert: {
            args: Prisma.batchesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$batchesPayload>
          }
          aggregate: {
            args: Prisma.BatchesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBatches>
          }
          groupBy: {
            args: Prisma.batchesGroupByArgs<ExtArgs>
            result: $Utils.Optional<BatchesGroupByOutputType>[]
          }
          count: {
            args: Prisma.batchesCountArgs<ExtArgs>
            result: $Utils.Optional<BatchesCountAggregateOutputType> | number
          }
        }
      }
      deliveries: {
        payload: Prisma.$deliveriesPayload<ExtArgs>
        fields: Prisma.deliveriesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.deliveriesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$deliveriesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.deliveriesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$deliveriesPayload>
          }
          findFirst: {
            args: Prisma.deliveriesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$deliveriesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.deliveriesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$deliveriesPayload>
          }
          findMany: {
            args: Prisma.deliveriesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$deliveriesPayload>[]
          }
          create: {
            args: Prisma.deliveriesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$deliveriesPayload>
          }
          createMany: {
            args: Prisma.deliveriesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.deliveriesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$deliveriesPayload>[]
          }
          delete: {
            args: Prisma.deliveriesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$deliveriesPayload>
          }
          update: {
            args: Prisma.deliveriesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$deliveriesPayload>
          }
          deleteMany: {
            args: Prisma.deliveriesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.deliveriesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.deliveriesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$deliveriesPayload>[]
          }
          upsert: {
            args: Prisma.deliveriesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$deliveriesPayload>
          }
          aggregate: {
            args: Prisma.DeliveriesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDeliveries>
          }
          groupBy: {
            args: Prisma.deliveriesGroupByArgs<ExtArgs>
            result: $Utils.Optional<DeliveriesGroupByOutputType>[]
          }
          count: {
            args: Prisma.deliveriesCountArgs<ExtArgs>
            result: $Utils.Optional<DeliveriesCountAggregateOutputType> | number
          }
        }
      }
      distillations: {
        payload: Prisma.$distillationsPayload<ExtArgs>
        fields: Prisma.distillationsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.distillationsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$distillationsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.distillationsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$distillationsPayload>
          }
          findFirst: {
            args: Prisma.distillationsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$distillationsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.distillationsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$distillationsPayload>
          }
          findMany: {
            args: Prisma.distillationsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$distillationsPayload>[]
          }
          create: {
            args: Prisma.distillationsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$distillationsPayload>
          }
          createMany: {
            args: Prisma.distillationsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.distillationsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$distillationsPayload>[]
          }
          delete: {
            args: Prisma.distillationsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$distillationsPayload>
          }
          update: {
            args: Prisma.distillationsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$distillationsPayload>
          }
          deleteMany: {
            args: Prisma.distillationsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.distillationsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.distillationsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$distillationsPayload>[]
          }
          upsert: {
            args: Prisma.distillationsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$distillationsPayload>
          }
          aggregate: {
            args: Prisma.DistillationsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDistillations>
          }
          groupBy: {
            args: Prisma.distillationsGroupByArgs<ExtArgs>
            result: $Utils.Optional<DistillationsGroupByOutputType>[]
          }
          count: {
            args: Prisma.distillationsCountArgs<ExtArgs>
            result: $Utils.Optional<DistillationsCountAggregateOutputType> | number
          }
        }
      }
      drum_distillations: {
        payload: Prisma.$drum_distillationsPayload<ExtArgs>
        fields: Prisma.drum_distillationsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.drum_distillationsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$drum_distillationsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.drum_distillationsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$drum_distillationsPayload>
          }
          findFirst: {
            args: Prisma.drum_distillationsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$drum_distillationsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.drum_distillationsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$drum_distillationsPayload>
          }
          findMany: {
            args: Prisma.drum_distillationsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$drum_distillationsPayload>[]
          }
          create: {
            args: Prisma.drum_distillationsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$drum_distillationsPayload>
          }
          createMany: {
            args: Prisma.drum_distillationsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.drum_distillationsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$drum_distillationsPayload>[]
          }
          delete: {
            args: Prisma.drum_distillationsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$drum_distillationsPayload>
          }
          update: {
            args: Prisma.drum_distillationsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$drum_distillationsPayload>
          }
          deleteMany: {
            args: Prisma.drum_distillationsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.drum_distillationsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.drum_distillationsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$drum_distillationsPayload>[]
          }
          upsert: {
            args: Prisma.drum_distillationsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$drum_distillationsPayload>
          }
          aggregate: {
            args: Prisma.Drum_distillationsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDrum_distillations>
          }
          groupBy: {
            args: Prisma.drum_distillationsGroupByArgs<ExtArgs>
            result: $Utils.Optional<Drum_distillationsGroupByOutputType>[]
          }
          count: {
            args: Prisma.drum_distillationsCountArgs<ExtArgs>
            result: $Utils.Optional<Drum_distillationsCountAggregateOutputType> | number
          }
        }
      }
      imports: {
        payload: Prisma.$importsPayload<ExtArgs>
        fields: Prisma.importsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.importsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$importsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.importsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$importsPayload>
          }
          findFirst: {
            args: Prisma.importsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$importsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.importsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$importsPayload>
          }
          findMany: {
            args: Prisma.importsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$importsPayload>[]
          }
          create: {
            args: Prisma.importsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$importsPayload>
          }
          createMany: {
            args: Prisma.importsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.importsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$importsPayload>[]
          }
          delete: {
            args: Prisma.importsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$importsPayload>
          }
          update: {
            args: Prisma.importsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$importsPayload>
          }
          deleteMany: {
            args: Prisma.importsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.importsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.importsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$importsPayload>[]
          }
          upsert: {
            args: Prisma.importsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$importsPayload>
          }
          aggregate: {
            args: Prisma.ImportsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateImports>
          }
          groupBy: {
            args: Prisma.importsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ImportsGroupByOutputType>[]
          }
          count: {
            args: Prisma.importsCountArgs<ExtArgs>
            result: $Utils.Optional<ImportsCountAggregateOutputType> | number
          }
        }
      }
      new_drums: {
        payload: Prisma.$new_drumsPayload<ExtArgs>
        fields: Prisma.new_drumsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.new_drumsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$new_drumsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.new_drumsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$new_drumsPayload>
          }
          findFirst: {
            args: Prisma.new_drumsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$new_drumsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.new_drumsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$new_drumsPayload>
          }
          findMany: {
            args: Prisma.new_drumsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$new_drumsPayload>[]
          }
          create: {
            args: Prisma.new_drumsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$new_drumsPayload>
          }
          createMany: {
            args: Prisma.new_drumsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.new_drumsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$new_drumsPayload>[]
          }
          delete: {
            args: Prisma.new_drumsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$new_drumsPayload>
          }
          update: {
            args: Prisma.new_drumsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$new_drumsPayload>
          }
          deleteMany: {
            args: Prisma.new_drumsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.new_drumsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.new_drumsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$new_drumsPayload>[]
          }
          upsert: {
            args: Prisma.new_drumsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$new_drumsPayload>
          }
          aggregate: {
            args: Prisma.New_drumsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNew_drums>
          }
          groupBy: {
            args: Prisma.new_drumsGroupByArgs<ExtArgs>
            result: $Utils.Optional<New_drumsGroupByOutputType>[]
          }
          count: {
            args: Prisma.new_drumsCountArgs<ExtArgs>
            result: $Utils.Optional<New_drumsCountAggregateOutputType> | number
          }
        }
      }
      orders: {
        payload: Prisma.$ordersPayload<ExtArgs>
        fields: Prisma.ordersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ordersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ordersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          findFirst: {
            args: Prisma.ordersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ordersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          findMany: {
            args: Prisma.ordersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>[]
          }
          create: {
            args: Prisma.ordersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          createMany: {
            args: Prisma.ordersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ordersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>[]
          }
          delete: {
            args: Prisma.ordersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          update: {
            args: Prisma.ordersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          deleteMany: {
            args: Prisma.ordersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ordersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ordersUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>[]
          }
          upsert: {
            args: Prisma.ordersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          aggregate: {
            args: Prisma.OrdersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrders>
          }
          groupBy: {
            args: Prisma.ordersGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrdersGroupByOutputType>[]
          }
          count: {
            args: Prisma.ordersCountArgs<ExtArgs>
            result: $Utils.Optional<OrdersCountAggregateOutputType> | number
          }
        }
      }
      processes: {
        payload: Prisma.$processesPayload<ExtArgs>
        fields: Prisma.processesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.processesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$processesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.processesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$processesPayload>
          }
          findFirst: {
            args: Prisma.processesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$processesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.processesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$processesPayload>
          }
          findMany: {
            args: Prisma.processesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$processesPayload>[]
          }
          create: {
            args: Prisma.processesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$processesPayload>
          }
          createMany: {
            args: Prisma.processesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.processesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$processesPayload>[]
          }
          delete: {
            args: Prisma.processesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$processesPayload>
          }
          update: {
            args: Prisma.processesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$processesPayload>
          }
          deleteMany: {
            args: Prisma.processesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.processesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.processesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$processesPayload>[]
          }
          upsert: {
            args: Prisma.processesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$processesPayload>
          }
          aggregate: {
            args: Prisma.ProcessesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProcesses>
          }
          groupBy: {
            args: Prisma.processesGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProcessesGroupByOutputType>[]
          }
          count: {
            args: Prisma.processesCountArgs<ExtArgs>
            result: $Utils.Optional<ProcessesCountAggregateOutputType> | number
          }
        }
      }
      repro_additions: {
        payload: Prisma.$repro_additionsPayload<ExtArgs>
        fields: Prisma.repro_additionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.repro_additionsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repro_additionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.repro_additionsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repro_additionsPayload>
          }
          findFirst: {
            args: Prisma.repro_additionsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repro_additionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.repro_additionsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repro_additionsPayload>
          }
          findMany: {
            args: Prisma.repro_additionsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repro_additionsPayload>[]
          }
          create: {
            args: Prisma.repro_additionsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repro_additionsPayload>
          }
          createMany: {
            args: Prisma.repro_additionsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.repro_additionsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repro_additionsPayload>[]
          }
          delete: {
            args: Prisma.repro_additionsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repro_additionsPayload>
          }
          update: {
            args: Prisma.repro_additionsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repro_additionsPayload>
          }
          deleteMany: {
            args: Prisma.repro_additionsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.repro_additionsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.repro_additionsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repro_additionsPayload>[]
          }
          upsert: {
            args: Prisma.repro_additionsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repro_additionsPayload>
          }
          aggregate: {
            args: Prisma.Repro_additionsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRepro_additions>
          }
          groupBy: {
            args: Prisma.repro_additionsGroupByArgs<ExtArgs>
            result: $Utils.Optional<Repro_additionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.repro_additionsCountArgs<ExtArgs>
            result: $Utils.Optional<Repro_additionsCountAggregateOutputType> | number
          }
        }
      }
      repro_drums: {
        payload: Prisma.$repro_drumsPayload<ExtArgs>
        fields: Prisma.repro_drumsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.repro_drumsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repro_drumsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.repro_drumsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repro_drumsPayload>
          }
          findFirst: {
            args: Prisma.repro_drumsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repro_drumsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.repro_drumsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repro_drumsPayload>
          }
          findMany: {
            args: Prisma.repro_drumsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repro_drumsPayload>[]
          }
          create: {
            args: Prisma.repro_drumsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repro_drumsPayload>
          }
          createMany: {
            args: Prisma.repro_drumsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.repro_drumsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repro_drumsPayload>[]
          }
          delete: {
            args: Prisma.repro_drumsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repro_drumsPayload>
          }
          update: {
            args: Prisma.repro_drumsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repro_drumsPayload>
          }
          deleteMany: {
            args: Prisma.repro_drumsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.repro_drumsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.repro_drumsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repro_drumsPayload>[]
          }
          upsert: {
            args: Prisma.repro_drumsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repro_drumsPayload>
          }
          aggregate: {
            args: Prisma.Repro_drumsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRepro_drums>
          }
          groupBy: {
            args: Prisma.repro_drumsGroupByArgs<ExtArgs>
            result: $Utils.Optional<Repro_drumsGroupByOutputType>[]
          }
          count: {
            args: Prisma.repro_drumsCountArgs<ExtArgs>
            result: $Utils.Optional<Repro_drumsCountAggregateOutputType> | number
          }
        }
      }
      transactions: {
        payload: Prisma.$transactionsPayload<ExtArgs>
        fields: Prisma.transactionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.transactionsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.transactionsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>
          }
          findFirst: {
            args: Prisma.transactionsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.transactionsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>
          }
          findMany: {
            args: Prisma.transactionsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>[]
          }
          create: {
            args: Prisma.transactionsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>
          }
          createMany: {
            args: Prisma.transactionsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.transactionsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>[]
          }
          delete: {
            args: Prisma.transactionsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>
          }
          update: {
            args: Prisma.transactionsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>
          }
          deleteMany: {
            args: Prisma.transactionsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.transactionsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.transactionsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>[]
          }
          upsert: {
            args: Prisma.transactionsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>
          }
          aggregate: {
            args: Prisma.TransactionsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransactions>
          }
          groupBy: {
            args: Prisma.transactionsGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransactionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.transactionsCountArgs<ExtArgs>
            result: $Utils.Optional<TransactionsCountAggregateOutputType> | number
          }
        }
      }
      stills: {
        payload: Prisma.$stillsPayload<ExtArgs>
        fields: Prisma.stillsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.stillsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$stillsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.stillsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$stillsPayload>
          }
          findFirst: {
            args: Prisma.stillsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$stillsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.stillsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$stillsPayload>
          }
          findMany: {
            args: Prisma.stillsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$stillsPayload>[]
          }
          create: {
            args: Prisma.stillsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$stillsPayload>
          }
          createMany: {
            args: Prisma.stillsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.stillsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$stillsPayload>[]
          }
          delete: {
            args: Prisma.stillsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$stillsPayload>
          }
          update: {
            args: Prisma.stillsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$stillsPayload>
          }
          deleteMany: {
            args: Prisma.stillsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.stillsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.stillsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$stillsPayload>[]
          }
          upsert: {
            args: Prisma.stillsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$stillsPayload>
          }
          aggregate: {
            args: Prisma.StillsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStills>
          }
          groupBy: {
            args: Prisma.stillsGroupByArgs<ExtArgs>
            result: $Utils.Optional<StillsGroupByOutputType>[]
          }
          count: {
            args: Prisma.stillsCountArgs<ExtArgs>
            result: $Utils.Optional<StillsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    bottle_sizes?: bottle_sizesOmit
    chemical_groups?: chemical_groupsOmit
    product_prices?: product_pricesOmit
    products?: productsOmit
    raw_materials?: raw_materialsOmit
    batches?: batchesOmit
    deliveries?: deliveriesOmit
    distillations?: distillationsOmit
    drum_distillations?: drum_distillationsOmit
    imports?: importsOmit
    new_drums?: new_drumsOmit
    orders?: ordersOmit
    processes?: processesOmit
    repro_additions?: repro_additionsOmit
    repro_drums?: repro_drumsOmit
    transactions?: transactionsOmit
    stills?: stillsOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type Bottle_sizesCountOutputType
   */

  export type Bottle_sizesCountOutputType = {
    product_prices: number
  }

  export type Bottle_sizesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product_prices?: boolean | Bottle_sizesCountOutputTypeCountProduct_pricesArgs
  }

  // Custom InputTypes
  /**
   * Bottle_sizesCountOutputType without action
   */
  export type Bottle_sizesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bottle_sizesCountOutputType
     */
    select?: Bottle_sizesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Bottle_sizesCountOutputType without action
   */
  export type Bottle_sizesCountOutputTypeCountProduct_pricesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: product_pricesWhereInput
  }


  /**
   * Count Type ProductsCountOutputType
   */

  export type ProductsCountOutputType = {
    product_prices: number
  }

  export type ProductsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product_prices?: boolean | ProductsCountOutputTypeCountProduct_pricesArgs
  }

  // Custom InputTypes
  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductsCountOutputType
     */
    select?: ProductsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeCountProduct_pricesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: product_pricesWhereInput
  }


  /**
   * Count Type Raw_materialsCountOutputType
   */

  export type Raw_materialsCountOutputType = {
    products: number
  }

  export type Raw_materialsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | Raw_materialsCountOutputTypeCountProductsArgs
  }

  // Custom InputTypes
  /**
   * Raw_materialsCountOutputType without action
   */
  export type Raw_materialsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Raw_materialsCountOutputType
     */
    select?: Raw_materialsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Raw_materialsCountOutputType without action
   */
  export type Raw_materialsCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productsWhereInput
  }


  /**
   * Count Type DeliveriesCountOutputType
   */

  export type DeliveriesCountOutputType = {
    transactions: number
  }

  export type DeliveriesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transactions?: boolean | DeliveriesCountOutputTypeCountTransactionsArgs
  }

  // Custom InputTypes
  /**
   * DeliveriesCountOutputType without action
   */
  export type DeliveriesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeliveriesCountOutputType
     */
    select?: DeliveriesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DeliveriesCountOutputType without action
   */
  export type DeliveriesCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: transactionsWhereInput
  }


  /**
   * Count Type DistillationsCountOutputType
   */

  export type DistillationsCountOutputType = {
    batches: number
    drum_distillations: number
    repro_additions: number
  }

  export type DistillationsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    batches?: boolean | DistillationsCountOutputTypeCountBatchesArgs
    drum_distillations?: boolean | DistillationsCountOutputTypeCountDrum_distillationsArgs
    repro_additions?: boolean | DistillationsCountOutputTypeCountRepro_additionsArgs
  }

  // Custom InputTypes
  /**
   * DistillationsCountOutputType without action
   */
  export type DistillationsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistillationsCountOutputType
     */
    select?: DistillationsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DistillationsCountOutputType without action
   */
  export type DistillationsCountOutputTypeCountBatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: batchesWhereInput
  }

  /**
   * DistillationsCountOutputType without action
   */
  export type DistillationsCountOutputTypeCountDrum_distillationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: drum_distillationsWhereInput
  }

  /**
   * DistillationsCountOutputType without action
   */
  export type DistillationsCountOutputTypeCountRepro_additionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: repro_additionsWhereInput
  }


  /**
   * Count Type New_drumsCountOutputType
   */

  export type New_drumsCountOutputType = {
    drum_distillations: number
    processes: number
    transactions: number
  }

  export type New_drumsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    drum_distillations?: boolean | New_drumsCountOutputTypeCountDrum_distillationsArgs
    processes?: boolean | New_drumsCountOutputTypeCountProcessesArgs
    transactions?: boolean | New_drumsCountOutputTypeCountTransactionsArgs
  }

  // Custom InputTypes
  /**
   * New_drumsCountOutputType without action
   */
  export type New_drumsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the New_drumsCountOutputType
     */
    select?: New_drumsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * New_drumsCountOutputType without action
   */
  export type New_drumsCountOutputTypeCountDrum_distillationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: drum_distillationsWhereInput
  }

  /**
   * New_drumsCountOutputType without action
   */
  export type New_drumsCountOutputTypeCountProcessesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: processesWhereInput
  }

  /**
   * New_drumsCountOutputType without action
   */
  export type New_drumsCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: transactionsWhereInput
  }


  /**
   * Count Type OrdersCountOutputType
   */

  export type OrdersCountOutputType = {
    deliveries: number
    new_drums: number
  }

  export type OrdersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    deliveries?: boolean | OrdersCountOutputTypeCountDeliveriesArgs
    new_drums?: boolean | OrdersCountOutputTypeCountNew_drumsArgs
  }

  // Custom InputTypes
  /**
   * OrdersCountOutputType without action
   */
  export type OrdersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrdersCountOutputType
     */
    select?: OrdersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrdersCountOutputType without action
   */
  export type OrdersCountOutputTypeCountDeliveriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: deliveriesWhereInput
  }

  /**
   * OrdersCountOutputType without action
   */
  export type OrdersCountOutputTypeCountNew_drumsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: new_drumsWhereInput
  }


  /**
   * Count Type ProcessesCountOutputType
   */

  export type ProcessesCountOutputType = {
    transactions: number
  }

  export type ProcessesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transactions?: boolean | ProcessesCountOutputTypeCountTransactionsArgs
  }

  // Custom InputTypes
  /**
   * ProcessesCountOutputType without action
   */
  export type ProcessesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessesCountOutputType
     */
    select?: ProcessesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProcessesCountOutputType without action
   */
  export type ProcessesCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: transactionsWhereInput
  }


  /**
   * Count Type Repro_drumsCountOutputType
   */

  export type Repro_drumsCountOutputType = {
    repro_additions: number
    transactions: number
  }

  export type Repro_drumsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    repro_additions?: boolean | Repro_drumsCountOutputTypeCountRepro_additionsArgs
    transactions?: boolean | Repro_drumsCountOutputTypeCountTransactionsArgs
  }

  // Custom InputTypes
  /**
   * Repro_drumsCountOutputType without action
   */
  export type Repro_drumsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repro_drumsCountOutputType
     */
    select?: Repro_drumsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Repro_drumsCountOutputType without action
   */
  export type Repro_drumsCountOutputTypeCountRepro_additionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: repro_additionsWhereInput
  }

  /**
   * Repro_drumsCountOutputType without action
   */
  export type Repro_drumsCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: transactionsWhereInput
  }


  /**
   * Count Type StillsCountOutputType
   */

  export type StillsCountOutputType = {
    processes: number
  }

  export type StillsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    processes?: boolean | StillsCountOutputTypeCountProcessesArgs
  }

  // Custom InputTypes
  /**
   * StillsCountOutputType without action
   */
  export type StillsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StillsCountOutputType
     */
    select?: StillsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StillsCountOutputType without action
   */
  export type StillsCountOutputTypeCountProcessesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: processesWhereInput
  }


  /**
   * Models
   */

  /**
   * Model bottle_sizes
   */

  export type AggregateBottle_sizes = {
    _count: Bottle_sizesCountAggregateOutputType | null
    _avg: Bottle_sizesAvgAggregateOutputType | null
    _sum: Bottle_sizesSumAggregateOutputType | null
    _min: Bottle_sizesMinAggregateOutputType | null
    _max: Bottle_sizesMaxAggregateOutputType | null
  }

  export type Bottle_sizesAvgAggregateOutputType = {
    id: number | null
  }

  export type Bottle_sizesSumAggregateOutputType = {
    id: number | null
  }

  export type Bottle_sizesMinAggregateOutputType = {
    id: number | null
    volume: string | null
  }

  export type Bottle_sizesMaxAggregateOutputType = {
    id: number | null
    volume: string | null
  }

  export type Bottle_sizesCountAggregateOutputType = {
    id: number
    volume: number
    _all: number
  }


  export type Bottle_sizesAvgAggregateInputType = {
    id?: true
  }

  export type Bottle_sizesSumAggregateInputType = {
    id?: true
  }

  export type Bottle_sizesMinAggregateInputType = {
    id?: true
    volume?: true
  }

  export type Bottle_sizesMaxAggregateInputType = {
    id?: true
    volume?: true
  }

  export type Bottle_sizesCountAggregateInputType = {
    id?: true
    volume?: true
    _all?: true
  }

  export type Bottle_sizesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which bottle_sizes to aggregate.
     */
    where?: bottle_sizesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bottle_sizes to fetch.
     */
    orderBy?: bottle_sizesOrderByWithRelationInput | bottle_sizesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: bottle_sizesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bottle_sizes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bottle_sizes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned bottle_sizes
    **/
    _count?: true | Bottle_sizesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Bottle_sizesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Bottle_sizesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Bottle_sizesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Bottle_sizesMaxAggregateInputType
  }

  export type GetBottle_sizesAggregateType<T extends Bottle_sizesAggregateArgs> = {
        [P in keyof T & keyof AggregateBottle_sizes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBottle_sizes[P]>
      : GetScalarType<T[P], AggregateBottle_sizes[P]>
  }




  export type bottle_sizesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: bottle_sizesWhereInput
    orderBy?: bottle_sizesOrderByWithAggregationInput | bottle_sizesOrderByWithAggregationInput[]
    by: Bottle_sizesScalarFieldEnum[] | Bottle_sizesScalarFieldEnum
    having?: bottle_sizesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Bottle_sizesCountAggregateInputType | true
    _avg?: Bottle_sizesAvgAggregateInputType
    _sum?: Bottle_sizesSumAggregateInputType
    _min?: Bottle_sizesMinAggregateInputType
    _max?: Bottle_sizesMaxAggregateInputType
  }

  export type Bottle_sizesGroupByOutputType = {
    id: number
    volume: string
    _count: Bottle_sizesCountAggregateOutputType | null
    _avg: Bottle_sizesAvgAggregateOutputType | null
    _sum: Bottle_sizesSumAggregateOutputType | null
    _min: Bottle_sizesMinAggregateOutputType | null
    _max: Bottle_sizesMaxAggregateOutputType | null
  }

  type GetBottle_sizesGroupByPayload<T extends bottle_sizesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Bottle_sizesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Bottle_sizesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Bottle_sizesGroupByOutputType[P]>
            : GetScalarType<T[P], Bottle_sizesGroupByOutputType[P]>
        }
      >
    >


  export type bottle_sizesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    volume?: boolean
    product_prices?: boolean | bottle_sizes$product_pricesArgs<ExtArgs>
    _count?: boolean | Bottle_sizesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bottle_sizes"]>

  export type bottle_sizesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    volume?: boolean
  }, ExtArgs["result"]["bottle_sizes"]>

  export type bottle_sizesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    volume?: boolean
  }, ExtArgs["result"]["bottle_sizes"]>

  export type bottle_sizesSelectScalar = {
    id?: boolean
    volume?: boolean
  }

  export type bottle_sizesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "volume", ExtArgs["result"]["bottle_sizes"]>
  export type bottle_sizesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product_prices?: boolean | bottle_sizes$product_pricesArgs<ExtArgs>
    _count?: boolean | Bottle_sizesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type bottle_sizesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type bottle_sizesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $bottle_sizesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "bottle_sizes"
    objects: {
      product_prices: Prisma.$product_pricesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      volume: string
    }, ExtArgs["result"]["bottle_sizes"]>
    composites: {}
  }

  type bottle_sizesGetPayload<S extends boolean | null | undefined | bottle_sizesDefaultArgs> = $Result.GetResult<Prisma.$bottle_sizesPayload, S>

  type bottle_sizesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<bottle_sizesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Bottle_sizesCountAggregateInputType | true
    }

  export interface bottle_sizesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['bottle_sizes'], meta: { name: 'bottle_sizes' } }
    /**
     * Find zero or one Bottle_sizes that matches the filter.
     * @param {bottle_sizesFindUniqueArgs} args - Arguments to find a Bottle_sizes
     * @example
     * // Get one Bottle_sizes
     * const bottle_sizes = await prisma.bottle_sizes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends bottle_sizesFindUniqueArgs>(args: SelectSubset<T, bottle_sizesFindUniqueArgs<ExtArgs>>): Prisma__bottle_sizesClient<$Result.GetResult<Prisma.$bottle_sizesPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Bottle_sizes that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {bottle_sizesFindUniqueOrThrowArgs} args - Arguments to find a Bottle_sizes
     * @example
     * // Get one Bottle_sizes
     * const bottle_sizes = await prisma.bottle_sizes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends bottle_sizesFindUniqueOrThrowArgs>(args: SelectSubset<T, bottle_sizesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__bottle_sizesClient<$Result.GetResult<Prisma.$bottle_sizesPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Bottle_sizes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bottle_sizesFindFirstArgs} args - Arguments to find a Bottle_sizes
     * @example
     * // Get one Bottle_sizes
     * const bottle_sizes = await prisma.bottle_sizes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends bottle_sizesFindFirstArgs>(args?: SelectSubset<T, bottle_sizesFindFirstArgs<ExtArgs>>): Prisma__bottle_sizesClient<$Result.GetResult<Prisma.$bottle_sizesPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Bottle_sizes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bottle_sizesFindFirstOrThrowArgs} args - Arguments to find a Bottle_sizes
     * @example
     * // Get one Bottle_sizes
     * const bottle_sizes = await prisma.bottle_sizes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends bottle_sizesFindFirstOrThrowArgs>(args?: SelectSubset<T, bottle_sizesFindFirstOrThrowArgs<ExtArgs>>): Prisma__bottle_sizesClient<$Result.GetResult<Prisma.$bottle_sizesPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Bottle_sizes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bottle_sizesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bottle_sizes
     * const bottle_sizes = await prisma.bottle_sizes.findMany()
     * 
     * // Get first 10 Bottle_sizes
     * const bottle_sizes = await prisma.bottle_sizes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bottle_sizesWithIdOnly = await prisma.bottle_sizes.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends bottle_sizesFindManyArgs>(args?: SelectSubset<T, bottle_sizesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$bottle_sizesPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Bottle_sizes.
     * @param {bottle_sizesCreateArgs} args - Arguments to create a Bottle_sizes.
     * @example
     * // Create one Bottle_sizes
     * const Bottle_sizes = await prisma.bottle_sizes.create({
     *   data: {
     *     // ... data to create a Bottle_sizes
     *   }
     * })
     * 
     */
    create<T extends bottle_sizesCreateArgs>(args: SelectSubset<T, bottle_sizesCreateArgs<ExtArgs>>): Prisma__bottle_sizesClient<$Result.GetResult<Prisma.$bottle_sizesPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Bottle_sizes.
     * @param {bottle_sizesCreateManyArgs} args - Arguments to create many Bottle_sizes.
     * @example
     * // Create many Bottle_sizes
     * const bottle_sizes = await prisma.bottle_sizes.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends bottle_sizesCreateManyArgs>(args?: SelectSubset<T, bottle_sizesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Bottle_sizes and returns the data saved in the database.
     * @param {bottle_sizesCreateManyAndReturnArgs} args - Arguments to create many Bottle_sizes.
     * @example
     * // Create many Bottle_sizes
     * const bottle_sizes = await prisma.bottle_sizes.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Bottle_sizes and only return the `id`
     * const bottle_sizesWithIdOnly = await prisma.bottle_sizes.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends bottle_sizesCreateManyAndReturnArgs>(args?: SelectSubset<T, bottle_sizesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$bottle_sizesPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Bottle_sizes.
     * @param {bottle_sizesDeleteArgs} args - Arguments to delete one Bottle_sizes.
     * @example
     * // Delete one Bottle_sizes
     * const Bottle_sizes = await prisma.bottle_sizes.delete({
     *   where: {
     *     // ... filter to delete one Bottle_sizes
     *   }
     * })
     * 
     */
    delete<T extends bottle_sizesDeleteArgs>(args: SelectSubset<T, bottle_sizesDeleteArgs<ExtArgs>>): Prisma__bottle_sizesClient<$Result.GetResult<Prisma.$bottle_sizesPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Bottle_sizes.
     * @param {bottle_sizesUpdateArgs} args - Arguments to update one Bottle_sizes.
     * @example
     * // Update one Bottle_sizes
     * const bottle_sizes = await prisma.bottle_sizes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends bottle_sizesUpdateArgs>(args: SelectSubset<T, bottle_sizesUpdateArgs<ExtArgs>>): Prisma__bottle_sizesClient<$Result.GetResult<Prisma.$bottle_sizesPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Bottle_sizes.
     * @param {bottle_sizesDeleteManyArgs} args - Arguments to filter Bottle_sizes to delete.
     * @example
     * // Delete a few Bottle_sizes
     * const { count } = await prisma.bottle_sizes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends bottle_sizesDeleteManyArgs>(args?: SelectSubset<T, bottle_sizesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bottle_sizes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bottle_sizesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bottle_sizes
     * const bottle_sizes = await prisma.bottle_sizes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends bottle_sizesUpdateManyArgs>(args: SelectSubset<T, bottle_sizesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bottle_sizes and returns the data updated in the database.
     * @param {bottle_sizesUpdateManyAndReturnArgs} args - Arguments to update many Bottle_sizes.
     * @example
     * // Update many Bottle_sizes
     * const bottle_sizes = await prisma.bottle_sizes.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Bottle_sizes and only return the `id`
     * const bottle_sizesWithIdOnly = await prisma.bottle_sizes.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends bottle_sizesUpdateManyAndReturnArgs>(args: SelectSubset<T, bottle_sizesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$bottle_sizesPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Bottle_sizes.
     * @param {bottle_sizesUpsertArgs} args - Arguments to update or create a Bottle_sizes.
     * @example
     * // Update or create a Bottle_sizes
     * const bottle_sizes = await prisma.bottle_sizes.upsert({
     *   create: {
     *     // ... data to create a Bottle_sizes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Bottle_sizes we want to update
     *   }
     * })
     */
    upsert<T extends bottle_sizesUpsertArgs>(args: SelectSubset<T, bottle_sizesUpsertArgs<ExtArgs>>): Prisma__bottle_sizesClient<$Result.GetResult<Prisma.$bottle_sizesPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Bottle_sizes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bottle_sizesCountArgs} args - Arguments to filter Bottle_sizes to count.
     * @example
     * // Count the number of Bottle_sizes
     * const count = await prisma.bottle_sizes.count({
     *   where: {
     *     // ... the filter for the Bottle_sizes we want to count
     *   }
     * })
    **/
    count<T extends bottle_sizesCountArgs>(
      args?: Subset<T, bottle_sizesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Bottle_sizesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Bottle_sizes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Bottle_sizesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Bottle_sizesAggregateArgs>(args: Subset<T, Bottle_sizesAggregateArgs>): Prisma.PrismaPromise<GetBottle_sizesAggregateType<T>>

    /**
     * Group by Bottle_sizes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bottle_sizesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends bottle_sizesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: bottle_sizesGroupByArgs['orderBy'] }
        : { orderBy?: bottle_sizesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, bottle_sizesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBottle_sizesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the bottle_sizes model
   */
  readonly fields: bottle_sizesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for bottle_sizes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__bottle_sizesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product_prices<T extends bottle_sizes$product_pricesArgs<ExtArgs> = {}>(args?: Subset<T, bottle_sizes$product_pricesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$product_pricesPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the bottle_sizes model
   */ 
  interface bottle_sizesFieldRefs {
    readonly id: FieldRef<"bottle_sizes", 'Int'>
    readonly volume: FieldRef<"bottle_sizes", 'String'>
  }
    

  // Custom InputTypes
  /**
   * bottle_sizes findUnique
   */
  export type bottle_sizesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bottle_sizes
     */
    select?: bottle_sizesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the bottle_sizes
     */
    omit?: bottle_sizesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bottle_sizesInclude<ExtArgs> | null
    /**
     * Filter, which bottle_sizes to fetch.
     */
    where: bottle_sizesWhereUniqueInput
  }

  /**
   * bottle_sizes findUniqueOrThrow
   */
  export type bottle_sizesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bottle_sizes
     */
    select?: bottle_sizesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the bottle_sizes
     */
    omit?: bottle_sizesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bottle_sizesInclude<ExtArgs> | null
    /**
     * Filter, which bottle_sizes to fetch.
     */
    where: bottle_sizesWhereUniqueInput
  }

  /**
   * bottle_sizes findFirst
   */
  export type bottle_sizesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bottle_sizes
     */
    select?: bottle_sizesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the bottle_sizes
     */
    omit?: bottle_sizesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bottle_sizesInclude<ExtArgs> | null
    /**
     * Filter, which bottle_sizes to fetch.
     */
    where?: bottle_sizesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bottle_sizes to fetch.
     */
    orderBy?: bottle_sizesOrderByWithRelationInput | bottle_sizesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for bottle_sizes.
     */
    cursor?: bottle_sizesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bottle_sizes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bottle_sizes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of bottle_sizes.
     */
    distinct?: Bottle_sizesScalarFieldEnum | Bottle_sizesScalarFieldEnum[]
  }

  /**
   * bottle_sizes findFirstOrThrow
   */
  export type bottle_sizesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bottle_sizes
     */
    select?: bottle_sizesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the bottle_sizes
     */
    omit?: bottle_sizesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bottle_sizesInclude<ExtArgs> | null
    /**
     * Filter, which bottle_sizes to fetch.
     */
    where?: bottle_sizesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bottle_sizes to fetch.
     */
    orderBy?: bottle_sizesOrderByWithRelationInput | bottle_sizesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for bottle_sizes.
     */
    cursor?: bottle_sizesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bottle_sizes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bottle_sizes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of bottle_sizes.
     */
    distinct?: Bottle_sizesScalarFieldEnum | Bottle_sizesScalarFieldEnum[]
  }

  /**
   * bottle_sizes findMany
   */
  export type bottle_sizesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bottle_sizes
     */
    select?: bottle_sizesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the bottle_sizes
     */
    omit?: bottle_sizesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bottle_sizesInclude<ExtArgs> | null
    /**
     * Filter, which bottle_sizes to fetch.
     */
    where?: bottle_sizesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bottle_sizes to fetch.
     */
    orderBy?: bottle_sizesOrderByWithRelationInput | bottle_sizesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing bottle_sizes.
     */
    cursor?: bottle_sizesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bottle_sizes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bottle_sizes.
     */
    skip?: number
    distinct?: Bottle_sizesScalarFieldEnum | Bottle_sizesScalarFieldEnum[]
  }

  /**
   * bottle_sizes create
   */
  export type bottle_sizesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bottle_sizes
     */
    select?: bottle_sizesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the bottle_sizes
     */
    omit?: bottle_sizesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bottle_sizesInclude<ExtArgs> | null
    /**
     * The data needed to create a bottle_sizes.
     */
    data: XOR<bottle_sizesCreateInput, bottle_sizesUncheckedCreateInput>
  }

  /**
   * bottle_sizes createMany
   */
  export type bottle_sizesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many bottle_sizes.
     */
    data: bottle_sizesCreateManyInput | bottle_sizesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * bottle_sizes createManyAndReturn
   */
  export type bottle_sizesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bottle_sizes
     */
    select?: bottle_sizesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the bottle_sizes
     */
    omit?: bottle_sizesOmit<ExtArgs> | null
    /**
     * The data used to create many bottle_sizes.
     */
    data: bottle_sizesCreateManyInput | bottle_sizesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * bottle_sizes update
   */
  export type bottle_sizesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bottle_sizes
     */
    select?: bottle_sizesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the bottle_sizes
     */
    omit?: bottle_sizesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bottle_sizesInclude<ExtArgs> | null
    /**
     * The data needed to update a bottle_sizes.
     */
    data: XOR<bottle_sizesUpdateInput, bottle_sizesUncheckedUpdateInput>
    /**
     * Choose, which bottle_sizes to update.
     */
    where: bottle_sizesWhereUniqueInput
  }

  /**
   * bottle_sizes updateMany
   */
  export type bottle_sizesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update bottle_sizes.
     */
    data: XOR<bottle_sizesUpdateManyMutationInput, bottle_sizesUncheckedUpdateManyInput>
    /**
     * Filter which bottle_sizes to update
     */
    where?: bottle_sizesWhereInput
  }

  /**
   * bottle_sizes updateManyAndReturn
   */
  export type bottle_sizesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bottle_sizes
     */
    select?: bottle_sizesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the bottle_sizes
     */
    omit?: bottle_sizesOmit<ExtArgs> | null
    /**
     * The data used to update bottle_sizes.
     */
    data: XOR<bottle_sizesUpdateManyMutationInput, bottle_sizesUncheckedUpdateManyInput>
    /**
     * Filter which bottle_sizes to update
     */
    where?: bottle_sizesWhereInput
  }

  /**
   * bottle_sizes upsert
   */
  export type bottle_sizesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bottle_sizes
     */
    select?: bottle_sizesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the bottle_sizes
     */
    omit?: bottle_sizesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bottle_sizesInclude<ExtArgs> | null
    /**
     * The filter to search for the bottle_sizes to update in case it exists.
     */
    where: bottle_sizesWhereUniqueInput
    /**
     * In case the bottle_sizes found by the `where` argument doesn't exist, create a new bottle_sizes with this data.
     */
    create: XOR<bottle_sizesCreateInput, bottle_sizesUncheckedCreateInput>
    /**
     * In case the bottle_sizes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<bottle_sizesUpdateInput, bottle_sizesUncheckedUpdateInput>
  }

  /**
   * bottle_sizes delete
   */
  export type bottle_sizesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bottle_sizes
     */
    select?: bottle_sizesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the bottle_sizes
     */
    omit?: bottle_sizesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bottle_sizesInclude<ExtArgs> | null
    /**
     * Filter which bottle_sizes to delete.
     */
    where: bottle_sizesWhereUniqueInput
  }

  /**
   * bottle_sizes deleteMany
   */
  export type bottle_sizesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which bottle_sizes to delete
     */
    where?: bottle_sizesWhereInput
  }

  /**
   * bottle_sizes.product_prices
   */
  export type bottle_sizes$product_pricesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_prices
     */
    select?: product_pricesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product_prices
     */
    omit?: product_pricesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_pricesInclude<ExtArgs> | null
    where?: product_pricesWhereInput
    orderBy?: product_pricesOrderByWithRelationInput | product_pricesOrderByWithRelationInput[]
    cursor?: product_pricesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Product_pricesScalarFieldEnum | Product_pricesScalarFieldEnum[]
  }

  /**
   * bottle_sizes without action
   */
  export type bottle_sizesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bottle_sizes
     */
    select?: bottle_sizesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the bottle_sizes
     */
    omit?: bottle_sizesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bottle_sizesInclude<ExtArgs> | null
  }


  /**
   * Model chemical_groups
   */

  export type AggregateChemical_groups = {
    _count: Chemical_groupsCountAggregateOutputType | null
    _avg: Chemical_groupsAvgAggregateOutputType | null
    _sum: Chemical_groupsSumAggregateOutputType | null
    _min: Chemical_groupsMinAggregateOutputType | null
    _max: Chemical_groupsMaxAggregateOutputType | null
  }

  export type Chemical_groupsAvgAggregateOutputType = {
    group_id: number | null
  }

  export type Chemical_groupsSumAggregateOutputType = {
    group_id: number | null
  }

  export type Chemical_groupsMinAggregateOutputType = {
    group_id: number | null
    name: string | null
  }

  export type Chemical_groupsMaxAggregateOutputType = {
    group_id: number | null
    name: string | null
  }

  export type Chemical_groupsCountAggregateOutputType = {
    group_id: number
    name: number
    _all: number
  }


  export type Chemical_groupsAvgAggregateInputType = {
    group_id?: true
  }

  export type Chemical_groupsSumAggregateInputType = {
    group_id?: true
  }

  export type Chemical_groupsMinAggregateInputType = {
    group_id?: true
    name?: true
  }

  export type Chemical_groupsMaxAggregateInputType = {
    group_id?: true
    name?: true
  }

  export type Chemical_groupsCountAggregateInputType = {
    group_id?: true
    name?: true
    _all?: true
  }

  export type Chemical_groupsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which chemical_groups to aggregate.
     */
    where?: chemical_groupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chemical_groups to fetch.
     */
    orderBy?: chemical_groupsOrderByWithRelationInput | chemical_groupsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: chemical_groupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chemical_groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chemical_groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chemical_groups
    **/
    _count?: true | Chemical_groupsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Chemical_groupsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Chemical_groupsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Chemical_groupsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Chemical_groupsMaxAggregateInputType
  }

  export type GetChemical_groupsAggregateType<T extends Chemical_groupsAggregateArgs> = {
        [P in keyof T & keyof AggregateChemical_groups]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChemical_groups[P]>
      : GetScalarType<T[P], AggregateChemical_groups[P]>
  }




  export type chemical_groupsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: chemical_groupsWhereInput
    orderBy?: chemical_groupsOrderByWithAggregationInput | chemical_groupsOrderByWithAggregationInput[]
    by: Chemical_groupsScalarFieldEnum[] | Chemical_groupsScalarFieldEnum
    having?: chemical_groupsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Chemical_groupsCountAggregateInputType | true
    _avg?: Chemical_groupsAvgAggregateInputType
    _sum?: Chemical_groupsSumAggregateInputType
    _min?: Chemical_groupsMinAggregateInputType
    _max?: Chemical_groupsMaxAggregateInputType
  }

  export type Chemical_groupsGroupByOutputType = {
    group_id: number
    name: string
    _count: Chemical_groupsCountAggregateOutputType | null
    _avg: Chemical_groupsAvgAggregateOutputType | null
    _sum: Chemical_groupsSumAggregateOutputType | null
    _min: Chemical_groupsMinAggregateOutputType | null
    _max: Chemical_groupsMaxAggregateOutputType | null
  }

  type GetChemical_groupsGroupByPayload<T extends chemical_groupsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Chemical_groupsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Chemical_groupsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Chemical_groupsGroupByOutputType[P]>
            : GetScalarType<T[P], Chemical_groupsGroupByOutputType[P]>
        }
      >
    >


  export type chemical_groupsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    group_id?: boolean
    name?: boolean
  }, ExtArgs["result"]["chemical_groups"]>

  export type chemical_groupsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    group_id?: boolean
    name?: boolean
  }, ExtArgs["result"]["chemical_groups"]>

  export type chemical_groupsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    group_id?: boolean
    name?: boolean
  }, ExtArgs["result"]["chemical_groups"]>

  export type chemical_groupsSelectScalar = {
    group_id?: boolean
    name?: boolean
  }

  export type chemical_groupsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"group_id" | "name", ExtArgs["result"]["chemical_groups"]>

  export type $chemical_groupsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "chemical_groups"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      group_id: number
      name: string
    }, ExtArgs["result"]["chemical_groups"]>
    composites: {}
  }

  type chemical_groupsGetPayload<S extends boolean | null | undefined | chemical_groupsDefaultArgs> = $Result.GetResult<Prisma.$chemical_groupsPayload, S>

  type chemical_groupsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<chemical_groupsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Chemical_groupsCountAggregateInputType | true
    }

  export interface chemical_groupsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['chemical_groups'], meta: { name: 'chemical_groups' } }
    /**
     * Find zero or one Chemical_groups that matches the filter.
     * @param {chemical_groupsFindUniqueArgs} args - Arguments to find a Chemical_groups
     * @example
     * // Get one Chemical_groups
     * const chemical_groups = await prisma.chemical_groups.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends chemical_groupsFindUniqueArgs>(args: SelectSubset<T, chemical_groupsFindUniqueArgs<ExtArgs>>): Prisma__chemical_groupsClient<$Result.GetResult<Prisma.$chemical_groupsPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Chemical_groups that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {chemical_groupsFindUniqueOrThrowArgs} args - Arguments to find a Chemical_groups
     * @example
     * // Get one Chemical_groups
     * const chemical_groups = await prisma.chemical_groups.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends chemical_groupsFindUniqueOrThrowArgs>(args: SelectSubset<T, chemical_groupsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__chemical_groupsClient<$Result.GetResult<Prisma.$chemical_groupsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Chemical_groups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chemical_groupsFindFirstArgs} args - Arguments to find a Chemical_groups
     * @example
     * // Get one Chemical_groups
     * const chemical_groups = await prisma.chemical_groups.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends chemical_groupsFindFirstArgs>(args?: SelectSubset<T, chemical_groupsFindFirstArgs<ExtArgs>>): Prisma__chemical_groupsClient<$Result.GetResult<Prisma.$chemical_groupsPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Chemical_groups that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chemical_groupsFindFirstOrThrowArgs} args - Arguments to find a Chemical_groups
     * @example
     * // Get one Chemical_groups
     * const chemical_groups = await prisma.chemical_groups.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends chemical_groupsFindFirstOrThrowArgs>(args?: SelectSubset<T, chemical_groupsFindFirstOrThrowArgs<ExtArgs>>): Prisma__chemical_groupsClient<$Result.GetResult<Prisma.$chemical_groupsPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Chemical_groups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chemical_groupsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chemical_groups
     * const chemical_groups = await prisma.chemical_groups.findMany()
     * 
     * // Get first 10 Chemical_groups
     * const chemical_groups = await prisma.chemical_groups.findMany({ take: 10 })
     * 
     * // Only select the `group_id`
     * const chemical_groupsWithGroup_idOnly = await prisma.chemical_groups.findMany({ select: { group_id: true } })
     * 
     */
    findMany<T extends chemical_groupsFindManyArgs>(args?: SelectSubset<T, chemical_groupsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$chemical_groupsPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Chemical_groups.
     * @param {chemical_groupsCreateArgs} args - Arguments to create a Chemical_groups.
     * @example
     * // Create one Chemical_groups
     * const Chemical_groups = await prisma.chemical_groups.create({
     *   data: {
     *     // ... data to create a Chemical_groups
     *   }
     * })
     * 
     */
    create<T extends chemical_groupsCreateArgs>(args: SelectSubset<T, chemical_groupsCreateArgs<ExtArgs>>): Prisma__chemical_groupsClient<$Result.GetResult<Prisma.$chemical_groupsPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Chemical_groups.
     * @param {chemical_groupsCreateManyArgs} args - Arguments to create many Chemical_groups.
     * @example
     * // Create many Chemical_groups
     * const chemical_groups = await prisma.chemical_groups.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends chemical_groupsCreateManyArgs>(args?: SelectSubset<T, chemical_groupsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Chemical_groups and returns the data saved in the database.
     * @param {chemical_groupsCreateManyAndReturnArgs} args - Arguments to create many Chemical_groups.
     * @example
     * // Create many Chemical_groups
     * const chemical_groups = await prisma.chemical_groups.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Chemical_groups and only return the `group_id`
     * const chemical_groupsWithGroup_idOnly = await prisma.chemical_groups.createManyAndReturn({
     *   select: { group_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends chemical_groupsCreateManyAndReturnArgs>(args?: SelectSubset<T, chemical_groupsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$chemical_groupsPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Chemical_groups.
     * @param {chemical_groupsDeleteArgs} args - Arguments to delete one Chemical_groups.
     * @example
     * // Delete one Chemical_groups
     * const Chemical_groups = await prisma.chemical_groups.delete({
     *   where: {
     *     // ... filter to delete one Chemical_groups
     *   }
     * })
     * 
     */
    delete<T extends chemical_groupsDeleteArgs>(args: SelectSubset<T, chemical_groupsDeleteArgs<ExtArgs>>): Prisma__chemical_groupsClient<$Result.GetResult<Prisma.$chemical_groupsPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Chemical_groups.
     * @param {chemical_groupsUpdateArgs} args - Arguments to update one Chemical_groups.
     * @example
     * // Update one Chemical_groups
     * const chemical_groups = await prisma.chemical_groups.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends chemical_groupsUpdateArgs>(args: SelectSubset<T, chemical_groupsUpdateArgs<ExtArgs>>): Prisma__chemical_groupsClient<$Result.GetResult<Prisma.$chemical_groupsPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Chemical_groups.
     * @param {chemical_groupsDeleteManyArgs} args - Arguments to filter Chemical_groups to delete.
     * @example
     * // Delete a few Chemical_groups
     * const { count } = await prisma.chemical_groups.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends chemical_groupsDeleteManyArgs>(args?: SelectSubset<T, chemical_groupsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chemical_groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chemical_groupsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chemical_groups
     * const chemical_groups = await prisma.chemical_groups.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends chemical_groupsUpdateManyArgs>(args: SelectSubset<T, chemical_groupsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chemical_groups and returns the data updated in the database.
     * @param {chemical_groupsUpdateManyAndReturnArgs} args - Arguments to update many Chemical_groups.
     * @example
     * // Update many Chemical_groups
     * const chemical_groups = await prisma.chemical_groups.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Chemical_groups and only return the `group_id`
     * const chemical_groupsWithGroup_idOnly = await prisma.chemical_groups.updateManyAndReturn({
     *   select: { group_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends chemical_groupsUpdateManyAndReturnArgs>(args: SelectSubset<T, chemical_groupsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$chemical_groupsPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Chemical_groups.
     * @param {chemical_groupsUpsertArgs} args - Arguments to update or create a Chemical_groups.
     * @example
     * // Update or create a Chemical_groups
     * const chemical_groups = await prisma.chemical_groups.upsert({
     *   create: {
     *     // ... data to create a Chemical_groups
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chemical_groups we want to update
     *   }
     * })
     */
    upsert<T extends chemical_groupsUpsertArgs>(args: SelectSubset<T, chemical_groupsUpsertArgs<ExtArgs>>): Prisma__chemical_groupsClient<$Result.GetResult<Prisma.$chemical_groupsPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Chemical_groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chemical_groupsCountArgs} args - Arguments to filter Chemical_groups to count.
     * @example
     * // Count the number of Chemical_groups
     * const count = await prisma.chemical_groups.count({
     *   where: {
     *     // ... the filter for the Chemical_groups we want to count
     *   }
     * })
    **/
    count<T extends chemical_groupsCountArgs>(
      args?: Subset<T, chemical_groupsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Chemical_groupsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chemical_groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chemical_groupsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Chemical_groupsAggregateArgs>(args: Subset<T, Chemical_groupsAggregateArgs>): Prisma.PrismaPromise<GetChemical_groupsAggregateType<T>>

    /**
     * Group by Chemical_groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chemical_groupsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends chemical_groupsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: chemical_groupsGroupByArgs['orderBy'] }
        : { orderBy?: chemical_groupsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, chemical_groupsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChemical_groupsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the chemical_groups model
   */
  readonly fields: chemical_groupsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for chemical_groups.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__chemical_groupsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the chemical_groups model
   */ 
  interface chemical_groupsFieldRefs {
    readonly group_id: FieldRef<"chemical_groups", 'Int'>
    readonly name: FieldRef<"chemical_groups", 'String'>
  }
    

  // Custom InputTypes
  /**
   * chemical_groups findUnique
   */
  export type chemical_groupsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chemical_groups
     */
    select?: chemical_groupsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the chemical_groups
     */
    omit?: chemical_groupsOmit<ExtArgs> | null
    /**
     * Filter, which chemical_groups to fetch.
     */
    where: chemical_groupsWhereUniqueInput
  }

  /**
   * chemical_groups findUniqueOrThrow
   */
  export type chemical_groupsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chemical_groups
     */
    select?: chemical_groupsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the chemical_groups
     */
    omit?: chemical_groupsOmit<ExtArgs> | null
    /**
     * Filter, which chemical_groups to fetch.
     */
    where: chemical_groupsWhereUniqueInput
  }

  /**
   * chemical_groups findFirst
   */
  export type chemical_groupsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chemical_groups
     */
    select?: chemical_groupsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the chemical_groups
     */
    omit?: chemical_groupsOmit<ExtArgs> | null
    /**
     * Filter, which chemical_groups to fetch.
     */
    where?: chemical_groupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chemical_groups to fetch.
     */
    orderBy?: chemical_groupsOrderByWithRelationInput | chemical_groupsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chemical_groups.
     */
    cursor?: chemical_groupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chemical_groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chemical_groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chemical_groups.
     */
    distinct?: Chemical_groupsScalarFieldEnum | Chemical_groupsScalarFieldEnum[]
  }

  /**
   * chemical_groups findFirstOrThrow
   */
  export type chemical_groupsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chemical_groups
     */
    select?: chemical_groupsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the chemical_groups
     */
    omit?: chemical_groupsOmit<ExtArgs> | null
    /**
     * Filter, which chemical_groups to fetch.
     */
    where?: chemical_groupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chemical_groups to fetch.
     */
    orderBy?: chemical_groupsOrderByWithRelationInput | chemical_groupsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chemical_groups.
     */
    cursor?: chemical_groupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chemical_groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chemical_groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chemical_groups.
     */
    distinct?: Chemical_groupsScalarFieldEnum | Chemical_groupsScalarFieldEnum[]
  }

  /**
   * chemical_groups findMany
   */
  export type chemical_groupsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chemical_groups
     */
    select?: chemical_groupsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the chemical_groups
     */
    omit?: chemical_groupsOmit<ExtArgs> | null
    /**
     * Filter, which chemical_groups to fetch.
     */
    where?: chemical_groupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chemical_groups to fetch.
     */
    orderBy?: chemical_groupsOrderByWithRelationInput | chemical_groupsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chemical_groups.
     */
    cursor?: chemical_groupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chemical_groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chemical_groups.
     */
    skip?: number
    distinct?: Chemical_groupsScalarFieldEnum | Chemical_groupsScalarFieldEnum[]
  }

  /**
   * chemical_groups create
   */
  export type chemical_groupsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chemical_groups
     */
    select?: chemical_groupsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the chemical_groups
     */
    omit?: chemical_groupsOmit<ExtArgs> | null
    /**
     * The data needed to create a chemical_groups.
     */
    data: XOR<chemical_groupsCreateInput, chemical_groupsUncheckedCreateInput>
  }

  /**
   * chemical_groups createMany
   */
  export type chemical_groupsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many chemical_groups.
     */
    data: chemical_groupsCreateManyInput | chemical_groupsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * chemical_groups createManyAndReturn
   */
  export type chemical_groupsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chemical_groups
     */
    select?: chemical_groupsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the chemical_groups
     */
    omit?: chemical_groupsOmit<ExtArgs> | null
    /**
     * The data used to create many chemical_groups.
     */
    data: chemical_groupsCreateManyInput | chemical_groupsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * chemical_groups update
   */
  export type chemical_groupsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chemical_groups
     */
    select?: chemical_groupsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the chemical_groups
     */
    omit?: chemical_groupsOmit<ExtArgs> | null
    /**
     * The data needed to update a chemical_groups.
     */
    data: XOR<chemical_groupsUpdateInput, chemical_groupsUncheckedUpdateInput>
    /**
     * Choose, which chemical_groups to update.
     */
    where: chemical_groupsWhereUniqueInput
  }

  /**
   * chemical_groups updateMany
   */
  export type chemical_groupsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update chemical_groups.
     */
    data: XOR<chemical_groupsUpdateManyMutationInput, chemical_groupsUncheckedUpdateManyInput>
    /**
     * Filter which chemical_groups to update
     */
    where?: chemical_groupsWhereInput
  }

  /**
   * chemical_groups updateManyAndReturn
   */
  export type chemical_groupsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chemical_groups
     */
    select?: chemical_groupsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the chemical_groups
     */
    omit?: chemical_groupsOmit<ExtArgs> | null
    /**
     * The data used to update chemical_groups.
     */
    data: XOR<chemical_groupsUpdateManyMutationInput, chemical_groupsUncheckedUpdateManyInput>
    /**
     * Filter which chemical_groups to update
     */
    where?: chemical_groupsWhereInput
  }

  /**
   * chemical_groups upsert
   */
  export type chemical_groupsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chemical_groups
     */
    select?: chemical_groupsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the chemical_groups
     */
    omit?: chemical_groupsOmit<ExtArgs> | null
    /**
     * The filter to search for the chemical_groups to update in case it exists.
     */
    where: chemical_groupsWhereUniqueInput
    /**
     * In case the chemical_groups found by the `where` argument doesn't exist, create a new chemical_groups with this data.
     */
    create: XOR<chemical_groupsCreateInput, chemical_groupsUncheckedCreateInput>
    /**
     * In case the chemical_groups was found with the provided `where` argument, update it with this data.
     */
    update: XOR<chemical_groupsUpdateInput, chemical_groupsUncheckedUpdateInput>
  }

  /**
   * chemical_groups delete
   */
  export type chemical_groupsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chemical_groups
     */
    select?: chemical_groupsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the chemical_groups
     */
    omit?: chemical_groupsOmit<ExtArgs> | null
    /**
     * Filter which chemical_groups to delete.
     */
    where: chemical_groupsWhereUniqueInput
  }

  /**
   * chemical_groups deleteMany
   */
  export type chemical_groupsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which chemical_groups to delete
     */
    where?: chemical_groupsWhereInput
  }

  /**
   * chemical_groups without action
   */
  export type chemical_groupsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chemical_groups
     */
    select?: chemical_groupsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the chemical_groups
     */
    omit?: chemical_groupsOmit<ExtArgs> | null
  }


  /**
   * Model product_prices
   */

  export type AggregateProduct_prices = {
    _count: Product_pricesCountAggregateOutputType | null
    _avg: Product_pricesAvgAggregateOutputType | null
    _sum: Product_pricesSumAggregateOutputType | null
    _min: Product_pricesMinAggregateOutputType | null
    _max: Product_pricesMaxAggregateOutputType | null
  }

  export type Product_pricesAvgAggregateOutputType = {
    product_id: number | null
    bottle_size_id: number | null
    price: Decimal | null
  }

  export type Product_pricesSumAggregateOutputType = {
    product_id: number | null
    bottle_size_id: number | null
    price: Decimal | null
  }

  export type Product_pricesMinAggregateOutputType = {
    product_id: number | null
    bottle_size_id: number | null
    price: Decimal | null
  }

  export type Product_pricesMaxAggregateOutputType = {
    product_id: number | null
    bottle_size_id: number | null
    price: Decimal | null
  }

  export type Product_pricesCountAggregateOutputType = {
    product_id: number
    bottle_size_id: number
    price: number
    _all: number
  }


  export type Product_pricesAvgAggregateInputType = {
    product_id?: true
    bottle_size_id?: true
    price?: true
  }

  export type Product_pricesSumAggregateInputType = {
    product_id?: true
    bottle_size_id?: true
    price?: true
  }

  export type Product_pricesMinAggregateInputType = {
    product_id?: true
    bottle_size_id?: true
    price?: true
  }

  export type Product_pricesMaxAggregateInputType = {
    product_id?: true
    bottle_size_id?: true
    price?: true
  }

  export type Product_pricesCountAggregateInputType = {
    product_id?: true
    bottle_size_id?: true
    price?: true
    _all?: true
  }

  export type Product_pricesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which product_prices to aggregate.
     */
    where?: product_pricesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_prices to fetch.
     */
    orderBy?: product_pricesOrderByWithRelationInput | product_pricesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: product_pricesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_prices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_prices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned product_prices
    **/
    _count?: true | Product_pricesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Product_pricesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Product_pricesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Product_pricesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Product_pricesMaxAggregateInputType
  }

  export type GetProduct_pricesAggregateType<T extends Product_pricesAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct_prices]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct_prices[P]>
      : GetScalarType<T[P], AggregateProduct_prices[P]>
  }




  export type product_pricesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: product_pricesWhereInput
    orderBy?: product_pricesOrderByWithAggregationInput | product_pricesOrderByWithAggregationInput[]
    by: Product_pricesScalarFieldEnum[] | Product_pricesScalarFieldEnum
    having?: product_pricesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Product_pricesCountAggregateInputType | true
    _avg?: Product_pricesAvgAggregateInputType
    _sum?: Product_pricesSumAggregateInputType
    _min?: Product_pricesMinAggregateInputType
    _max?: Product_pricesMaxAggregateInputType
  }

  export type Product_pricesGroupByOutputType = {
    product_id: number
    bottle_size_id: number
    price: Decimal
    _count: Product_pricesCountAggregateOutputType | null
    _avg: Product_pricesAvgAggregateOutputType | null
    _sum: Product_pricesSumAggregateOutputType | null
    _min: Product_pricesMinAggregateOutputType | null
    _max: Product_pricesMaxAggregateOutputType | null
  }

  type GetProduct_pricesGroupByPayload<T extends product_pricesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Product_pricesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Product_pricesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Product_pricesGroupByOutputType[P]>
            : GetScalarType<T[P], Product_pricesGroupByOutputType[P]>
        }
      >
    >


  export type product_pricesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    product_id?: boolean
    bottle_size_id?: boolean
    price?: boolean
    bottle_sizes?: boolean | bottle_sizesDefaultArgs<ExtArgs>
    products?: boolean | productsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product_prices"]>

  export type product_pricesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    product_id?: boolean
    bottle_size_id?: boolean
    price?: boolean
    bottle_sizes?: boolean | bottle_sizesDefaultArgs<ExtArgs>
    products?: boolean | productsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product_prices"]>

  export type product_pricesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    product_id?: boolean
    bottle_size_id?: boolean
    price?: boolean
    bottle_sizes?: boolean | bottle_sizesDefaultArgs<ExtArgs>
    products?: boolean | productsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product_prices"]>

  export type product_pricesSelectScalar = {
    product_id?: boolean
    bottle_size_id?: boolean
    price?: boolean
  }

  export type product_pricesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"product_id" | "bottle_size_id" | "price", ExtArgs["result"]["product_prices"]>
  export type product_pricesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bottle_sizes?: boolean | bottle_sizesDefaultArgs<ExtArgs>
    products?: boolean | productsDefaultArgs<ExtArgs>
  }
  export type product_pricesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bottle_sizes?: boolean | bottle_sizesDefaultArgs<ExtArgs>
    products?: boolean | productsDefaultArgs<ExtArgs>
  }
  export type product_pricesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bottle_sizes?: boolean | bottle_sizesDefaultArgs<ExtArgs>
    products?: boolean | productsDefaultArgs<ExtArgs>
  }

  export type $product_pricesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "product_prices"
    objects: {
      bottle_sizes: Prisma.$bottle_sizesPayload<ExtArgs>
      products: Prisma.$productsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      product_id: number
      bottle_size_id: number
      price: Prisma.Decimal
    }, ExtArgs["result"]["product_prices"]>
    composites: {}
  }

  type product_pricesGetPayload<S extends boolean | null | undefined | product_pricesDefaultArgs> = $Result.GetResult<Prisma.$product_pricesPayload, S>

  type product_pricesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<product_pricesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Product_pricesCountAggregateInputType | true
    }

  export interface product_pricesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['product_prices'], meta: { name: 'product_prices' } }
    /**
     * Find zero or one Product_prices that matches the filter.
     * @param {product_pricesFindUniqueArgs} args - Arguments to find a Product_prices
     * @example
     * // Get one Product_prices
     * const product_prices = await prisma.product_prices.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends product_pricesFindUniqueArgs>(args: SelectSubset<T, product_pricesFindUniqueArgs<ExtArgs>>): Prisma__product_pricesClient<$Result.GetResult<Prisma.$product_pricesPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Product_prices that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {product_pricesFindUniqueOrThrowArgs} args - Arguments to find a Product_prices
     * @example
     * // Get one Product_prices
     * const product_prices = await prisma.product_prices.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends product_pricesFindUniqueOrThrowArgs>(args: SelectSubset<T, product_pricesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__product_pricesClient<$Result.GetResult<Prisma.$product_pricesPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Product_prices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_pricesFindFirstArgs} args - Arguments to find a Product_prices
     * @example
     * // Get one Product_prices
     * const product_prices = await prisma.product_prices.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends product_pricesFindFirstArgs>(args?: SelectSubset<T, product_pricesFindFirstArgs<ExtArgs>>): Prisma__product_pricesClient<$Result.GetResult<Prisma.$product_pricesPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Product_prices that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_pricesFindFirstOrThrowArgs} args - Arguments to find a Product_prices
     * @example
     * // Get one Product_prices
     * const product_prices = await prisma.product_prices.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends product_pricesFindFirstOrThrowArgs>(args?: SelectSubset<T, product_pricesFindFirstOrThrowArgs<ExtArgs>>): Prisma__product_pricesClient<$Result.GetResult<Prisma.$product_pricesPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Product_prices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_pricesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Product_prices
     * const product_prices = await prisma.product_prices.findMany()
     * 
     * // Get first 10 Product_prices
     * const product_prices = await prisma.product_prices.findMany({ take: 10 })
     * 
     * // Only select the `product_id`
     * const product_pricesWithProduct_idOnly = await prisma.product_prices.findMany({ select: { product_id: true } })
     * 
     */
    findMany<T extends product_pricesFindManyArgs>(args?: SelectSubset<T, product_pricesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$product_pricesPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Product_prices.
     * @param {product_pricesCreateArgs} args - Arguments to create a Product_prices.
     * @example
     * // Create one Product_prices
     * const Product_prices = await prisma.product_prices.create({
     *   data: {
     *     // ... data to create a Product_prices
     *   }
     * })
     * 
     */
    create<T extends product_pricesCreateArgs>(args: SelectSubset<T, product_pricesCreateArgs<ExtArgs>>): Prisma__product_pricesClient<$Result.GetResult<Prisma.$product_pricesPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Product_prices.
     * @param {product_pricesCreateManyArgs} args - Arguments to create many Product_prices.
     * @example
     * // Create many Product_prices
     * const product_prices = await prisma.product_prices.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends product_pricesCreateManyArgs>(args?: SelectSubset<T, product_pricesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Product_prices and returns the data saved in the database.
     * @param {product_pricesCreateManyAndReturnArgs} args - Arguments to create many Product_prices.
     * @example
     * // Create many Product_prices
     * const product_prices = await prisma.product_prices.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Product_prices and only return the `product_id`
     * const product_pricesWithProduct_idOnly = await prisma.product_prices.createManyAndReturn({
     *   select: { product_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends product_pricesCreateManyAndReturnArgs>(args?: SelectSubset<T, product_pricesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$product_pricesPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Product_prices.
     * @param {product_pricesDeleteArgs} args - Arguments to delete one Product_prices.
     * @example
     * // Delete one Product_prices
     * const Product_prices = await prisma.product_prices.delete({
     *   where: {
     *     // ... filter to delete one Product_prices
     *   }
     * })
     * 
     */
    delete<T extends product_pricesDeleteArgs>(args: SelectSubset<T, product_pricesDeleteArgs<ExtArgs>>): Prisma__product_pricesClient<$Result.GetResult<Prisma.$product_pricesPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Product_prices.
     * @param {product_pricesUpdateArgs} args - Arguments to update one Product_prices.
     * @example
     * // Update one Product_prices
     * const product_prices = await prisma.product_prices.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends product_pricesUpdateArgs>(args: SelectSubset<T, product_pricesUpdateArgs<ExtArgs>>): Prisma__product_pricesClient<$Result.GetResult<Prisma.$product_pricesPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Product_prices.
     * @param {product_pricesDeleteManyArgs} args - Arguments to filter Product_prices to delete.
     * @example
     * // Delete a few Product_prices
     * const { count } = await prisma.product_prices.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends product_pricesDeleteManyArgs>(args?: SelectSubset<T, product_pricesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Product_prices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_pricesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Product_prices
     * const product_prices = await prisma.product_prices.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends product_pricesUpdateManyArgs>(args: SelectSubset<T, product_pricesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Product_prices and returns the data updated in the database.
     * @param {product_pricesUpdateManyAndReturnArgs} args - Arguments to update many Product_prices.
     * @example
     * // Update many Product_prices
     * const product_prices = await prisma.product_prices.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Product_prices and only return the `product_id`
     * const product_pricesWithProduct_idOnly = await prisma.product_prices.updateManyAndReturn({
     *   select: { product_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends product_pricesUpdateManyAndReturnArgs>(args: SelectSubset<T, product_pricesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$product_pricesPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Product_prices.
     * @param {product_pricesUpsertArgs} args - Arguments to update or create a Product_prices.
     * @example
     * // Update or create a Product_prices
     * const product_prices = await prisma.product_prices.upsert({
     *   create: {
     *     // ... data to create a Product_prices
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product_prices we want to update
     *   }
     * })
     */
    upsert<T extends product_pricesUpsertArgs>(args: SelectSubset<T, product_pricesUpsertArgs<ExtArgs>>): Prisma__product_pricesClient<$Result.GetResult<Prisma.$product_pricesPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Product_prices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_pricesCountArgs} args - Arguments to filter Product_prices to count.
     * @example
     * // Count the number of Product_prices
     * const count = await prisma.product_prices.count({
     *   where: {
     *     // ... the filter for the Product_prices we want to count
     *   }
     * })
    **/
    count<T extends product_pricesCountArgs>(
      args?: Subset<T, product_pricesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Product_pricesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product_prices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_pricesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Product_pricesAggregateArgs>(args: Subset<T, Product_pricesAggregateArgs>): Prisma.PrismaPromise<GetProduct_pricesAggregateType<T>>

    /**
     * Group by Product_prices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_pricesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends product_pricesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: product_pricesGroupByArgs['orderBy'] }
        : { orderBy?: product_pricesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, product_pricesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProduct_pricesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the product_prices model
   */
  readonly fields: product_pricesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for product_prices.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__product_pricesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bottle_sizes<T extends bottle_sizesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, bottle_sizesDefaultArgs<ExtArgs>>): Prisma__bottle_sizesClient<$Result.GetResult<Prisma.$bottle_sizesPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    products<T extends productsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, productsDefaultArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the product_prices model
   */ 
  interface product_pricesFieldRefs {
    readonly product_id: FieldRef<"product_prices", 'Int'>
    readonly bottle_size_id: FieldRef<"product_prices", 'Int'>
    readonly price: FieldRef<"product_prices", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * product_prices findUnique
   */
  export type product_pricesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_prices
     */
    select?: product_pricesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product_prices
     */
    omit?: product_pricesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_pricesInclude<ExtArgs> | null
    /**
     * Filter, which product_prices to fetch.
     */
    where: product_pricesWhereUniqueInput
  }

  /**
   * product_prices findUniqueOrThrow
   */
  export type product_pricesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_prices
     */
    select?: product_pricesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product_prices
     */
    omit?: product_pricesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_pricesInclude<ExtArgs> | null
    /**
     * Filter, which product_prices to fetch.
     */
    where: product_pricesWhereUniqueInput
  }

  /**
   * product_prices findFirst
   */
  export type product_pricesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_prices
     */
    select?: product_pricesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product_prices
     */
    omit?: product_pricesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_pricesInclude<ExtArgs> | null
    /**
     * Filter, which product_prices to fetch.
     */
    where?: product_pricesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_prices to fetch.
     */
    orderBy?: product_pricesOrderByWithRelationInput | product_pricesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for product_prices.
     */
    cursor?: product_pricesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_prices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_prices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of product_prices.
     */
    distinct?: Product_pricesScalarFieldEnum | Product_pricesScalarFieldEnum[]
  }

  /**
   * product_prices findFirstOrThrow
   */
  export type product_pricesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_prices
     */
    select?: product_pricesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product_prices
     */
    omit?: product_pricesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_pricesInclude<ExtArgs> | null
    /**
     * Filter, which product_prices to fetch.
     */
    where?: product_pricesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_prices to fetch.
     */
    orderBy?: product_pricesOrderByWithRelationInput | product_pricesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for product_prices.
     */
    cursor?: product_pricesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_prices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_prices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of product_prices.
     */
    distinct?: Product_pricesScalarFieldEnum | Product_pricesScalarFieldEnum[]
  }

  /**
   * product_prices findMany
   */
  export type product_pricesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_prices
     */
    select?: product_pricesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product_prices
     */
    omit?: product_pricesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_pricesInclude<ExtArgs> | null
    /**
     * Filter, which product_prices to fetch.
     */
    where?: product_pricesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_prices to fetch.
     */
    orderBy?: product_pricesOrderByWithRelationInput | product_pricesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing product_prices.
     */
    cursor?: product_pricesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_prices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_prices.
     */
    skip?: number
    distinct?: Product_pricesScalarFieldEnum | Product_pricesScalarFieldEnum[]
  }

  /**
   * product_prices create
   */
  export type product_pricesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_prices
     */
    select?: product_pricesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product_prices
     */
    omit?: product_pricesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_pricesInclude<ExtArgs> | null
    /**
     * The data needed to create a product_prices.
     */
    data: XOR<product_pricesCreateInput, product_pricesUncheckedCreateInput>
  }

  /**
   * product_prices createMany
   */
  export type product_pricesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many product_prices.
     */
    data: product_pricesCreateManyInput | product_pricesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * product_prices createManyAndReturn
   */
  export type product_pricesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_prices
     */
    select?: product_pricesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the product_prices
     */
    omit?: product_pricesOmit<ExtArgs> | null
    /**
     * The data used to create many product_prices.
     */
    data: product_pricesCreateManyInput | product_pricesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_pricesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * product_prices update
   */
  export type product_pricesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_prices
     */
    select?: product_pricesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product_prices
     */
    omit?: product_pricesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_pricesInclude<ExtArgs> | null
    /**
     * The data needed to update a product_prices.
     */
    data: XOR<product_pricesUpdateInput, product_pricesUncheckedUpdateInput>
    /**
     * Choose, which product_prices to update.
     */
    where: product_pricesWhereUniqueInput
  }

  /**
   * product_prices updateMany
   */
  export type product_pricesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update product_prices.
     */
    data: XOR<product_pricesUpdateManyMutationInput, product_pricesUncheckedUpdateManyInput>
    /**
     * Filter which product_prices to update
     */
    where?: product_pricesWhereInput
  }

  /**
   * product_prices updateManyAndReturn
   */
  export type product_pricesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_prices
     */
    select?: product_pricesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the product_prices
     */
    omit?: product_pricesOmit<ExtArgs> | null
    /**
     * The data used to update product_prices.
     */
    data: XOR<product_pricesUpdateManyMutationInput, product_pricesUncheckedUpdateManyInput>
    /**
     * Filter which product_prices to update
     */
    where?: product_pricesWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_pricesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * product_prices upsert
   */
  export type product_pricesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_prices
     */
    select?: product_pricesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product_prices
     */
    omit?: product_pricesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_pricesInclude<ExtArgs> | null
    /**
     * The filter to search for the product_prices to update in case it exists.
     */
    where: product_pricesWhereUniqueInput
    /**
     * In case the product_prices found by the `where` argument doesn't exist, create a new product_prices with this data.
     */
    create: XOR<product_pricesCreateInput, product_pricesUncheckedCreateInput>
    /**
     * In case the product_prices was found with the provided `where` argument, update it with this data.
     */
    update: XOR<product_pricesUpdateInput, product_pricesUncheckedUpdateInput>
  }

  /**
   * product_prices delete
   */
  export type product_pricesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_prices
     */
    select?: product_pricesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product_prices
     */
    omit?: product_pricesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_pricesInclude<ExtArgs> | null
    /**
     * Filter which product_prices to delete.
     */
    where: product_pricesWhereUniqueInput
  }

  /**
   * product_prices deleteMany
   */
  export type product_pricesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which product_prices to delete
     */
    where?: product_pricesWhereInput
  }

  /**
   * product_prices without action
   */
  export type product_pricesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_prices
     */
    select?: product_pricesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product_prices
     */
    omit?: product_pricesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_pricesInclude<ExtArgs> | null
  }


  /**
   * Model products
   */

  export type AggregateProducts = {
    _count: ProductsCountAggregateOutputType | null
    _avg: ProductsAvgAggregateOutputType | null
    _sum: ProductsSumAggregateOutputType | null
    _min: ProductsMinAggregateOutputType | null
    _max: ProductsMaxAggregateOutputType | null
  }

  export type ProductsAvgAggregateOutputType = {
    product_id: number | null
    raw_material_id: number | null
  }

  export type ProductsSumAggregateOutputType = {
    product_id: number | null
    raw_material_id: number | null
  }

  export type ProductsMinAggregateOutputType = {
    product_id: number | null
    name: string | null
    sku: string | null
    raw_material_id: number | null
    grade: string | null
  }

  export type ProductsMaxAggregateOutputType = {
    product_id: number | null
    name: string | null
    sku: string | null
    raw_material_id: number | null
    grade: string | null
  }

  export type ProductsCountAggregateOutputType = {
    product_id: number
    name: number
    sku: number
    raw_material_id: number
    grade: number
    _all: number
  }


  export type ProductsAvgAggregateInputType = {
    product_id?: true
    raw_material_id?: true
  }

  export type ProductsSumAggregateInputType = {
    product_id?: true
    raw_material_id?: true
  }

  export type ProductsMinAggregateInputType = {
    product_id?: true
    name?: true
    sku?: true
    raw_material_id?: true
    grade?: true
  }

  export type ProductsMaxAggregateInputType = {
    product_id?: true
    name?: true
    sku?: true
    raw_material_id?: true
    grade?: true
  }

  export type ProductsCountAggregateInputType = {
    product_id?: true
    name?: true
    sku?: true
    raw_material_id?: true
    grade?: true
    _all?: true
  }

  export type ProductsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which products to aggregate.
     */
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned products
    **/
    _count?: true | ProductsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductsMaxAggregateInputType
  }

  export type GetProductsAggregateType<T extends ProductsAggregateArgs> = {
        [P in keyof T & keyof AggregateProducts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProducts[P]>
      : GetScalarType<T[P], AggregateProducts[P]>
  }




  export type productsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productsWhereInput
    orderBy?: productsOrderByWithAggregationInput | productsOrderByWithAggregationInput[]
    by: ProductsScalarFieldEnum[] | ProductsScalarFieldEnum
    having?: productsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductsCountAggregateInputType | true
    _avg?: ProductsAvgAggregateInputType
    _sum?: ProductsSumAggregateInputType
    _min?: ProductsMinAggregateInputType
    _max?: ProductsMaxAggregateInputType
  }

  export type ProductsGroupByOutputType = {
    product_id: number
    name: string
    sku: string
    raw_material_id: number | null
    grade: string
    _count: ProductsCountAggregateOutputType | null
    _avg: ProductsAvgAggregateOutputType | null
    _sum: ProductsSumAggregateOutputType | null
    _min: ProductsMinAggregateOutputType | null
    _max: ProductsMaxAggregateOutputType | null
  }

  type GetProductsGroupByPayload<T extends productsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductsGroupByOutputType[P]>
            : GetScalarType<T[P], ProductsGroupByOutputType[P]>
        }
      >
    >


  export type productsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    product_id?: boolean
    name?: boolean
    sku?: boolean
    raw_material_id?: boolean
    grade?: boolean
    product_prices?: boolean | products$product_pricesArgs<ExtArgs>
    raw_materials?: boolean | products$raw_materialsArgs<ExtArgs>
    _count?: boolean | ProductsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["products"]>

  export type productsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    product_id?: boolean
    name?: boolean
    sku?: boolean
    raw_material_id?: boolean
    grade?: boolean
    raw_materials?: boolean | products$raw_materialsArgs<ExtArgs>
  }, ExtArgs["result"]["products"]>

  export type productsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    product_id?: boolean
    name?: boolean
    sku?: boolean
    raw_material_id?: boolean
    grade?: boolean
    raw_materials?: boolean | products$raw_materialsArgs<ExtArgs>
  }, ExtArgs["result"]["products"]>

  export type productsSelectScalar = {
    product_id?: boolean
    name?: boolean
    sku?: boolean
    raw_material_id?: boolean
    grade?: boolean
  }

  export type productsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"product_id" | "name" | "sku" | "raw_material_id" | "grade", ExtArgs["result"]["products"]>
  export type productsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product_prices?: boolean | products$product_pricesArgs<ExtArgs>
    raw_materials?: boolean | products$raw_materialsArgs<ExtArgs>
    _count?: boolean | ProductsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type productsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    raw_materials?: boolean | products$raw_materialsArgs<ExtArgs>
  }
  export type productsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    raw_materials?: boolean | products$raw_materialsArgs<ExtArgs>
  }

  export type $productsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "products"
    objects: {
      product_prices: Prisma.$product_pricesPayload<ExtArgs>[]
      raw_materials: Prisma.$raw_materialsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      product_id: number
      name: string
      sku: string
      raw_material_id: number | null
      grade: string
    }, ExtArgs["result"]["products"]>
    composites: {}
  }

  type productsGetPayload<S extends boolean | null | undefined | productsDefaultArgs> = $Result.GetResult<Prisma.$productsPayload, S>

  type productsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<productsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductsCountAggregateInputType | true
    }

  export interface productsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['products'], meta: { name: 'products' } }
    /**
     * Find zero or one Products that matches the filter.
     * @param {productsFindUniqueArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends productsFindUniqueArgs>(args: SelectSubset<T, productsFindUniqueArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Products that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {productsFindUniqueOrThrowArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends productsFindUniqueOrThrowArgs>(args: SelectSubset<T, productsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsFindFirstArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends productsFindFirstArgs>(args?: SelectSubset<T, productsFindFirstArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Products that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsFindFirstOrThrowArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends productsFindFirstOrThrowArgs>(args?: SelectSubset<T, productsFindFirstOrThrowArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.products.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.products.findMany({ take: 10 })
     * 
     * // Only select the `product_id`
     * const productsWithProduct_idOnly = await prisma.products.findMany({ select: { product_id: true } })
     * 
     */
    findMany<T extends productsFindManyArgs>(args?: SelectSubset<T, productsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Products.
     * @param {productsCreateArgs} args - Arguments to create a Products.
     * @example
     * // Create one Products
     * const Products = await prisma.products.create({
     *   data: {
     *     // ... data to create a Products
     *   }
     * })
     * 
     */
    create<T extends productsCreateArgs>(args: SelectSubset<T, productsCreateArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Products.
     * @param {productsCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const products = await prisma.products.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends productsCreateManyArgs>(args?: SelectSubset<T, productsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Products and returns the data saved in the database.
     * @param {productsCreateManyAndReturnArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const products = await prisma.products.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Products and only return the `product_id`
     * const productsWithProduct_idOnly = await prisma.products.createManyAndReturn({
     *   select: { product_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends productsCreateManyAndReturnArgs>(args?: SelectSubset<T, productsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Products.
     * @param {productsDeleteArgs} args - Arguments to delete one Products.
     * @example
     * // Delete one Products
     * const Products = await prisma.products.delete({
     *   where: {
     *     // ... filter to delete one Products
     *   }
     * })
     * 
     */
    delete<T extends productsDeleteArgs>(args: SelectSubset<T, productsDeleteArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Products.
     * @param {productsUpdateArgs} args - Arguments to update one Products.
     * @example
     * // Update one Products
     * const products = await prisma.products.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends productsUpdateArgs>(args: SelectSubset<T, productsUpdateArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Products.
     * @param {productsDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.products.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends productsDeleteManyArgs>(args?: SelectSubset<T, productsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const products = await prisma.products.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends productsUpdateManyArgs>(args: SelectSubset<T, productsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products and returns the data updated in the database.
     * @param {productsUpdateManyAndReturnArgs} args - Arguments to update many Products.
     * @example
     * // Update many Products
     * const products = await prisma.products.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Products and only return the `product_id`
     * const productsWithProduct_idOnly = await prisma.products.updateManyAndReturn({
     *   select: { product_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends productsUpdateManyAndReturnArgs>(args: SelectSubset<T, productsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Products.
     * @param {productsUpsertArgs} args - Arguments to update or create a Products.
     * @example
     * // Update or create a Products
     * const products = await prisma.products.upsert({
     *   create: {
     *     // ... data to create a Products
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Products we want to update
     *   }
     * })
     */
    upsert<T extends productsUpsertArgs>(args: SelectSubset<T, productsUpsertArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.products.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends productsCountArgs>(
      args?: Subset<T, productsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductsAggregateArgs>(args: Subset<T, ProductsAggregateArgs>): Prisma.PrismaPromise<GetProductsAggregateType<T>>

    /**
     * Group by Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends productsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: productsGroupByArgs['orderBy'] }
        : { orderBy?: productsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, productsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the products model
   */
  readonly fields: productsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for products.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__productsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product_prices<T extends products$product_pricesArgs<ExtArgs> = {}>(args?: Subset<T, products$product_pricesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$product_pricesPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    raw_materials<T extends products$raw_materialsArgs<ExtArgs> = {}>(args?: Subset<T, products$raw_materialsArgs<ExtArgs>>): Prisma__raw_materialsClient<$Result.GetResult<Prisma.$raw_materialsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the products model
   */ 
  interface productsFieldRefs {
    readonly product_id: FieldRef<"products", 'Int'>
    readonly name: FieldRef<"products", 'String'>
    readonly sku: FieldRef<"products", 'String'>
    readonly raw_material_id: FieldRef<"products", 'Int'>
    readonly grade: FieldRef<"products", 'String'>
  }
    

  // Custom InputTypes
  /**
   * products findUnique
   */
  export type productsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the products
     */
    omit?: productsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where: productsWhereUniqueInput
  }

  /**
   * products findUniqueOrThrow
   */
  export type productsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the products
     */
    omit?: productsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where: productsWhereUniqueInput
  }

  /**
   * products findFirst
   */
  export type productsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the products
     */
    omit?: productsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
     */
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
     */
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }

  /**
   * products findFirstOrThrow
   */
  export type productsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the products
     */
    omit?: productsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
     */
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
     */
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }

  /**
   * products findMany
   */
  export type productsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the products
     */
    omit?: productsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing products.
     */
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }

  /**
   * products create
   */
  export type productsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the products
     */
    omit?: productsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * The data needed to create a products.
     */
    data: XOR<productsCreateInput, productsUncheckedCreateInput>
  }

  /**
   * products createMany
   */
  export type productsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many products.
     */
    data: productsCreateManyInput | productsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * products createManyAndReturn
   */
  export type productsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the products
     */
    omit?: productsOmit<ExtArgs> | null
    /**
     * The data used to create many products.
     */
    data: productsCreateManyInput | productsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * products update
   */
  export type productsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the products
     */
    omit?: productsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * The data needed to update a products.
     */
    data: XOR<productsUpdateInput, productsUncheckedUpdateInput>
    /**
     * Choose, which products to update.
     */
    where: productsWhereUniqueInput
  }

  /**
   * products updateMany
   */
  export type productsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update products.
     */
    data: XOR<productsUpdateManyMutationInput, productsUncheckedUpdateManyInput>
    /**
     * Filter which products to update
     */
    where?: productsWhereInput
  }

  /**
   * products updateManyAndReturn
   */
  export type productsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the products
     */
    omit?: productsOmit<ExtArgs> | null
    /**
     * The data used to update products.
     */
    data: XOR<productsUpdateManyMutationInput, productsUncheckedUpdateManyInput>
    /**
     * Filter which products to update
     */
    where?: productsWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * products upsert
   */
  export type productsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the products
     */
    omit?: productsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * The filter to search for the products to update in case it exists.
     */
    where: productsWhereUniqueInput
    /**
     * In case the products found by the `where` argument doesn't exist, create a new products with this data.
     */
    create: XOR<productsCreateInput, productsUncheckedCreateInput>
    /**
     * In case the products was found with the provided `where` argument, update it with this data.
     */
    update: XOR<productsUpdateInput, productsUncheckedUpdateInput>
  }

  /**
   * products delete
   */
  export type productsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the products
     */
    omit?: productsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter which products to delete.
     */
    where: productsWhereUniqueInput
  }

  /**
   * products deleteMany
   */
  export type productsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which products to delete
     */
    where?: productsWhereInput
  }

  /**
   * products.product_prices
   */
  export type products$product_pricesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_prices
     */
    select?: product_pricesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product_prices
     */
    omit?: product_pricesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_pricesInclude<ExtArgs> | null
    where?: product_pricesWhereInput
    orderBy?: product_pricesOrderByWithRelationInput | product_pricesOrderByWithRelationInput[]
    cursor?: product_pricesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Product_pricesScalarFieldEnum | Product_pricesScalarFieldEnum[]
  }

  /**
   * products.raw_materials
   */
  export type products$raw_materialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the raw_materials
     */
    select?: raw_materialsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the raw_materials
     */
    omit?: raw_materialsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: raw_materialsInclude<ExtArgs> | null
    where?: raw_materialsWhereInput
  }

  /**
   * products without action
   */
  export type productsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the products
     */
    omit?: productsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
  }


  /**
   * Model raw_materials
   */

  export type AggregateRaw_materials = {
    _count: Raw_materialsCountAggregateOutputType | null
    _avg: Raw_materialsAvgAggregateOutputType | null
    _sum: Raw_materialsSumAggregateOutputType | null
    _min: Raw_materialsMinAggregateOutputType | null
    _max: Raw_materialsMaxAggregateOutputType | null
  }

  export type Raw_materialsAvgAggregateOutputType = {
    raw_material_id: number | null
    flash_point: number | null
  }

  export type Raw_materialsSumAggregateOutputType = {
    raw_material_id: number | null
    flash_point: number | null
  }

  export type Raw_materialsMinAggregateOutputType = {
    raw_material_id: number | null
    name: string | null
    cas_number: string | null
    chemical_group: string | null
    description: string | null
    un_code: string | null
    flash_point: number | null
  }

  export type Raw_materialsMaxAggregateOutputType = {
    raw_material_id: number | null
    name: string | null
    cas_number: string | null
    chemical_group: string | null
    description: string | null
    un_code: string | null
    flash_point: number | null
  }

  export type Raw_materialsCountAggregateOutputType = {
    raw_material_id: number
    name: number
    cas_number: number
    chemical_group: number
    description: number
    un_code: number
    flash_point: number
    _all: number
  }


  export type Raw_materialsAvgAggregateInputType = {
    raw_material_id?: true
    flash_point?: true
  }

  export type Raw_materialsSumAggregateInputType = {
    raw_material_id?: true
    flash_point?: true
  }

  export type Raw_materialsMinAggregateInputType = {
    raw_material_id?: true
    name?: true
    cas_number?: true
    chemical_group?: true
    description?: true
    un_code?: true
    flash_point?: true
  }

  export type Raw_materialsMaxAggregateInputType = {
    raw_material_id?: true
    name?: true
    cas_number?: true
    chemical_group?: true
    description?: true
    un_code?: true
    flash_point?: true
  }

  export type Raw_materialsCountAggregateInputType = {
    raw_material_id?: true
    name?: true
    cas_number?: true
    chemical_group?: true
    description?: true
    un_code?: true
    flash_point?: true
    _all?: true
  }

  export type Raw_materialsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which raw_materials to aggregate.
     */
    where?: raw_materialsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of raw_materials to fetch.
     */
    orderBy?: raw_materialsOrderByWithRelationInput | raw_materialsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: raw_materialsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` raw_materials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` raw_materials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned raw_materials
    **/
    _count?: true | Raw_materialsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Raw_materialsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Raw_materialsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Raw_materialsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Raw_materialsMaxAggregateInputType
  }

  export type GetRaw_materialsAggregateType<T extends Raw_materialsAggregateArgs> = {
        [P in keyof T & keyof AggregateRaw_materials]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRaw_materials[P]>
      : GetScalarType<T[P], AggregateRaw_materials[P]>
  }




  export type raw_materialsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: raw_materialsWhereInput
    orderBy?: raw_materialsOrderByWithAggregationInput | raw_materialsOrderByWithAggregationInput[]
    by: Raw_materialsScalarFieldEnum[] | Raw_materialsScalarFieldEnum
    having?: raw_materialsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Raw_materialsCountAggregateInputType | true
    _avg?: Raw_materialsAvgAggregateInputType
    _sum?: Raw_materialsSumAggregateInputType
    _min?: Raw_materialsMinAggregateInputType
    _max?: Raw_materialsMaxAggregateInputType
  }

  export type Raw_materialsGroupByOutputType = {
    raw_material_id: number
    name: string
    cas_number: string
    chemical_group: string | null
    description: string | null
    un_code: string | null
    flash_point: number | null
    _count: Raw_materialsCountAggregateOutputType | null
    _avg: Raw_materialsAvgAggregateOutputType | null
    _sum: Raw_materialsSumAggregateOutputType | null
    _min: Raw_materialsMinAggregateOutputType | null
    _max: Raw_materialsMaxAggregateOutputType | null
  }

  type GetRaw_materialsGroupByPayload<T extends raw_materialsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Raw_materialsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Raw_materialsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Raw_materialsGroupByOutputType[P]>
            : GetScalarType<T[P], Raw_materialsGroupByOutputType[P]>
        }
      >
    >


  export type raw_materialsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    raw_material_id?: boolean
    name?: boolean
    cas_number?: boolean
    chemical_group?: boolean
    description?: boolean
    un_code?: boolean
    flash_point?: boolean
    products?: boolean | raw_materials$productsArgs<ExtArgs>
    _count?: boolean | Raw_materialsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["raw_materials"]>

  export type raw_materialsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    raw_material_id?: boolean
    name?: boolean
    cas_number?: boolean
    chemical_group?: boolean
    description?: boolean
    un_code?: boolean
    flash_point?: boolean
  }, ExtArgs["result"]["raw_materials"]>

  export type raw_materialsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    raw_material_id?: boolean
    name?: boolean
    cas_number?: boolean
    chemical_group?: boolean
    description?: boolean
    un_code?: boolean
    flash_point?: boolean
  }, ExtArgs["result"]["raw_materials"]>

  export type raw_materialsSelectScalar = {
    raw_material_id?: boolean
    name?: boolean
    cas_number?: boolean
    chemical_group?: boolean
    description?: boolean
    un_code?: boolean
    flash_point?: boolean
  }

  export type raw_materialsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"raw_material_id" | "name" | "cas_number" | "chemical_group" | "description" | "un_code" | "flash_point", ExtArgs["result"]["raw_materials"]>
  export type raw_materialsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | raw_materials$productsArgs<ExtArgs>
    _count?: boolean | Raw_materialsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type raw_materialsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type raw_materialsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $raw_materialsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "raw_materials"
    objects: {
      products: Prisma.$productsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      raw_material_id: number
      name: string
      cas_number: string
      chemical_group: string | null
      description: string | null
      un_code: string | null
      flash_point: number | null
    }, ExtArgs["result"]["raw_materials"]>
    composites: {}
  }

  type raw_materialsGetPayload<S extends boolean | null | undefined | raw_materialsDefaultArgs> = $Result.GetResult<Prisma.$raw_materialsPayload, S>

  type raw_materialsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<raw_materialsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Raw_materialsCountAggregateInputType | true
    }

  export interface raw_materialsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['raw_materials'], meta: { name: 'raw_materials' } }
    /**
     * Find zero or one Raw_materials that matches the filter.
     * @param {raw_materialsFindUniqueArgs} args - Arguments to find a Raw_materials
     * @example
     * // Get one Raw_materials
     * const raw_materials = await prisma.raw_materials.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends raw_materialsFindUniqueArgs>(args: SelectSubset<T, raw_materialsFindUniqueArgs<ExtArgs>>): Prisma__raw_materialsClient<$Result.GetResult<Prisma.$raw_materialsPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Raw_materials that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {raw_materialsFindUniqueOrThrowArgs} args - Arguments to find a Raw_materials
     * @example
     * // Get one Raw_materials
     * const raw_materials = await prisma.raw_materials.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends raw_materialsFindUniqueOrThrowArgs>(args: SelectSubset<T, raw_materialsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__raw_materialsClient<$Result.GetResult<Prisma.$raw_materialsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Raw_materials that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {raw_materialsFindFirstArgs} args - Arguments to find a Raw_materials
     * @example
     * // Get one Raw_materials
     * const raw_materials = await prisma.raw_materials.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends raw_materialsFindFirstArgs>(args?: SelectSubset<T, raw_materialsFindFirstArgs<ExtArgs>>): Prisma__raw_materialsClient<$Result.GetResult<Prisma.$raw_materialsPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Raw_materials that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {raw_materialsFindFirstOrThrowArgs} args - Arguments to find a Raw_materials
     * @example
     * // Get one Raw_materials
     * const raw_materials = await prisma.raw_materials.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends raw_materialsFindFirstOrThrowArgs>(args?: SelectSubset<T, raw_materialsFindFirstOrThrowArgs<ExtArgs>>): Prisma__raw_materialsClient<$Result.GetResult<Prisma.$raw_materialsPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Raw_materials that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {raw_materialsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Raw_materials
     * const raw_materials = await prisma.raw_materials.findMany()
     * 
     * // Get first 10 Raw_materials
     * const raw_materials = await prisma.raw_materials.findMany({ take: 10 })
     * 
     * // Only select the `raw_material_id`
     * const raw_materialsWithRaw_material_idOnly = await prisma.raw_materials.findMany({ select: { raw_material_id: true } })
     * 
     */
    findMany<T extends raw_materialsFindManyArgs>(args?: SelectSubset<T, raw_materialsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$raw_materialsPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Raw_materials.
     * @param {raw_materialsCreateArgs} args - Arguments to create a Raw_materials.
     * @example
     * // Create one Raw_materials
     * const Raw_materials = await prisma.raw_materials.create({
     *   data: {
     *     // ... data to create a Raw_materials
     *   }
     * })
     * 
     */
    create<T extends raw_materialsCreateArgs>(args: SelectSubset<T, raw_materialsCreateArgs<ExtArgs>>): Prisma__raw_materialsClient<$Result.GetResult<Prisma.$raw_materialsPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Raw_materials.
     * @param {raw_materialsCreateManyArgs} args - Arguments to create many Raw_materials.
     * @example
     * // Create many Raw_materials
     * const raw_materials = await prisma.raw_materials.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends raw_materialsCreateManyArgs>(args?: SelectSubset<T, raw_materialsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Raw_materials and returns the data saved in the database.
     * @param {raw_materialsCreateManyAndReturnArgs} args - Arguments to create many Raw_materials.
     * @example
     * // Create many Raw_materials
     * const raw_materials = await prisma.raw_materials.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Raw_materials and only return the `raw_material_id`
     * const raw_materialsWithRaw_material_idOnly = await prisma.raw_materials.createManyAndReturn({
     *   select: { raw_material_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends raw_materialsCreateManyAndReturnArgs>(args?: SelectSubset<T, raw_materialsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$raw_materialsPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Raw_materials.
     * @param {raw_materialsDeleteArgs} args - Arguments to delete one Raw_materials.
     * @example
     * // Delete one Raw_materials
     * const Raw_materials = await prisma.raw_materials.delete({
     *   where: {
     *     // ... filter to delete one Raw_materials
     *   }
     * })
     * 
     */
    delete<T extends raw_materialsDeleteArgs>(args: SelectSubset<T, raw_materialsDeleteArgs<ExtArgs>>): Prisma__raw_materialsClient<$Result.GetResult<Prisma.$raw_materialsPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Raw_materials.
     * @param {raw_materialsUpdateArgs} args - Arguments to update one Raw_materials.
     * @example
     * // Update one Raw_materials
     * const raw_materials = await prisma.raw_materials.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends raw_materialsUpdateArgs>(args: SelectSubset<T, raw_materialsUpdateArgs<ExtArgs>>): Prisma__raw_materialsClient<$Result.GetResult<Prisma.$raw_materialsPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Raw_materials.
     * @param {raw_materialsDeleteManyArgs} args - Arguments to filter Raw_materials to delete.
     * @example
     * // Delete a few Raw_materials
     * const { count } = await prisma.raw_materials.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends raw_materialsDeleteManyArgs>(args?: SelectSubset<T, raw_materialsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Raw_materials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {raw_materialsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Raw_materials
     * const raw_materials = await prisma.raw_materials.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends raw_materialsUpdateManyArgs>(args: SelectSubset<T, raw_materialsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Raw_materials and returns the data updated in the database.
     * @param {raw_materialsUpdateManyAndReturnArgs} args - Arguments to update many Raw_materials.
     * @example
     * // Update many Raw_materials
     * const raw_materials = await prisma.raw_materials.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Raw_materials and only return the `raw_material_id`
     * const raw_materialsWithRaw_material_idOnly = await prisma.raw_materials.updateManyAndReturn({
     *   select: { raw_material_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends raw_materialsUpdateManyAndReturnArgs>(args: SelectSubset<T, raw_materialsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$raw_materialsPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Raw_materials.
     * @param {raw_materialsUpsertArgs} args - Arguments to update or create a Raw_materials.
     * @example
     * // Update or create a Raw_materials
     * const raw_materials = await prisma.raw_materials.upsert({
     *   create: {
     *     // ... data to create a Raw_materials
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Raw_materials we want to update
     *   }
     * })
     */
    upsert<T extends raw_materialsUpsertArgs>(args: SelectSubset<T, raw_materialsUpsertArgs<ExtArgs>>): Prisma__raw_materialsClient<$Result.GetResult<Prisma.$raw_materialsPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Raw_materials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {raw_materialsCountArgs} args - Arguments to filter Raw_materials to count.
     * @example
     * // Count the number of Raw_materials
     * const count = await prisma.raw_materials.count({
     *   where: {
     *     // ... the filter for the Raw_materials we want to count
     *   }
     * })
    **/
    count<T extends raw_materialsCountArgs>(
      args?: Subset<T, raw_materialsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Raw_materialsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Raw_materials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Raw_materialsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Raw_materialsAggregateArgs>(args: Subset<T, Raw_materialsAggregateArgs>): Prisma.PrismaPromise<GetRaw_materialsAggregateType<T>>

    /**
     * Group by Raw_materials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {raw_materialsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends raw_materialsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: raw_materialsGroupByArgs['orderBy'] }
        : { orderBy?: raw_materialsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, raw_materialsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRaw_materialsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the raw_materials model
   */
  readonly fields: raw_materialsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for raw_materials.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__raw_materialsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    products<T extends raw_materials$productsArgs<ExtArgs> = {}>(args?: Subset<T, raw_materials$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the raw_materials model
   */ 
  interface raw_materialsFieldRefs {
    readonly raw_material_id: FieldRef<"raw_materials", 'Int'>
    readonly name: FieldRef<"raw_materials", 'String'>
    readonly cas_number: FieldRef<"raw_materials", 'String'>
    readonly chemical_group: FieldRef<"raw_materials", 'String'>
    readonly description: FieldRef<"raw_materials", 'String'>
    readonly un_code: FieldRef<"raw_materials", 'String'>
    readonly flash_point: FieldRef<"raw_materials", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * raw_materials findUnique
   */
  export type raw_materialsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the raw_materials
     */
    select?: raw_materialsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the raw_materials
     */
    omit?: raw_materialsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: raw_materialsInclude<ExtArgs> | null
    /**
     * Filter, which raw_materials to fetch.
     */
    where: raw_materialsWhereUniqueInput
  }

  /**
   * raw_materials findUniqueOrThrow
   */
  export type raw_materialsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the raw_materials
     */
    select?: raw_materialsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the raw_materials
     */
    omit?: raw_materialsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: raw_materialsInclude<ExtArgs> | null
    /**
     * Filter, which raw_materials to fetch.
     */
    where: raw_materialsWhereUniqueInput
  }

  /**
   * raw_materials findFirst
   */
  export type raw_materialsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the raw_materials
     */
    select?: raw_materialsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the raw_materials
     */
    omit?: raw_materialsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: raw_materialsInclude<ExtArgs> | null
    /**
     * Filter, which raw_materials to fetch.
     */
    where?: raw_materialsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of raw_materials to fetch.
     */
    orderBy?: raw_materialsOrderByWithRelationInput | raw_materialsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for raw_materials.
     */
    cursor?: raw_materialsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` raw_materials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` raw_materials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of raw_materials.
     */
    distinct?: Raw_materialsScalarFieldEnum | Raw_materialsScalarFieldEnum[]
  }

  /**
   * raw_materials findFirstOrThrow
   */
  export type raw_materialsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the raw_materials
     */
    select?: raw_materialsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the raw_materials
     */
    omit?: raw_materialsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: raw_materialsInclude<ExtArgs> | null
    /**
     * Filter, which raw_materials to fetch.
     */
    where?: raw_materialsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of raw_materials to fetch.
     */
    orderBy?: raw_materialsOrderByWithRelationInput | raw_materialsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for raw_materials.
     */
    cursor?: raw_materialsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` raw_materials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` raw_materials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of raw_materials.
     */
    distinct?: Raw_materialsScalarFieldEnum | Raw_materialsScalarFieldEnum[]
  }

  /**
   * raw_materials findMany
   */
  export type raw_materialsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the raw_materials
     */
    select?: raw_materialsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the raw_materials
     */
    omit?: raw_materialsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: raw_materialsInclude<ExtArgs> | null
    /**
     * Filter, which raw_materials to fetch.
     */
    where?: raw_materialsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of raw_materials to fetch.
     */
    orderBy?: raw_materialsOrderByWithRelationInput | raw_materialsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing raw_materials.
     */
    cursor?: raw_materialsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` raw_materials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` raw_materials.
     */
    skip?: number
    distinct?: Raw_materialsScalarFieldEnum | Raw_materialsScalarFieldEnum[]
  }

  /**
   * raw_materials create
   */
  export type raw_materialsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the raw_materials
     */
    select?: raw_materialsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the raw_materials
     */
    omit?: raw_materialsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: raw_materialsInclude<ExtArgs> | null
    /**
     * The data needed to create a raw_materials.
     */
    data: XOR<raw_materialsCreateInput, raw_materialsUncheckedCreateInput>
  }

  /**
   * raw_materials createMany
   */
  export type raw_materialsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many raw_materials.
     */
    data: raw_materialsCreateManyInput | raw_materialsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * raw_materials createManyAndReturn
   */
  export type raw_materialsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the raw_materials
     */
    select?: raw_materialsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the raw_materials
     */
    omit?: raw_materialsOmit<ExtArgs> | null
    /**
     * The data used to create many raw_materials.
     */
    data: raw_materialsCreateManyInput | raw_materialsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * raw_materials update
   */
  export type raw_materialsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the raw_materials
     */
    select?: raw_materialsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the raw_materials
     */
    omit?: raw_materialsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: raw_materialsInclude<ExtArgs> | null
    /**
     * The data needed to update a raw_materials.
     */
    data: XOR<raw_materialsUpdateInput, raw_materialsUncheckedUpdateInput>
    /**
     * Choose, which raw_materials to update.
     */
    where: raw_materialsWhereUniqueInput
  }

  /**
   * raw_materials updateMany
   */
  export type raw_materialsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update raw_materials.
     */
    data: XOR<raw_materialsUpdateManyMutationInput, raw_materialsUncheckedUpdateManyInput>
    /**
     * Filter which raw_materials to update
     */
    where?: raw_materialsWhereInput
  }

  /**
   * raw_materials updateManyAndReturn
   */
  export type raw_materialsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the raw_materials
     */
    select?: raw_materialsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the raw_materials
     */
    omit?: raw_materialsOmit<ExtArgs> | null
    /**
     * The data used to update raw_materials.
     */
    data: XOR<raw_materialsUpdateManyMutationInput, raw_materialsUncheckedUpdateManyInput>
    /**
     * Filter which raw_materials to update
     */
    where?: raw_materialsWhereInput
  }

  /**
   * raw_materials upsert
   */
  export type raw_materialsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the raw_materials
     */
    select?: raw_materialsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the raw_materials
     */
    omit?: raw_materialsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: raw_materialsInclude<ExtArgs> | null
    /**
     * The filter to search for the raw_materials to update in case it exists.
     */
    where: raw_materialsWhereUniqueInput
    /**
     * In case the raw_materials found by the `where` argument doesn't exist, create a new raw_materials with this data.
     */
    create: XOR<raw_materialsCreateInput, raw_materialsUncheckedCreateInput>
    /**
     * In case the raw_materials was found with the provided `where` argument, update it with this data.
     */
    update: XOR<raw_materialsUpdateInput, raw_materialsUncheckedUpdateInput>
  }

  /**
   * raw_materials delete
   */
  export type raw_materialsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the raw_materials
     */
    select?: raw_materialsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the raw_materials
     */
    omit?: raw_materialsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: raw_materialsInclude<ExtArgs> | null
    /**
     * Filter which raw_materials to delete.
     */
    where: raw_materialsWhereUniqueInput
  }

  /**
   * raw_materials deleteMany
   */
  export type raw_materialsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which raw_materials to delete
     */
    where?: raw_materialsWhereInput
  }

  /**
   * raw_materials.products
   */
  export type raw_materials$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the products
     */
    omit?: productsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    where?: productsWhereInput
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    cursor?: productsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }

  /**
   * raw_materials without action
   */
  export type raw_materialsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the raw_materials
     */
    select?: raw_materialsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the raw_materials
     */
    omit?: raw_materialsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: raw_materialsInclude<ExtArgs> | null
  }


  /**
   * Model batches
   */

  export type AggregateBatches = {
    _count: BatchesCountAggregateOutputType | null
    _avg: BatchesAvgAggregateOutputType | null
    _sum: BatchesSumAggregateOutputType | null
    _min: BatchesMinAggregateOutputType | null
    _max: BatchesMaxAggregateOutputType | null
  }

  export type BatchesAvgAggregateOutputType = {
    batch_id: number | null
    distillation_id: number | null
    quantity: Decimal | null
  }

  export type BatchesSumAggregateOutputType = {
    batch_id: number | null
    distillation_id: number | null
    quantity: Decimal | null
  }

  export type BatchesMinAggregateOutputType = {
    batch_id: number | null
    distillation_id: number | null
    creation_date: Date | null
    batch_code: string | null
    grade: string | null
    quantity: Decimal | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type BatchesMaxAggregateOutputType = {
    batch_id: number | null
    distillation_id: number | null
    creation_date: Date | null
    batch_code: string | null
    grade: string | null
    quantity: Decimal | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type BatchesCountAggregateOutputType = {
    batch_id: number
    distillation_id: number
    creation_date: number
    batch_code: number
    grade: number
    quantity: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type BatchesAvgAggregateInputType = {
    batch_id?: true
    distillation_id?: true
    quantity?: true
  }

  export type BatchesSumAggregateInputType = {
    batch_id?: true
    distillation_id?: true
    quantity?: true
  }

  export type BatchesMinAggregateInputType = {
    batch_id?: true
    distillation_id?: true
    creation_date?: true
    batch_code?: true
    grade?: true
    quantity?: true
    created_at?: true
    updated_at?: true
  }

  export type BatchesMaxAggregateInputType = {
    batch_id?: true
    distillation_id?: true
    creation_date?: true
    batch_code?: true
    grade?: true
    quantity?: true
    created_at?: true
    updated_at?: true
  }

  export type BatchesCountAggregateInputType = {
    batch_id?: true
    distillation_id?: true
    creation_date?: true
    batch_code?: true
    grade?: true
    quantity?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type BatchesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which batches to aggregate.
     */
    where?: batchesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of batches to fetch.
     */
    orderBy?: batchesOrderByWithRelationInput | batchesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: batchesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` batches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` batches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned batches
    **/
    _count?: true | BatchesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BatchesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BatchesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BatchesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BatchesMaxAggregateInputType
  }

  export type GetBatchesAggregateType<T extends BatchesAggregateArgs> = {
        [P in keyof T & keyof AggregateBatches]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBatches[P]>
      : GetScalarType<T[P], AggregateBatches[P]>
  }




  export type batchesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: batchesWhereInput
    orderBy?: batchesOrderByWithAggregationInput | batchesOrderByWithAggregationInput[]
    by: BatchesScalarFieldEnum[] | BatchesScalarFieldEnum
    having?: batchesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BatchesCountAggregateInputType | true
    _avg?: BatchesAvgAggregateInputType
    _sum?: BatchesSumAggregateInputType
    _min?: BatchesMinAggregateInputType
    _max?: BatchesMaxAggregateInputType
  }

  export type BatchesGroupByOutputType = {
    batch_id: number
    distillation_id: number | null
    creation_date: Date | null
    batch_code: string | null
    grade: string | null
    quantity: Decimal | null
    created_at: Date | null
    updated_at: Date | null
    _count: BatchesCountAggregateOutputType | null
    _avg: BatchesAvgAggregateOutputType | null
    _sum: BatchesSumAggregateOutputType | null
    _min: BatchesMinAggregateOutputType | null
    _max: BatchesMaxAggregateOutputType | null
  }

  type GetBatchesGroupByPayload<T extends batchesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BatchesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BatchesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BatchesGroupByOutputType[P]>
            : GetScalarType<T[P], BatchesGroupByOutputType[P]>
        }
      >
    >


  export type batchesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    batch_id?: boolean
    distillation_id?: boolean
    creation_date?: boolean
    batch_code?: boolean
    grade?: boolean
    quantity?: boolean
    created_at?: boolean
    updated_at?: boolean
    distillations?: boolean | batches$distillationsArgs<ExtArgs>
  }, ExtArgs["result"]["batches"]>

  export type batchesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    batch_id?: boolean
    distillation_id?: boolean
    creation_date?: boolean
    batch_code?: boolean
    grade?: boolean
    quantity?: boolean
    created_at?: boolean
    updated_at?: boolean
    distillations?: boolean | batches$distillationsArgs<ExtArgs>
  }, ExtArgs["result"]["batches"]>

  export type batchesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    batch_id?: boolean
    distillation_id?: boolean
    creation_date?: boolean
    batch_code?: boolean
    grade?: boolean
    quantity?: boolean
    created_at?: boolean
    updated_at?: boolean
    distillations?: boolean | batches$distillationsArgs<ExtArgs>
  }, ExtArgs["result"]["batches"]>

  export type batchesSelectScalar = {
    batch_id?: boolean
    distillation_id?: boolean
    creation_date?: boolean
    batch_code?: boolean
    grade?: boolean
    quantity?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type batchesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"batch_id" | "distillation_id" | "creation_date" | "batch_code" | "grade" | "quantity" | "created_at" | "updated_at", ExtArgs["result"]["batches"]>
  export type batchesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    distillations?: boolean | batches$distillationsArgs<ExtArgs>
  }
  export type batchesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    distillations?: boolean | batches$distillationsArgs<ExtArgs>
  }
  export type batchesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    distillations?: boolean | batches$distillationsArgs<ExtArgs>
  }

  export type $batchesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "batches"
    objects: {
      distillations: Prisma.$distillationsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      batch_id: number
      distillation_id: number | null
      creation_date: Date | null
      batch_code: string | null
      grade: string | null
      quantity: Prisma.Decimal | null
      created_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["batches"]>
    composites: {}
  }

  type batchesGetPayload<S extends boolean | null | undefined | batchesDefaultArgs> = $Result.GetResult<Prisma.$batchesPayload, S>

  type batchesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<batchesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BatchesCountAggregateInputType | true
    }

  export interface batchesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['batches'], meta: { name: 'batches' } }
    /**
     * Find zero or one Batches that matches the filter.
     * @param {batchesFindUniqueArgs} args - Arguments to find a Batches
     * @example
     * // Get one Batches
     * const batches = await prisma.batches.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends batchesFindUniqueArgs>(args: SelectSubset<T, batchesFindUniqueArgs<ExtArgs>>): Prisma__batchesClient<$Result.GetResult<Prisma.$batchesPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Batches that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {batchesFindUniqueOrThrowArgs} args - Arguments to find a Batches
     * @example
     * // Get one Batches
     * const batches = await prisma.batches.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends batchesFindUniqueOrThrowArgs>(args: SelectSubset<T, batchesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__batchesClient<$Result.GetResult<Prisma.$batchesPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Batches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {batchesFindFirstArgs} args - Arguments to find a Batches
     * @example
     * // Get one Batches
     * const batches = await prisma.batches.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends batchesFindFirstArgs>(args?: SelectSubset<T, batchesFindFirstArgs<ExtArgs>>): Prisma__batchesClient<$Result.GetResult<Prisma.$batchesPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Batches that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {batchesFindFirstOrThrowArgs} args - Arguments to find a Batches
     * @example
     * // Get one Batches
     * const batches = await prisma.batches.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends batchesFindFirstOrThrowArgs>(args?: SelectSubset<T, batchesFindFirstOrThrowArgs<ExtArgs>>): Prisma__batchesClient<$Result.GetResult<Prisma.$batchesPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Batches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {batchesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Batches
     * const batches = await prisma.batches.findMany()
     * 
     * // Get first 10 Batches
     * const batches = await prisma.batches.findMany({ take: 10 })
     * 
     * // Only select the `batch_id`
     * const batchesWithBatch_idOnly = await prisma.batches.findMany({ select: { batch_id: true } })
     * 
     */
    findMany<T extends batchesFindManyArgs>(args?: SelectSubset<T, batchesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$batchesPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Batches.
     * @param {batchesCreateArgs} args - Arguments to create a Batches.
     * @example
     * // Create one Batches
     * const Batches = await prisma.batches.create({
     *   data: {
     *     // ... data to create a Batches
     *   }
     * })
     * 
     */
    create<T extends batchesCreateArgs>(args: SelectSubset<T, batchesCreateArgs<ExtArgs>>): Prisma__batchesClient<$Result.GetResult<Prisma.$batchesPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Batches.
     * @param {batchesCreateManyArgs} args - Arguments to create many Batches.
     * @example
     * // Create many Batches
     * const batches = await prisma.batches.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends batchesCreateManyArgs>(args?: SelectSubset<T, batchesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Batches and returns the data saved in the database.
     * @param {batchesCreateManyAndReturnArgs} args - Arguments to create many Batches.
     * @example
     * // Create many Batches
     * const batches = await prisma.batches.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Batches and only return the `batch_id`
     * const batchesWithBatch_idOnly = await prisma.batches.createManyAndReturn({
     *   select: { batch_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends batchesCreateManyAndReturnArgs>(args?: SelectSubset<T, batchesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$batchesPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Batches.
     * @param {batchesDeleteArgs} args - Arguments to delete one Batches.
     * @example
     * // Delete one Batches
     * const Batches = await prisma.batches.delete({
     *   where: {
     *     // ... filter to delete one Batches
     *   }
     * })
     * 
     */
    delete<T extends batchesDeleteArgs>(args: SelectSubset<T, batchesDeleteArgs<ExtArgs>>): Prisma__batchesClient<$Result.GetResult<Prisma.$batchesPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Batches.
     * @param {batchesUpdateArgs} args - Arguments to update one Batches.
     * @example
     * // Update one Batches
     * const batches = await prisma.batches.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends batchesUpdateArgs>(args: SelectSubset<T, batchesUpdateArgs<ExtArgs>>): Prisma__batchesClient<$Result.GetResult<Prisma.$batchesPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Batches.
     * @param {batchesDeleteManyArgs} args - Arguments to filter Batches to delete.
     * @example
     * // Delete a few Batches
     * const { count } = await prisma.batches.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends batchesDeleteManyArgs>(args?: SelectSubset<T, batchesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Batches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {batchesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Batches
     * const batches = await prisma.batches.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends batchesUpdateManyArgs>(args: SelectSubset<T, batchesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Batches and returns the data updated in the database.
     * @param {batchesUpdateManyAndReturnArgs} args - Arguments to update many Batches.
     * @example
     * // Update many Batches
     * const batches = await prisma.batches.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Batches and only return the `batch_id`
     * const batchesWithBatch_idOnly = await prisma.batches.updateManyAndReturn({
     *   select: { batch_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends batchesUpdateManyAndReturnArgs>(args: SelectSubset<T, batchesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$batchesPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Batches.
     * @param {batchesUpsertArgs} args - Arguments to update or create a Batches.
     * @example
     * // Update or create a Batches
     * const batches = await prisma.batches.upsert({
     *   create: {
     *     // ... data to create a Batches
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Batches we want to update
     *   }
     * })
     */
    upsert<T extends batchesUpsertArgs>(args: SelectSubset<T, batchesUpsertArgs<ExtArgs>>): Prisma__batchesClient<$Result.GetResult<Prisma.$batchesPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Batches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {batchesCountArgs} args - Arguments to filter Batches to count.
     * @example
     * // Count the number of Batches
     * const count = await prisma.batches.count({
     *   where: {
     *     // ... the filter for the Batches we want to count
     *   }
     * })
    **/
    count<T extends batchesCountArgs>(
      args?: Subset<T, batchesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BatchesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Batches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BatchesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BatchesAggregateArgs>(args: Subset<T, BatchesAggregateArgs>): Prisma.PrismaPromise<GetBatchesAggregateType<T>>

    /**
     * Group by Batches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {batchesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends batchesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: batchesGroupByArgs['orderBy'] }
        : { orderBy?: batchesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, batchesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBatchesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the batches model
   */
  readonly fields: batchesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for batches.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__batchesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    distillations<T extends batches$distillationsArgs<ExtArgs> = {}>(args?: Subset<T, batches$distillationsArgs<ExtArgs>>): Prisma__distillationsClient<$Result.GetResult<Prisma.$distillationsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the batches model
   */ 
  interface batchesFieldRefs {
    readonly batch_id: FieldRef<"batches", 'Int'>
    readonly distillation_id: FieldRef<"batches", 'Int'>
    readonly creation_date: FieldRef<"batches", 'DateTime'>
    readonly batch_code: FieldRef<"batches", 'String'>
    readonly grade: FieldRef<"batches", 'String'>
    readonly quantity: FieldRef<"batches", 'Decimal'>
    readonly created_at: FieldRef<"batches", 'DateTime'>
    readonly updated_at: FieldRef<"batches", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * batches findUnique
   */
  export type batchesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the batches
     */
    select?: batchesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the batches
     */
    omit?: batchesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: batchesInclude<ExtArgs> | null
    /**
     * Filter, which batches to fetch.
     */
    where: batchesWhereUniqueInput
  }

  /**
   * batches findUniqueOrThrow
   */
  export type batchesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the batches
     */
    select?: batchesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the batches
     */
    omit?: batchesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: batchesInclude<ExtArgs> | null
    /**
     * Filter, which batches to fetch.
     */
    where: batchesWhereUniqueInput
  }

  /**
   * batches findFirst
   */
  export type batchesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the batches
     */
    select?: batchesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the batches
     */
    omit?: batchesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: batchesInclude<ExtArgs> | null
    /**
     * Filter, which batches to fetch.
     */
    where?: batchesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of batches to fetch.
     */
    orderBy?: batchesOrderByWithRelationInput | batchesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for batches.
     */
    cursor?: batchesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` batches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` batches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of batches.
     */
    distinct?: BatchesScalarFieldEnum | BatchesScalarFieldEnum[]
  }

  /**
   * batches findFirstOrThrow
   */
  export type batchesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the batches
     */
    select?: batchesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the batches
     */
    omit?: batchesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: batchesInclude<ExtArgs> | null
    /**
     * Filter, which batches to fetch.
     */
    where?: batchesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of batches to fetch.
     */
    orderBy?: batchesOrderByWithRelationInput | batchesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for batches.
     */
    cursor?: batchesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` batches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` batches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of batches.
     */
    distinct?: BatchesScalarFieldEnum | BatchesScalarFieldEnum[]
  }

  /**
   * batches findMany
   */
  export type batchesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the batches
     */
    select?: batchesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the batches
     */
    omit?: batchesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: batchesInclude<ExtArgs> | null
    /**
     * Filter, which batches to fetch.
     */
    where?: batchesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of batches to fetch.
     */
    orderBy?: batchesOrderByWithRelationInput | batchesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing batches.
     */
    cursor?: batchesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` batches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` batches.
     */
    skip?: number
    distinct?: BatchesScalarFieldEnum | BatchesScalarFieldEnum[]
  }

  /**
   * batches create
   */
  export type batchesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the batches
     */
    select?: batchesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the batches
     */
    omit?: batchesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: batchesInclude<ExtArgs> | null
    /**
     * The data needed to create a batches.
     */
    data?: XOR<batchesCreateInput, batchesUncheckedCreateInput>
  }

  /**
   * batches createMany
   */
  export type batchesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many batches.
     */
    data: batchesCreateManyInput | batchesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * batches createManyAndReturn
   */
  export type batchesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the batches
     */
    select?: batchesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the batches
     */
    omit?: batchesOmit<ExtArgs> | null
    /**
     * The data used to create many batches.
     */
    data: batchesCreateManyInput | batchesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: batchesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * batches update
   */
  export type batchesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the batches
     */
    select?: batchesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the batches
     */
    omit?: batchesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: batchesInclude<ExtArgs> | null
    /**
     * The data needed to update a batches.
     */
    data: XOR<batchesUpdateInput, batchesUncheckedUpdateInput>
    /**
     * Choose, which batches to update.
     */
    where: batchesWhereUniqueInput
  }

  /**
   * batches updateMany
   */
  export type batchesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update batches.
     */
    data: XOR<batchesUpdateManyMutationInput, batchesUncheckedUpdateManyInput>
    /**
     * Filter which batches to update
     */
    where?: batchesWhereInput
  }

  /**
   * batches updateManyAndReturn
   */
  export type batchesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the batches
     */
    select?: batchesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the batches
     */
    omit?: batchesOmit<ExtArgs> | null
    /**
     * The data used to update batches.
     */
    data: XOR<batchesUpdateManyMutationInput, batchesUncheckedUpdateManyInput>
    /**
     * Filter which batches to update
     */
    where?: batchesWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: batchesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * batches upsert
   */
  export type batchesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the batches
     */
    select?: batchesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the batches
     */
    omit?: batchesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: batchesInclude<ExtArgs> | null
    /**
     * The filter to search for the batches to update in case it exists.
     */
    where: batchesWhereUniqueInput
    /**
     * In case the batches found by the `where` argument doesn't exist, create a new batches with this data.
     */
    create: XOR<batchesCreateInput, batchesUncheckedCreateInput>
    /**
     * In case the batches was found with the provided `where` argument, update it with this data.
     */
    update: XOR<batchesUpdateInput, batchesUncheckedUpdateInput>
  }

  /**
   * batches delete
   */
  export type batchesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the batches
     */
    select?: batchesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the batches
     */
    omit?: batchesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: batchesInclude<ExtArgs> | null
    /**
     * Filter which batches to delete.
     */
    where: batchesWhereUniqueInput
  }

  /**
   * batches deleteMany
   */
  export type batchesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which batches to delete
     */
    where?: batchesWhereInput
  }

  /**
   * batches.distillations
   */
  export type batches$distillationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the distillations
     */
    select?: distillationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the distillations
     */
    omit?: distillationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: distillationsInclude<ExtArgs> | null
    where?: distillationsWhereInput
  }

  /**
   * batches without action
   */
  export type batchesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the batches
     */
    select?: batchesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the batches
     */
    omit?: batchesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: batchesInclude<ExtArgs> | null
  }


  /**
   * Model deliveries
   */

  export type AggregateDeliveries = {
    _count: DeliveriesCountAggregateOutputType | null
    _avg: DeliveriesAvgAggregateOutputType | null
    _sum: DeliveriesSumAggregateOutputType | null
    _min: DeliveriesMinAggregateOutputType | null
    _max: DeliveriesMaxAggregateOutputType | null
  }

  export type DeliveriesAvgAggregateOutputType = {
    delivery_id: number | null
    order_id: number | null
    quantity_received: number | null
  }

  export type DeliveriesSumAggregateOutputType = {
    delivery_id: number | null
    order_id: number | null
    quantity_received: number | null
  }

  export type DeliveriesMinAggregateOutputType = {
    delivery_id: number | null
    order_id: number | null
    quantity_received: number | null
    date_received: Date | null
    batch_code: string | null
    location: string | null
    delivery_notes: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type DeliveriesMaxAggregateOutputType = {
    delivery_id: number | null
    order_id: number | null
    quantity_received: number | null
    date_received: Date | null
    batch_code: string | null
    location: string | null
    delivery_notes: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type DeliveriesCountAggregateOutputType = {
    delivery_id: number
    order_id: number
    quantity_received: number
    date_received: number
    batch_code: number
    location: number
    delivery_notes: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type DeliveriesAvgAggregateInputType = {
    delivery_id?: true
    order_id?: true
    quantity_received?: true
  }

  export type DeliveriesSumAggregateInputType = {
    delivery_id?: true
    order_id?: true
    quantity_received?: true
  }

  export type DeliveriesMinAggregateInputType = {
    delivery_id?: true
    order_id?: true
    quantity_received?: true
    date_received?: true
    batch_code?: true
    location?: true
    delivery_notes?: true
    created_at?: true
    updated_at?: true
  }

  export type DeliveriesMaxAggregateInputType = {
    delivery_id?: true
    order_id?: true
    quantity_received?: true
    date_received?: true
    batch_code?: true
    location?: true
    delivery_notes?: true
    created_at?: true
    updated_at?: true
  }

  export type DeliveriesCountAggregateInputType = {
    delivery_id?: true
    order_id?: true
    quantity_received?: true
    date_received?: true
    batch_code?: true
    location?: true
    delivery_notes?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type DeliveriesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which deliveries to aggregate.
     */
    where?: deliveriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of deliveries to fetch.
     */
    orderBy?: deliveriesOrderByWithRelationInput | deliveriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: deliveriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` deliveries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` deliveries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned deliveries
    **/
    _count?: true | DeliveriesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DeliveriesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DeliveriesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DeliveriesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DeliveriesMaxAggregateInputType
  }

  export type GetDeliveriesAggregateType<T extends DeliveriesAggregateArgs> = {
        [P in keyof T & keyof AggregateDeliveries]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDeliveries[P]>
      : GetScalarType<T[P], AggregateDeliveries[P]>
  }




  export type deliveriesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: deliveriesWhereInput
    orderBy?: deliveriesOrderByWithAggregationInput | deliveriesOrderByWithAggregationInput[]
    by: DeliveriesScalarFieldEnum[] | DeliveriesScalarFieldEnum
    having?: deliveriesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DeliveriesCountAggregateInputType | true
    _avg?: DeliveriesAvgAggregateInputType
    _sum?: DeliveriesSumAggregateInputType
    _min?: DeliveriesMinAggregateInputType
    _max?: DeliveriesMaxAggregateInputType
  }

  export type DeliveriesGroupByOutputType = {
    delivery_id: number
    order_id: number | null
    quantity_received: number
    date_received: Date
    batch_code: string | null
    location: string | null
    delivery_notes: string | null
    created_at: Date | null
    updated_at: Date | null
    _count: DeliveriesCountAggregateOutputType | null
    _avg: DeliveriesAvgAggregateOutputType | null
    _sum: DeliveriesSumAggregateOutputType | null
    _min: DeliveriesMinAggregateOutputType | null
    _max: DeliveriesMaxAggregateOutputType | null
  }

  type GetDeliveriesGroupByPayload<T extends deliveriesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DeliveriesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DeliveriesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DeliveriesGroupByOutputType[P]>
            : GetScalarType<T[P], DeliveriesGroupByOutputType[P]>
        }
      >
    >


  export type deliveriesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    delivery_id?: boolean
    order_id?: boolean
    quantity_received?: boolean
    date_received?: boolean
    batch_code?: boolean
    location?: boolean
    delivery_notes?: boolean
    created_at?: boolean
    updated_at?: boolean
    orders?: boolean | deliveries$ordersArgs<ExtArgs>
    transactions?: boolean | deliveries$transactionsArgs<ExtArgs>
    _count?: boolean | DeliveriesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["deliveries"]>

  export type deliveriesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    delivery_id?: boolean
    order_id?: boolean
    quantity_received?: boolean
    date_received?: boolean
    batch_code?: boolean
    location?: boolean
    delivery_notes?: boolean
    created_at?: boolean
    updated_at?: boolean
    orders?: boolean | deliveries$ordersArgs<ExtArgs>
  }, ExtArgs["result"]["deliveries"]>

  export type deliveriesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    delivery_id?: boolean
    order_id?: boolean
    quantity_received?: boolean
    date_received?: boolean
    batch_code?: boolean
    location?: boolean
    delivery_notes?: boolean
    created_at?: boolean
    updated_at?: boolean
    orders?: boolean | deliveries$ordersArgs<ExtArgs>
  }, ExtArgs["result"]["deliveries"]>

  export type deliveriesSelectScalar = {
    delivery_id?: boolean
    order_id?: boolean
    quantity_received?: boolean
    date_received?: boolean
    batch_code?: boolean
    location?: boolean
    delivery_notes?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type deliveriesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"delivery_id" | "order_id" | "quantity_received" | "date_received" | "batch_code" | "location" | "delivery_notes" | "created_at" | "updated_at", ExtArgs["result"]["deliveries"]>
  export type deliveriesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | deliveries$ordersArgs<ExtArgs>
    transactions?: boolean | deliveries$transactionsArgs<ExtArgs>
    _count?: boolean | DeliveriesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type deliveriesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | deliveries$ordersArgs<ExtArgs>
  }
  export type deliveriesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | deliveries$ordersArgs<ExtArgs>
  }

  export type $deliveriesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "deliveries"
    objects: {
      orders: Prisma.$ordersPayload<ExtArgs> | null
      transactions: Prisma.$transactionsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      delivery_id: number
      order_id: number | null
      quantity_received: number
      date_received: Date
      batch_code: string | null
      location: string | null
      delivery_notes: string | null
      created_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["deliveries"]>
    composites: {}
  }

  type deliveriesGetPayload<S extends boolean | null | undefined | deliveriesDefaultArgs> = $Result.GetResult<Prisma.$deliveriesPayload, S>

  type deliveriesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<deliveriesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DeliveriesCountAggregateInputType | true
    }

  export interface deliveriesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['deliveries'], meta: { name: 'deliveries' } }
    /**
     * Find zero or one Deliveries that matches the filter.
     * @param {deliveriesFindUniqueArgs} args - Arguments to find a Deliveries
     * @example
     * // Get one Deliveries
     * const deliveries = await prisma.deliveries.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends deliveriesFindUniqueArgs>(args: SelectSubset<T, deliveriesFindUniqueArgs<ExtArgs>>): Prisma__deliveriesClient<$Result.GetResult<Prisma.$deliveriesPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Deliveries that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {deliveriesFindUniqueOrThrowArgs} args - Arguments to find a Deliveries
     * @example
     * // Get one Deliveries
     * const deliveries = await prisma.deliveries.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends deliveriesFindUniqueOrThrowArgs>(args: SelectSubset<T, deliveriesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__deliveriesClient<$Result.GetResult<Prisma.$deliveriesPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Deliveries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deliveriesFindFirstArgs} args - Arguments to find a Deliveries
     * @example
     * // Get one Deliveries
     * const deliveries = await prisma.deliveries.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends deliveriesFindFirstArgs>(args?: SelectSubset<T, deliveriesFindFirstArgs<ExtArgs>>): Prisma__deliveriesClient<$Result.GetResult<Prisma.$deliveriesPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Deliveries that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deliveriesFindFirstOrThrowArgs} args - Arguments to find a Deliveries
     * @example
     * // Get one Deliveries
     * const deliveries = await prisma.deliveries.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends deliveriesFindFirstOrThrowArgs>(args?: SelectSubset<T, deliveriesFindFirstOrThrowArgs<ExtArgs>>): Prisma__deliveriesClient<$Result.GetResult<Prisma.$deliveriesPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Deliveries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deliveriesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Deliveries
     * const deliveries = await prisma.deliveries.findMany()
     * 
     * // Get first 10 Deliveries
     * const deliveries = await prisma.deliveries.findMany({ take: 10 })
     * 
     * // Only select the `delivery_id`
     * const deliveriesWithDelivery_idOnly = await prisma.deliveries.findMany({ select: { delivery_id: true } })
     * 
     */
    findMany<T extends deliveriesFindManyArgs>(args?: SelectSubset<T, deliveriesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$deliveriesPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Deliveries.
     * @param {deliveriesCreateArgs} args - Arguments to create a Deliveries.
     * @example
     * // Create one Deliveries
     * const Deliveries = await prisma.deliveries.create({
     *   data: {
     *     // ... data to create a Deliveries
     *   }
     * })
     * 
     */
    create<T extends deliveriesCreateArgs>(args: SelectSubset<T, deliveriesCreateArgs<ExtArgs>>): Prisma__deliveriesClient<$Result.GetResult<Prisma.$deliveriesPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Deliveries.
     * @param {deliveriesCreateManyArgs} args - Arguments to create many Deliveries.
     * @example
     * // Create many Deliveries
     * const deliveries = await prisma.deliveries.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends deliveriesCreateManyArgs>(args?: SelectSubset<T, deliveriesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Deliveries and returns the data saved in the database.
     * @param {deliveriesCreateManyAndReturnArgs} args - Arguments to create many Deliveries.
     * @example
     * // Create many Deliveries
     * const deliveries = await prisma.deliveries.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Deliveries and only return the `delivery_id`
     * const deliveriesWithDelivery_idOnly = await prisma.deliveries.createManyAndReturn({
     *   select: { delivery_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends deliveriesCreateManyAndReturnArgs>(args?: SelectSubset<T, deliveriesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$deliveriesPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Deliveries.
     * @param {deliveriesDeleteArgs} args - Arguments to delete one Deliveries.
     * @example
     * // Delete one Deliveries
     * const Deliveries = await prisma.deliveries.delete({
     *   where: {
     *     // ... filter to delete one Deliveries
     *   }
     * })
     * 
     */
    delete<T extends deliveriesDeleteArgs>(args: SelectSubset<T, deliveriesDeleteArgs<ExtArgs>>): Prisma__deliveriesClient<$Result.GetResult<Prisma.$deliveriesPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Deliveries.
     * @param {deliveriesUpdateArgs} args - Arguments to update one Deliveries.
     * @example
     * // Update one Deliveries
     * const deliveries = await prisma.deliveries.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends deliveriesUpdateArgs>(args: SelectSubset<T, deliveriesUpdateArgs<ExtArgs>>): Prisma__deliveriesClient<$Result.GetResult<Prisma.$deliveriesPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Deliveries.
     * @param {deliveriesDeleteManyArgs} args - Arguments to filter Deliveries to delete.
     * @example
     * // Delete a few Deliveries
     * const { count } = await prisma.deliveries.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends deliveriesDeleteManyArgs>(args?: SelectSubset<T, deliveriesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Deliveries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deliveriesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Deliveries
     * const deliveries = await prisma.deliveries.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends deliveriesUpdateManyArgs>(args: SelectSubset<T, deliveriesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Deliveries and returns the data updated in the database.
     * @param {deliveriesUpdateManyAndReturnArgs} args - Arguments to update many Deliveries.
     * @example
     * // Update many Deliveries
     * const deliveries = await prisma.deliveries.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Deliveries and only return the `delivery_id`
     * const deliveriesWithDelivery_idOnly = await prisma.deliveries.updateManyAndReturn({
     *   select: { delivery_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends deliveriesUpdateManyAndReturnArgs>(args: SelectSubset<T, deliveriesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$deliveriesPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Deliveries.
     * @param {deliveriesUpsertArgs} args - Arguments to update or create a Deliveries.
     * @example
     * // Update or create a Deliveries
     * const deliveries = await prisma.deliveries.upsert({
     *   create: {
     *     // ... data to create a Deliveries
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Deliveries we want to update
     *   }
     * })
     */
    upsert<T extends deliveriesUpsertArgs>(args: SelectSubset<T, deliveriesUpsertArgs<ExtArgs>>): Prisma__deliveriesClient<$Result.GetResult<Prisma.$deliveriesPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Deliveries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deliveriesCountArgs} args - Arguments to filter Deliveries to count.
     * @example
     * // Count the number of Deliveries
     * const count = await prisma.deliveries.count({
     *   where: {
     *     // ... the filter for the Deliveries we want to count
     *   }
     * })
    **/
    count<T extends deliveriesCountArgs>(
      args?: Subset<T, deliveriesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DeliveriesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Deliveries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeliveriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DeliveriesAggregateArgs>(args: Subset<T, DeliveriesAggregateArgs>): Prisma.PrismaPromise<GetDeliveriesAggregateType<T>>

    /**
     * Group by Deliveries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deliveriesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends deliveriesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: deliveriesGroupByArgs['orderBy'] }
        : { orderBy?: deliveriesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, deliveriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDeliveriesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the deliveries model
   */
  readonly fields: deliveriesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for deliveries.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__deliveriesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    orders<T extends deliveries$ordersArgs<ExtArgs> = {}>(args?: Subset<T, deliveries$ordersArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    transactions<T extends deliveries$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, deliveries$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the deliveries model
   */ 
  interface deliveriesFieldRefs {
    readonly delivery_id: FieldRef<"deliveries", 'Int'>
    readonly order_id: FieldRef<"deliveries", 'Int'>
    readonly quantity_received: FieldRef<"deliveries", 'Int'>
    readonly date_received: FieldRef<"deliveries", 'DateTime'>
    readonly batch_code: FieldRef<"deliveries", 'String'>
    readonly location: FieldRef<"deliveries", 'String'>
    readonly delivery_notes: FieldRef<"deliveries", 'String'>
    readonly created_at: FieldRef<"deliveries", 'DateTime'>
    readonly updated_at: FieldRef<"deliveries", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * deliveries findUnique
   */
  export type deliveriesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deliveries
     */
    select?: deliveriesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the deliveries
     */
    omit?: deliveriesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: deliveriesInclude<ExtArgs> | null
    /**
     * Filter, which deliveries to fetch.
     */
    where: deliveriesWhereUniqueInput
  }

  /**
   * deliveries findUniqueOrThrow
   */
  export type deliveriesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deliveries
     */
    select?: deliveriesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the deliveries
     */
    omit?: deliveriesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: deliveriesInclude<ExtArgs> | null
    /**
     * Filter, which deliveries to fetch.
     */
    where: deliveriesWhereUniqueInput
  }

  /**
   * deliveries findFirst
   */
  export type deliveriesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deliveries
     */
    select?: deliveriesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the deliveries
     */
    omit?: deliveriesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: deliveriesInclude<ExtArgs> | null
    /**
     * Filter, which deliveries to fetch.
     */
    where?: deliveriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of deliveries to fetch.
     */
    orderBy?: deliveriesOrderByWithRelationInput | deliveriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for deliveries.
     */
    cursor?: deliveriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` deliveries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` deliveries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of deliveries.
     */
    distinct?: DeliveriesScalarFieldEnum | DeliveriesScalarFieldEnum[]
  }

  /**
   * deliveries findFirstOrThrow
   */
  export type deliveriesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deliveries
     */
    select?: deliveriesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the deliveries
     */
    omit?: deliveriesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: deliveriesInclude<ExtArgs> | null
    /**
     * Filter, which deliveries to fetch.
     */
    where?: deliveriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of deliveries to fetch.
     */
    orderBy?: deliveriesOrderByWithRelationInput | deliveriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for deliveries.
     */
    cursor?: deliveriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` deliveries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` deliveries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of deliveries.
     */
    distinct?: DeliveriesScalarFieldEnum | DeliveriesScalarFieldEnum[]
  }

  /**
   * deliveries findMany
   */
  export type deliveriesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deliveries
     */
    select?: deliveriesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the deliveries
     */
    omit?: deliveriesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: deliveriesInclude<ExtArgs> | null
    /**
     * Filter, which deliveries to fetch.
     */
    where?: deliveriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of deliveries to fetch.
     */
    orderBy?: deliveriesOrderByWithRelationInput | deliveriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing deliveries.
     */
    cursor?: deliveriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` deliveries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` deliveries.
     */
    skip?: number
    distinct?: DeliveriesScalarFieldEnum | DeliveriesScalarFieldEnum[]
  }

  /**
   * deliveries create
   */
  export type deliveriesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deliveries
     */
    select?: deliveriesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the deliveries
     */
    omit?: deliveriesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: deliveriesInclude<ExtArgs> | null
    /**
     * The data needed to create a deliveries.
     */
    data: XOR<deliveriesCreateInput, deliveriesUncheckedCreateInput>
  }

  /**
   * deliveries createMany
   */
  export type deliveriesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many deliveries.
     */
    data: deliveriesCreateManyInput | deliveriesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * deliveries createManyAndReturn
   */
  export type deliveriesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deliveries
     */
    select?: deliveriesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the deliveries
     */
    omit?: deliveriesOmit<ExtArgs> | null
    /**
     * The data used to create many deliveries.
     */
    data: deliveriesCreateManyInput | deliveriesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: deliveriesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * deliveries update
   */
  export type deliveriesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deliveries
     */
    select?: deliveriesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the deliveries
     */
    omit?: deliveriesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: deliveriesInclude<ExtArgs> | null
    /**
     * The data needed to update a deliveries.
     */
    data: XOR<deliveriesUpdateInput, deliveriesUncheckedUpdateInput>
    /**
     * Choose, which deliveries to update.
     */
    where: deliveriesWhereUniqueInput
  }

  /**
   * deliveries updateMany
   */
  export type deliveriesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update deliveries.
     */
    data: XOR<deliveriesUpdateManyMutationInput, deliveriesUncheckedUpdateManyInput>
    /**
     * Filter which deliveries to update
     */
    where?: deliveriesWhereInput
  }

  /**
   * deliveries updateManyAndReturn
   */
  export type deliveriesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deliveries
     */
    select?: deliveriesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the deliveries
     */
    omit?: deliveriesOmit<ExtArgs> | null
    /**
     * The data used to update deliveries.
     */
    data: XOR<deliveriesUpdateManyMutationInput, deliveriesUncheckedUpdateManyInput>
    /**
     * Filter which deliveries to update
     */
    where?: deliveriesWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: deliveriesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * deliveries upsert
   */
  export type deliveriesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deliveries
     */
    select?: deliveriesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the deliveries
     */
    omit?: deliveriesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: deliveriesInclude<ExtArgs> | null
    /**
     * The filter to search for the deliveries to update in case it exists.
     */
    where: deliveriesWhereUniqueInput
    /**
     * In case the deliveries found by the `where` argument doesn't exist, create a new deliveries with this data.
     */
    create: XOR<deliveriesCreateInput, deliveriesUncheckedCreateInput>
    /**
     * In case the deliveries was found with the provided `where` argument, update it with this data.
     */
    update: XOR<deliveriesUpdateInput, deliveriesUncheckedUpdateInput>
  }

  /**
   * deliveries delete
   */
  export type deliveriesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deliveries
     */
    select?: deliveriesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the deliveries
     */
    omit?: deliveriesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: deliveriesInclude<ExtArgs> | null
    /**
     * Filter which deliveries to delete.
     */
    where: deliveriesWhereUniqueInput
  }

  /**
   * deliveries deleteMany
   */
  export type deliveriesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which deliveries to delete
     */
    where?: deliveriesWhereInput
  }

  /**
   * deliveries.orders
   */
  export type deliveries$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orders
     */
    omit?: ordersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    where?: ordersWhereInput
  }

  /**
   * deliveries.transactions
   */
  export type deliveries$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions
     */
    omit?: transactionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    where?: transactionsWhereInput
    orderBy?: transactionsOrderByWithRelationInput | transactionsOrderByWithRelationInput[]
    cursor?: transactionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionsScalarFieldEnum | TransactionsScalarFieldEnum[]
  }

  /**
   * deliveries without action
   */
  export type deliveriesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deliveries
     */
    select?: deliveriesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the deliveries
     */
    omit?: deliveriesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: deliveriesInclude<ExtArgs> | null
  }


  /**
   * Model distillations
   */

  export type AggregateDistillations = {
    _count: DistillationsCountAggregateOutputType | null
    _avg: DistillationsAvgAggregateOutputType | null
    _sum: DistillationsSumAggregateOutputType | null
    _min: DistillationsMinAggregateOutputType | null
    _max: DistillationsMaxAggregateOutputType | null
  }

  export type DistillationsAvgAggregateOutputType = {
    distillation_id: number | null
    volume_in: Decimal | null
    volume_in_spec: Decimal | null
    volume_repro: Decimal | null
  }

  export type DistillationsSumAggregateOutputType = {
    distillation_id: number | null
    volume_in: Decimal | null
    volume_in_spec: Decimal | null
    volume_repro: Decimal | null
  }

  export type DistillationsMinAggregateOutputType = {
    distillation_id: number | null
    loading_date: Date | null
    start_date: Date | null
    still_code: string | null
    volume_in: Decimal | null
    transporter: string | null
    loader: string | null
    operator: string | null
    completion_date: Date | null
    volume_in_spec: Decimal | null
    volume_repro: Decimal | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type DistillationsMaxAggregateOutputType = {
    distillation_id: number | null
    loading_date: Date | null
    start_date: Date | null
    still_code: string | null
    volume_in: Decimal | null
    transporter: string | null
    loader: string | null
    operator: string | null
    completion_date: Date | null
    volume_in_spec: Decimal | null
    volume_repro: Decimal | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type DistillationsCountAggregateOutputType = {
    distillation_id: number
    loading_date: number
    start_date: number
    still_code: number
    volume_in: number
    transporter: number
    loader: number
    operator: number
    completion_date: number
    volume_in_spec: number
    volume_repro: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type DistillationsAvgAggregateInputType = {
    distillation_id?: true
    volume_in?: true
    volume_in_spec?: true
    volume_repro?: true
  }

  export type DistillationsSumAggregateInputType = {
    distillation_id?: true
    volume_in?: true
    volume_in_spec?: true
    volume_repro?: true
  }

  export type DistillationsMinAggregateInputType = {
    distillation_id?: true
    loading_date?: true
    start_date?: true
    still_code?: true
    volume_in?: true
    transporter?: true
    loader?: true
    operator?: true
    completion_date?: true
    volume_in_spec?: true
    volume_repro?: true
    created_at?: true
    updated_at?: true
  }

  export type DistillationsMaxAggregateInputType = {
    distillation_id?: true
    loading_date?: true
    start_date?: true
    still_code?: true
    volume_in?: true
    transporter?: true
    loader?: true
    operator?: true
    completion_date?: true
    volume_in_spec?: true
    volume_repro?: true
    created_at?: true
    updated_at?: true
  }

  export type DistillationsCountAggregateInputType = {
    distillation_id?: true
    loading_date?: true
    start_date?: true
    still_code?: true
    volume_in?: true
    transporter?: true
    loader?: true
    operator?: true
    completion_date?: true
    volume_in_spec?: true
    volume_repro?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type DistillationsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which distillations to aggregate.
     */
    where?: distillationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of distillations to fetch.
     */
    orderBy?: distillationsOrderByWithRelationInput | distillationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: distillationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` distillations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` distillations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned distillations
    **/
    _count?: true | DistillationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DistillationsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DistillationsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DistillationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DistillationsMaxAggregateInputType
  }

  export type GetDistillationsAggregateType<T extends DistillationsAggregateArgs> = {
        [P in keyof T & keyof AggregateDistillations]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDistillations[P]>
      : GetScalarType<T[P], AggregateDistillations[P]>
  }




  export type distillationsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: distillationsWhereInput
    orderBy?: distillationsOrderByWithAggregationInput | distillationsOrderByWithAggregationInput[]
    by: DistillationsScalarFieldEnum[] | DistillationsScalarFieldEnum
    having?: distillationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DistillationsCountAggregateInputType | true
    _avg?: DistillationsAvgAggregateInputType
    _sum?: DistillationsSumAggregateInputType
    _min?: DistillationsMinAggregateInputType
    _max?: DistillationsMaxAggregateInputType
  }

  export type DistillationsGroupByOutputType = {
    distillation_id: number
    loading_date: Date | null
    start_date: Date | null
    still_code: string | null
    volume_in: Decimal | null
    transporter: string | null
    loader: string | null
    operator: string | null
    completion_date: Date | null
    volume_in_spec: Decimal | null
    volume_repro: Decimal | null
    created_at: Date | null
    updated_at: Date | null
    _count: DistillationsCountAggregateOutputType | null
    _avg: DistillationsAvgAggregateOutputType | null
    _sum: DistillationsSumAggregateOutputType | null
    _min: DistillationsMinAggregateOutputType | null
    _max: DistillationsMaxAggregateOutputType | null
  }

  type GetDistillationsGroupByPayload<T extends distillationsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DistillationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DistillationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DistillationsGroupByOutputType[P]>
            : GetScalarType<T[P], DistillationsGroupByOutputType[P]>
        }
      >
    >


  export type distillationsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    distillation_id?: boolean
    loading_date?: boolean
    start_date?: boolean
    still_code?: boolean
    volume_in?: boolean
    transporter?: boolean
    loader?: boolean
    operator?: boolean
    completion_date?: boolean
    volume_in_spec?: boolean
    volume_repro?: boolean
    created_at?: boolean
    updated_at?: boolean
    batches?: boolean | distillations$batchesArgs<ExtArgs>
    drum_distillations?: boolean | distillations$drum_distillationsArgs<ExtArgs>
    repro_additions?: boolean | distillations$repro_additionsArgs<ExtArgs>
    _count?: boolean | DistillationsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["distillations"]>

  export type distillationsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    distillation_id?: boolean
    loading_date?: boolean
    start_date?: boolean
    still_code?: boolean
    volume_in?: boolean
    transporter?: boolean
    loader?: boolean
    operator?: boolean
    completion_date?: boolean
    volume_in_spec?: boolean
    volume_repro?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["distillations"]>

  export type distillationsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    distillation_id?: boolean
    loading_date?: boolean
    start_date?: boolean
    still_code?: boolean
    volume_in?: boolean
    transporter?: boolean
    loader?: boolean
    operator?: boolean
    completion_date?: boolean
    volume_in_spec?: boolean
    volume_repro?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["distillations"]>

  export type distillationsSelectScalar = {
    distillation_id?: boolean
    loading_date?: boolean
    start_date?: boolean
    still_code?: boolean
    volume_in?: boolean
    transporter?: boolean
    loader?: boolean
    operator?: boolean
    completion_date?: boolean
    volume_in_spec?: boolean
    volume_repro?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type distillationsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"distillation_id" | "loading_date" | "start_date" | "still_code" | "volume_in" | "transporter" | "loader" | "operator" | "completion_date" | "volume_in_spec" | "volume_repro" | "created_at" | "updated_at", ExtArgs["result"]["distillations"]>
  export type distillationsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    batches?: boolean | distillations$batchesArgs<ExtArgs>
    drum_distillations?: boolean | distillations$drum_distillationsArgs<ExtArgs>
    repro_additions?: boolean | distillations$repro_additionsArgs<ExtArgs>
    _count?: boolean | DistillationsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type distillationsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type distillationsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $distillationsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "distillations"
    objects: {
      batches: Prisma.$batchesPayload<ExtArgs>[]
      drum_distillations: Prisma.$drum_distillationsPayload<ExtArgs>[]
      repro_additions: Prisma.$repro_additionsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      distillation_id: number
      loading_date: Date | null
      start_date: Date | null
      still_code: string | null
      volume_in: Prisma.Decimal | null
      transporter: string | null
      loader: string | null
      operator: string | null
      completion_date: Date | null
      volume_in_spec: Prisma.Decimal | null
      volume_repro: Prisma.Decimal | null
      created_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["distillations"]>
    composites: {}
  }

  type distillationsGetPayload<S extends boolean | null | undefined | distillationsDefaultArgs> = $Result.GetResult<Prisma.$distillationsPayload, S>

  type distillationsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<distillationsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DistillationsCountAggregateInputType | true
    }

  export interface distillationsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['distillations'], meta: { name: 'distillations' } }
    /**
     * Find zero or one Distillations that matches the filter.
     * @param {distillationsFindUniqueArgs} args - Arguments to find a Distillations
     * @example
     * // Get one Distillations
     * const distillations = await prisma.distillations.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends distillationsFindUniqueArgs>(args: SelectSubset<T, distillationsFindUniqueArgs<ExtArgs>>): Prisma__distillationsClient<$Result.GetResult<Prisma.$distillationsPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Distillations that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {distillationsFindUniqueOrThrowArgs} args - Arguments to find a Distillations
     * @example
     * // Get one Distillations
     * const distillations = await prisma.distillations.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends distillationsFindUniqueOrThrowArgs>(args: SelectSubset<T, distillationsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__distillationsClient<$Result.GetResult<Prisma.$distillationsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Distillations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {distillationsFindFirstArgs} args - Arguments to find a Distillations
     * @example
     * // Get one Distillations
     * const distillations = await prisma.distillations.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends distillationsFindFirstArgs>(args?: SelectSubset<T, distillationsFindFirstArgs<ExtArgs>>): Prisma__distillationsClient<$Result.GetResult<Prisma.$distillationsPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Distillations that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {distillationsFindFirstOrThrowArgs} args - Arguments to find a Distillations
     * @example
     * // Get one Distillations
     * const distillations = await prisma.distillations.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends distillationsFindFirstOrThrowArgs>(args?: SelectSubset<T, distillationsFindFirstOrThrowArgs<ExtArgs>>): Prisma__distillationsClient<$Result.GetResult<Prisma.$distillationsPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Distillations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {distillationsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Distillations
     * const distillations = await prisma.distillations.findMany()
     * 
     * // Get first 10 Distillations
     * const distillations = await prisma.distillations.findMany({ take: 10 })
     * 
     * // Only select the `distillation_id`
     * const distillationsWithDistillation_idOnly = await prisma.distillations.findMany({ select: { distillation_id: true } })
     * 
     */
    findMany<T extends distillationsFindManyArgs>(args?: SelectSubset<T, distillationsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$distillationsPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Distillations.
     * @param {distillationsCreateArgs} args - Arguments to create a Distillations.
     * @example
     * // Create one Distillations
     * const Distillations = await prisma.distillations.create({
     *   data: {
     *     // ... data to create a Distillations
     *   }
     * })
     * 
     */
    create<T extends distillationsCreateArgs>(args: SelectSubset<T, distillationsCreateArgs<ExtArgs>>): Prisma__distillationsClient<$Result.GetResult<Prisma.$distillationsPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Distillations.
     * @param {distillationsCreateManyArgs} args - Arguments to create many Distillations.
     * @example
     * // Create many Distillations
     * const distillations = await prisma.distillations.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends distillationsCreateManyArgs>(args?: SelectSubset<T, distillationsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Distillations and returns the data saved in the database.
     * @param {distillationsCreateManyAndReturnArgs} args - Arguments to create many Distillations.
     * @example
     * // Create many Distillations
     * const distillations = await prisma.distillations.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Distillations and only return the `distillation_id`
     * const distillationsWithDistillation_idOnly = await prisma.distillations.createManyAndReturn({
     *   select: { distillation_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends distillationsCreateManyAndReturnArgs>(args?: SelectSubset<T, distillationsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$distillationsPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Distillations.
     * @param {distillationsDeleteArgs} args - Arguments to delete one Distillations.
     * @example
     * // Delete one Distillations
     * const Distillations = await prisma.distillations.delete({
     *   where: {
     *     // ... filter to delete one Distillations
     *   }
     * })
     * 
     */
    delete<T extends distillationsDeleteArgs>(args: SelectSubset<T, distillationsDeleteArgs<ExtArgs>>): Prisma__distillationsClient<$Result.GetResult<Prisma.$distillationsPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Distillations.
     * @param {distillationsUpdateArgs} args - Arguments to update one Distillations.
     * @example
     * // Update one Distillations
     * const distillations = await prisma.distillations.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends distillationsUpdateArgs>(args: SelectSubset<T, distillationsUpdateArgs<ExtArgs>>): Prisma__distillationsClient<$Result.GetResult<Prisma.$distillationsPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Distillations.
     * @param {distillationsDeleteManyArgs} args - Arguments to filter Distillations to delete.
     * @example
     * // Delete a few Distillations
     * const { count } = await prisma.distillations.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends distillationsDeleteManyArgs>(args?: SelectSubset<T, distillationsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Distillations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {distillationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Distillations
     * const distillations = await prisma.distillations.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends distillationsUpdateManyArgs>(args: SelectSubset<T, distillationsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Distillations and returns the data updated in the database.
     * @param {distillationsUpdateManyAndReturnArgs} args - Arguments to update many Distillations.
     * @example
     * // Update many Distillations
     * const distillations = await prisma.distillations.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Distillations and only return the `distillation_id`
     * const distillationsWithDistillation_idOnly = await prisma.distillations.updateManyAndReturn({
     *   select: { distillation_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends distillationsUpdateManyAndReturnArgs>(args: SelectSubset<T, distillationsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$distillationsPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Distillations.
     * @param {distillationsUpsertArgs} args - Arguments to update or create a Distillations.
     * @example
     * // Update or create a Distillations
     * const distillations = await prisma.distillations.upsert({
     *   create: {
     *     // ... data to create a Distillations
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Distillations we want to update
     *   }
     * })
     */
    upsert<T extends distillationsUpsertArgs>(args: SelectSubset<T, distillationsUpsertArgs<ExtArgs>>): Prisma__distillationsClient<$Result.GetResult<Prisma.$distillationsPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Distillations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {distillationsCountArgs} args - Arguments to filter Distillations to count.
     * @example
     * // Count the number of Distillations
     * const count = await prisma.distillations.count({
     *   where: {
     *     // ... the filter for the Distillations we want to count
     *   }
     * })
    **/
    count<T extends distillationsCountArgs>(
      args?: Subset<T, distillationsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DistillationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Distillations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistillationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DistillationsAggregateArgs>(args: Subset<T, DistillationsAggregateArgs>): Prisma.PrismaPromise<GetDistillationsAggregateType<T>>

    /**
     * Group by Distillations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {distillationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends distillationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: distillationsGroupByArgs['orderBy'] }
        : { orderBy?: distillationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, distillationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDistillationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the distillations model
   */
  readonly fields: distillationsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for distillations.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__distillationsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    batches<T extends distillations$batchesArgs<ExtArgs> = {}>(args?: Subset<T, distillations$batchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$batchesPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    drum_distillations<T extends distillations$drum_distillationsArgs<ExtArgs> = {}>(args?: Subset<T, distillations$drum_distillationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$drum_distillationsPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    repro_additions<T extends distillations$repro_additionsArgs<ExtArgs> = {}>(args?: Subset<T, distillations$repro_additionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$repro_additionsPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the distillations model
   */ 
  interface distillationsFieldRefs {
    readonly distillation_id: FieldRef<"distillations", 'Int'>
    readonly loading_date: FieldRef<"distillations", 'DateTime'>
    readonly start_date: FieldRef<"distillations", 'DateTime'>
    readonly still_code: FieldRef<"distillations", 'String'>
    readonly volume_in: FieldRef<"distillations", 'Decimal'>
    readonly transporter: FieldRef<"distillations", 'String'>
    readonly loader: FieldRef<"distillations", 'String'>
    readonly operator: FieldRef<"distillations", 'String'>
    readonly completion_date: FieldRef<"distillations", 'DateTime'>
    readonly volume_in_spec: FieldRef<"distillations", 'Decimal'>
    readonly volume_repro: FieldRef<"distillations", 'Decimal'>
    readonly created_at: FieldRef<"distillations", 'DateTime'>
    readonly updated_at: FieldRef<"distillations", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * distillations findUnique
   */
  export type distillationsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the distillations
     */
    select?: distillationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the distillations
     */
    omit?: distillationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: distillationsInclude<ExtArgs> | null
    /**
     * Filter, which distillations to fetch.
     */
    where: distillationsWhereUniqueInput
  }

  /**
   * distillations findUniqueOrThrow
   */
  export type distillationsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the distillations
     */
    select?: distillationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the distillations
     */
    omit?: distillationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: distillationsInclude<ExtArgs> | null
    /**
     * Filter, which distillations to fetch.
     */
    where: distillationsWhereUniqueInput
  }

  /**
   * distillations findFirst
   */
  export type distillationsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the distillations
     */
    select?: distillationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the distillations
     */
    omit?: distillationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: distillationsInclude<ExtArgs> | null
    /**
     * Filter, which distillations to fetch.
     */
    where?: distillationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of distillations to fetch.
     */
    orderBy?: distillationsOrderByWithRelationInput | distillationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for distillations.
     */
    cursor?: distillationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` distillations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` distillations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of distillations.
     */
    distinct?: DistillationsScalarFieldEnum | DistillationsScalarFieldEnum[]
  }

  /**
   * distillations findFirstOrThrow
   */
  export type distillationsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the distillations
     */
    select?: distillationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the distillations
     */
    omit?: distillationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: distillationsInclude<ExtArgs> | null
    /**
     * Filter, which distillations to fetch.
     */
    where?: distillationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of distillations to fetch.
     */
    orderBy?: distillationsOrderByWithRelationInput | distillationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for distillations.
     */
    cursor?: distillationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` distillations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` distillations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of distillations.
     */
    distinct?: DistillationsScalarFieldEnum | DistillationsScalarFieldEnum[]
  }

  /**
   * distillations findMany
   */
  export type distillationsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the distillations
     */
    select?: distillationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the distillations
     */
    omit?: distillationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: distillationsInclude<ExtArgs> | null
    /**
     * Filter, which distillations to fetch.
     */
    where?: distillationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of distillations to fetch.
     */
    orderBy?: distillationsOrderByWithRelationInput | distillationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing distillations.
     */
    cursor?: distillationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` distillations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` distillations.
     */
    skip?: number
    distinct?: DistillationsScalarFieldEnum | DistillationsScalarFieldEnum[]
  }

  /**
   * distillations create
   */
  export type distillationsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the distillations
     */
    select?: distillationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the distillations
     */
    omit?: distillationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: distillationsInclude<ExtArgs> | null
    /**
     * The data needed to create a distillations.
     */
    data?: XOR<distillationsCreateInput, distillationsUncheckedCreateInput>
  }

  /**
   * distillations createMany
   */
  export type distillationsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many distillations.
     */
    data: distillationsCreateManyInput | distillationsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * distillations createManyAndReturn
   */
  export type distillationsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the distillations
     */
    select?: distillationsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the distillations
     */
    omit?: distillationsOmit<ExtArgs> | null
    /**
     * The data used to create many distillations.
     */
    data: distillationsCreateManyInput | distillationsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * distillations update
   */
  export type distillationsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the distillations
     */
    select?: distillationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the distillations
     */
    omit?: distillationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: distillationsInclude<ExtArgs> | null
    /**
     * The data needed to update a distillations.
     */
    data: XOR<distillationsUpdateInput, distillationsUncheckedUpdateInput>
    /**
     * Choose, which distillations to update.
     */
    where: distillationsWhereUniqueInput
  }

  /**
   * distillations updateMany
   */
  export type distillationsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update distillations.
     */
    data: XOR<distillationsUpdateManyMutationInput, distillationsUncheckedUpdateManyInput>
    /**
     * Filter which distillations to update
     */
    where?: distillationsWhereInput
  }

  /**
   * distillations updateManyAndReturn
   */
  export type distillationsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the distillations
     */
    select?: distillationsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the distillations
     */
    omit?: distillationsOmit<ExtArgs> | null
    /**
     * The data used to update distillations.
     */
    data: XOR<distillationsUpdateManyMutationInput, distillationsUncheckedUpdateManyInput>
    /**
     * Filter which distillations to update
     */
    where?: distillationsWhereInput
  }

  /**
   * distillations upsert
   */
  export type distillationsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the distillations
     */
    select?: distillationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the distillations
     */
    omit?: distillationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: distillationsInclude<ExtArgs> | null
    /**
     * The filter to search for the distillations to update in case it exists.
     */
    where: distillationsWhereUniqueInput
    /**
     * In case the distillations found by the `where` argument doesn't exist, create a new distillations with this data.
     */
    create: XOR<distillationsCreateInput, distillationsUncheckedCreateInput>
    /**
     * In case the distillations was found with the provided `where` argument, update it with this data.
     */
    update: XOR<distillationsUpdateInput, distillationsUncheckedUpdateInput>
  }

  /**
   * distillations delete
   */
  export type distillationsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the distillations
     */
    select?: distillationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the distillations
     */
    omit?: distillationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: distillationsInclude<ExtArgs> | null
    /**
     * Filter which distillations to delete.
     */
    where: distillationsWhereUniqueInput
  }

  /**
   * distillations deleteMany
   */
  export type distillationsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which distillations to delete
     */
    where?: distillationsWhereInput
  }

  /**
   * distillations.batches
   */
  export type distillations$batchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the batches
     */
    select?: batchesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the batches
     */
    omit?: batchesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: batchesInclude<ExtArgs> | null
    where?: batchesWhereInput
    orderBy?: batchesOrderByWithRelationInput | batchesOrderByWithRelationInput[]
    cursor?: batchesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BatchesScalarFieldEnum | BatchesScalarFieldEnum[]
  }

  /**
   * distillations.drum_distillations
   */
  export type distillations$drum_distillationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the drum_distillations
     */
    select?: drum_distillationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the drum_distillations
     */
    omit?: drum_distillationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: drum_distillationsInclude<ExtArgs> | null
    where?: drum_distillationsWhereInput
    orderBy?: drum_distillationsOrderByWithRelationInput | drum_distillationsOrderByWithRelationInput[]
    cursor?: drum_distillationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Drum_distillationsScalarFieldEnum | Drum_distillationsScalarFieldEnum[]
  }

  /**
   * distillations.repro_additions
   */
  export type distillations$repro_additionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repro_additions
     */
    select?: repro_additionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the repro_additions
     */
    omit?: repro_additionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repro_additionsInclude<ExtArgs> | null
    where?: repro_additionsWhereInput
    orderBy?: repro_additionsOrderByWithRelationInput | repro_additionsOrderByWithRelationInput[]
    cursor?: repro_additionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Repro_additionsScalarFieldEnum | Repro_additionsScalarFieldEnum[]
  }

  /**
   * distillations without action
   */
  export type distillationsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the distillations
     */
    select?: distillationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the distillations
     */
    omit?: distillationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: distillationsInclude<ExtArgs> | null
  }


  /**
   * Model drum_distillations
   */

  export type AggregateDrum_distillations = {
    _count: Drum_distillationsCountAggregateOutputType | null
    _avg: Drum_distillationsAvgAggregateOutputType | null
    _sum: Drum_distillationsSumAggregateOutputType | null
    _min: Drum_distillationsMinAggregateOutputType | null
    _max: Drum_distillationsMaxAggregateOutputType | null
  }

  export type Drum_distillationsAvgAggregateOutputType = {
    drum_id: number | null
    distillation_id: number | null
    fraction_used: Decimal | null
  }

  export type Drum_distillationsSumAggregateOutputType = {
    drum_id: number | null
    distillation_id: number | null
    fraction_used: Decimal | null
  }

  export type Drum_distillationsMinAggregateOutputType = {
    drum_id: number | null
    distillation_id: number | null
    fraction_used: Decimal | null
  }

  export type Drum_distillationsMaxAggregateOutputType = {
    drum_id: number | null
    distillation_id: number | null
    fraction_used: Decimal | null
  }

  export type Drum_distillationsCountAggregateOutputType = {
    drum_id: number
    distillation_id: number
    fraction_used: number
    _all: number
  }


  export type Drum_distillationsAvgAggregateInputType = {
    drum_id?: true
    distillation_id?: true
    fraction_used?: true
  }

  export type Drum_distillationsSumAggregateInputType = {
    drum_id?: true
    distillation_id?: true
    fraction_used?: true
  }

  export type Drum_distillationsMinAggregateInputType = {
    drum_id?: true
    distillation_id?: true
    fraction_used?: true
  }

  export type Drum_distillationsMaxAggregateInputType = {
    drum_id?: true
    distillation_id?: true
    fraction_used?: true
  }

  export type Drum_distillationsCountAggregateInputType = {
    drum_id?: true
    distillation_id?: true
    fraction_used?: true
    _all?: true
  }

  export type Drum_distillationsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which drum_distillations to aggregate.
     */
    where?: drum_distillationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of drum_distillations to fetch.
     */
    orderBy?: drum_distillationsOrderByWithRelationInput | drum_distillationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: drum_distillationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` drum_distillations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` drum_distillations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned drum_distillations
    **/
    _count?: true | Drum_distillationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Drum_distillationsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Drum_distillationsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Drum_distillationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Drum_distillationsMaxAggregateInputType
  }

  export type GetDrum_distillationsAggregateType<T extends Drum_distillationsAggregateArgs> = {
        [P in keyof T & keyof AggregateDrum_distillations]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDrum_distillations[P]>
      : GetScalarType<T[P], AggregateDrum_distillations[P]>
  }




  export type drum_distillationsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: drum_distillationsWhereInput
    orderBy?: drum_distillationsOrderByWithAggregationInput | drum_distillationsOrderByWithAggregationInput[]
    by: Drum_distillationsScalarFieldEnum[] | Drum_distillationsScalarFieldEnum
    having?: drum_distillationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Drum_distillationsCountAggregateInputType | true
    _avg?: Drum_distillationsAvgAggregateInputType
    _sum?: Drum_distillationsSumAggregateInputType
    _min?: Drum_distillationsMinAggregateInputType
    _max?: Drum_distillationsMaxAggregateInputType
  }

  export type Drum_distillationsGroupByOutputType = {
    drum_id: number
    distillation_id: number
    fraction_used: Decimal
    _count: Drum_distillationsCountAggregateOutputType | null
    _avg: Drum_distillationsAvgAggregateOutputType | null
    _sum: Drum_distillationsSumAggregateOutputType | null
    _min: Drum_distillationsMinAggregateOutputType | null
    _max: Drum_distillationsMaxAggregateOutputType | null
  }

  type GetDrum_distillationsGroupByPayload<T extends drum_distillationsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Drum_distillationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Drum_distillationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Drum_distillationsGroupByOutputType[P]>
            : GetScalarType<T[P], Drum_distillationsGroupByOutputType[P]>
        }
      >
    >


  export type drum_distillationsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    drum_id?: boolean
    distillation_id?: boolean
    fraction_used?: boolean
    distillations?: boolean | distillationsDefaultArgs<ExtArgs>
    new_drums?: boolean | new_drumsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["drum_distillations"]>

  export type drum_distillationsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    drum_id?: boolean
    distillation_id?: boolean
    fraction_used?: boolean
    distillations?: boolean | distillationsDefaultArgs<ExtArgs>
    new_drums?: boolean | new_drumsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["drum_distillations"]>

  export type drum_distillationsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    drum_id?: boolean
    distillation_id?: boolean
    fraction_used?: boolean
    distillations?: boolean | distillationsDefaultArgs<ExtArgs>
    new_drums?: boolean | new_drumsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["drum_distillations"]>

  export type drum_distillationsSelectScalar = {
    drum_id?: boolean
    distillation_id?: boolean
    fraction_used?: boolean
  }

  export type drum_distillationsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"drum_id" | "distillation_id" | "fraction_used", ExtArgs["result"]["drum_distillations"]>
  export type drum_distillationsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    distillations?: boolean | distillationsDefaultArgs<ExtArgs>
    new_drums?: boolean | new_drumsDefaultArgs<ExtArgs>
  }
  export type drum_distillationsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    distillations?: boolean | distillationsDefaultArgs<ExtArgs>
    new_drums?: boolean | new_drumsDefaultArgs<ExtArgs>
  }
  export type drum_distillationsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    distillations?: boolean | distillationsDefaultArgs<ExtArgs>
    new_drums?: boolean | new_drumsDefaultArgs<ExtArgs>
  }

  export type $drum_distillationsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "drum_distillations"
    objects: {
      distillations: Prisma.$distillationsPayload<ExtArgs>
      new_drums: Prisma.$new_drumsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      drum_id: number
      distillation_id: number
      fraction_used: Prisma.Decimal
    }, ExtArgs["result"]["drum_distillations"]>
    composites: {}
  }

  type drum_distillationsGetPayload<S extends boolean | null | undefined | drum_distillationsDefaultArgs> = $Result.GetResult<Prisma.$drum_distillationsPayload, S>

  type drum_distillationsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<drum_distillationsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Drum_distillationsCountAggregateInputType | true
    }

  export interface drum_distillationsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['drum_distillations'], meta: { name: 'drum_distillations' } }
    /**
     * Find zero or one Drum_distillations that matches the filter.
     * @param {drum_distillationsFindUniqueArgs} args - Arguments to find a Drum_distillations
     * @example
     * // Get one Drum_distillations
     * const drum_distillations = await prisma.drum_distillations.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends drum_distillationsFindUniqueArgs>(args: SelectSubset<T, drum_distillationsFindUniqueArgs<ExtArgs>>): Prisma__drum_distillationsClient<$Result.GetResult<Prisma.$drum_distillationsPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Drum_distillations that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {drum_distillationsFindUniqueOrThrowArgs} args - Arguments to find a Drum_distillations
     * @example
     * // Get one Drum_distillations
     * const drum_distillations = await prisma.drum_distillations.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends drum_distillationsFindUniqueOrThrowArgs>(args: SelectSubset<T, drum_distillationsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__drum_distillationsClient<$Result.GetResult<Prisma.$drum_distillationsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Drum_distillations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {drum_distillationsFindFirstArgs} args - Arguments to find a Drum_distillations
     * @example
     * // Get one Drum_distillations
     * const drum_distillations = await prisma.drum_distillations.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends drum_distillationsFindFirstArgs>(args?: SelectSubset<T, drum_distillationsFindFirstArgs<ExtArgs>>): Prisma__drum_distillationsClient<$Result.GetResult<Prisma.$drum_distillationsPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Drum_distillations that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {drum_distillationsFindFirstOrThrowArgs} args - Arguments to find a Drum_distillations
     * @example
     * // Get one Drum_distillations
     * const drum_distillations = await prisma.drum_distillations.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends drum_distillationsFindFirstOrThrowArgs>(args?: SelectSubset<T, drum_distillationsFindFirstOrThrowArgs<ExtArgs>>): Prisma__drum_distillationsClient<$Result.GetResult<Prisma.$drum_distillationsPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Drum_distillations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {drum_distillationsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Drum_distillations
     * const drum_distillations = await prisma.drum_distillations.findMany()
     * 
     * // Get first 10 Drum_distillations
     * const drum_distillations = await prisma.drum_distillations.findMany({ take: 10 })
     * 
     * // Only select the `drum_id`
     * const drum_distillationsWithDrum_idOnly = await prisma.drum_distillations.findMany({ select: { drum_id: true } })
     * 
     */
    findMany<T extends drum_distillationsFindManyArgs>(args?: SelectSubset<T, drum_distillationsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$drum_distillationsPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Drum_distillations.
     * @param {drum_distillationsCreateArgs} args - Arguments to create a Drum_distillations.
     * @example
     * // Create one Drum_distillations
     * const Drum_distillations = await prisma.drum_distillations.create({
     *   data: {
     *     // ... data to create a Drum_distillations
     *   }
     * })
     * 
     */
    create<T extends drum_distillationsCreateArgs>(args: SelectSubset<T, drum_distillationsCreateArgs<ExtArgs>>): Prisma__drum_distillationsClient<$Result.GetResult<Prisma.$drum_distillationsPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Drum_distillations.
     * @param {drum_distillationsCreateManyArgs} args - Arguments to create many Drum_distillations.
     * @example
     * // Create many Drum_distillations
     * const drum_distillations = await prisma.drum_distillations.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends drum_distillationsCreateManyArgs>(args?: SelectSubset<T, drum_distillationsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Drum_distillations and returns the data saved in the database.
     * @param {drum_distillationsCreateManyAndReturnArgs} args - Arguments to create many Drum_distillations.
     * @example
     * // Create many Drum_distillations
     * const drum_distillations = await prisma.drum_distillations.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Drum_distillations and only return the `drum_id`
     * const drum_distillationsWithDrum_idOnly = await prisma.drum_distillations.createManyAndReturn({
     *   select: { drum_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends drum_distillationsCreateManyAndReturnArgs>(args?: SelectSubset<T, drum_distillationsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$drum_distillationsPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Drum_distillations.
     * @param {drum_distillationsDeleteArgs} args - Arguments to delete one Drum_distillations.
     * @example
     * // Delete one Drum_distillations
     * const Drum_distillations = await prisma.drum_distillations.delete({
     *   where: {
     *     // ... filter to delete one Drum_distillations
     *   }
     * })
     * 
     */
    delete<T extends drum_distillationsDeleteArgs>(args: SelectSubset<T, drum_distillationsDeleteArgs<ExtArgs>>): Prisma__drum_distillationsClient<$Result.GetResult<Prisma.$drum_distillationsPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Drum_distillations.
     * @param {drum_distillationsUpdateArgs} args - Arguments to update one Drum_distillations.
     * @example
     * // Update one Drum_distillations
     * const drum_distillations = await prisma.drum_distillations.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends drum_distillationsUpdateArgs>(args: SelectSubset<T, drum_distillationsUpdateArgs<ExtArgs>>): Prisma__drum_distillationsClient<$Result.GetResult<Prisma.$drum_distillationsPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Drum_distillations.
     * @param {drum_distillationsDeleteManyArgs} args - Arguments to filter Drum_distillations to delete.
     * @example
     * // Delete a few Drum_distillations
     * const { count } = await prisma.drum_distillations.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends drum_distillationsDeleteManyArgs>(args?: SelectSubset<T, drum_distillationsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Drum_distillations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {drum_distillationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Drum_distillations
     * const drum_distillations = await prisma.drum_distillations.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends drum_distillationsUpdateManyArgs>(args: SelectSubset<T, drum_distillationsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Drum_distillations and returns the data updated in the database.
     * @param {drum_distillationsUpdateManyAndReturnArgs} args - Arguments to update many Drum_distillations.
     * @example
     * // Update many Drum_distillations
     * const drum_distillations = await prisma.drum_distillations.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Drum_distillations and only return the `drum_id`
     * const drum_distillationsWithDrum_idOnly = await prisma.drum_distillations.updateManyAndReturn({
     *   select: { drum_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends drum_distillationsUpdateManyAndReturnArgs>(args: SelectSubset<T, drum_distillationsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$drum_distillationsPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Drum_distillations.
     * @param {drum_distillationsUpsertArgs} args - Arguments to update or create a Drum_distillations.
     * @example
     * // Update or create a Drum_distillations
     * const drum_distillations = await prisma.drum_distillations.upsert({
     *   create: {
     *     // ... data to create a Drum_distillations
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Drum_distillations we want to update
     *   }
     * })
     */
    upsert<T extends drum_distillationsUpsertArgs>(args: SelectSubset<T, drum_distillationsUpsertArgs<ExtArgs>>): Prisma__drum_distillationsClient<$Result.GetResult<Prisma.$drum_distillationsPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Drum_distillations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {drum_distillationsCountArgs} args - Arguments to filter Drum_distillations to count.
     * @example
     * // Count the number of Drum_distillations
     * const count = await prisma.drum_distillations.count({
     *   where: {
     *     // ... the filter for the Drum_distillations we want to count
     *   }
     * })
    **/
    count<T extends drum_distillationsCountArgs>(
      args?: Subset<T, drum_distillationsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Drum_distillationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Drum_distillations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Drum_distillationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Drum_distillationsAggregateArgs>(args: Subset<T, Drum_distillationsAggregateArgs>): Prisma.PrismaPromise<GetDrum_distillationsAggregateType<T>>

    /**
     * Group by Drum_distillations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {drum_distillationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends drum_distillationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: drum_distillationsGroupByArgs['orderBy'] }
        : { orderBy?: drum_distillationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, drum_distillationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDrum_distillationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the drum_distillations model
   */
  readonly fields: drum_distillationsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for drum_distillations.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__drum_distillationsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    distillations<T extends distillationsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, distillationsDefaultArgs<ExtArgs>>): Prisma__distillationsClient<$Result.GetResult<Prisma.$distillationsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    new_drums<T extends new_drumsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, new_drumsDefaultArgs<ExtArgs>>): Prisma__new_drumsClient<$Result.GetResult<Prisma.$new_drumsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the drum_distillations model
   */ 
  interface drum_distillationsFieldRefs {
    readonly drum_id: FieldRef<"drum_distillations", 'Int'>
    readonly distillation_id: FieldRef<"drum_distillations", 'Int'>
    readonly fraction_used: FieldRef<"drum_distillations", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * drum_distillations findUnique
   */
  export type drum_distillationsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the drum_distillations
     */
    select?: drum_distillationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the drum_distillations
     */
    omit?: drum_distillationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: drum_distillationsInclude<ExtArgs> | null
    /**
     * Filter, which drum_distillations to fetch.
     */
    where: drum_distillationsWhereUniqueInput
  }

  /**
   * drum_distillations findUniqueOrThrow
   */
  export type drum_distillationsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the drum_distillations
     */
    select?: drum_distillationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the drum_distillations
     */
    omit?: drum_distillationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: drum_distillationsInclude<ExtArgs> | null
    /**
     * Filter, which drum_distillations to fetch.
     */
    where: drum_distillationsWhereUniqueInput
  }

  /**
   * drum_distillations findFirst
   */
  export type drum_distillationsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the drum_distillations
     */
    select?: drum_distillationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the drum_distillations
     */
    omit?: drum_distillationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: drum_distillationsInclude<ExtArgs> | null
    /**
     * Filter, which drum_distillations to fetch.
     */
    where?: drum_distillationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of drum_distillations to fetch.
     */
    orderBy?: drum_distillationsOrderByWithRelationInput | drum_distillationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for drum_distillations.
     */
    cursor?: drum_distillationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` drum_distillations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` drum_distillations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of drum_distillations.
     */
    distinct?: Drum_distillationsScalarFieldEnum | Drum_distillationsScalarFieldEnum[]
  }

  /**
   * drum_distillations findFirstOrThrow
   */
  export type drum_distillationsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the drum_distillations
     */
    select?: drum_distillationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the drum_distillations
     */
    omit?: drum_distillationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: drum_distillationsInclude<ExtArgs> | null
    /**
     * Filter, which drum_distillations to fetch.
     */
    where?: drum_distillationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of drum_distillations to fetch.
     */
    orderBy?: drum_distillationsOrderByWithRelationInput | drum_distillationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for drum_distillations.
     */
    cursor?: drum_distillationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` drum_distillations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` drum_distillations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of drum_distillations.
     */
    distinct?: Drum_distillationsScalarFieldEnum | Drum_distillationsScalarFieldEnum[]
  }

  /**
   * drum_distillations findMany
   */
  export type drum_distillationsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the drum_distillations
     */
    select?: drum_distillationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the drum_distillations
     */
    omit?: drum_distillationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: drum_distillationsInclude<ExtArgs> | null
    /**
     * Filter, which drum_distillations to fetch.
     */
    where?: drum_distillationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of drum_distillations to fetch.
     */
    orderBy?: drum_distillationsOrderByWithRelationInput | drum_distillationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing drum_distillations.
     */
    cursor?: drum_distillationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` drum_distillations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` drum_distillations.
     */
    skip?: number
    distinct?: Drum_distillationsScalarFieldEnum | Drum_distillationsScalarFieldEnum[]
  }

  /**
   * drum_distillations create
   */
  export type drum_distillationsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the drum_distillations
     */
    select?: drum_distillationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the drum_distillations
     */
    omit?: drum_distillationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: drum_distillationsInclude<ExtArgs> | null
    /**
     * The data needed to create a drum_distillations.
     */
    data: XOR<drum_distillationsCreateInput, drum_distillationsUncheckedCreateInput>
  }

  /**
   * drum_distillations createMany
   */
  export type drum_distillationsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many drum_distillations.
     */
    data: drum_distillationsCreateManyInput | drum_distillationsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * drum_distillations createManyAndReturn
   */
  export type drum_distillationsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the drum_distillations
     */
    select?: drum_distillationsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the drum_distillations
     */
    omit?: drum_distillationsOmit<ExtArgs> | null
    /**
     * The data used to create many drum_distillations.
     */
    data: drum_distillationsCreateManyInput | drum_distillationsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: drum_distillationsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * drum_distillations update
   */
  export type drum_distillationsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the drum_distillations
     */
    select?: drum_distillationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the drum_distillations
     */
    omit?: drum_distillationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: drum_distillationsInclude<ExtArgs> | null
    /**
     * The data needed to update a drum_distillations.
     */
    data: XOR<drum_distillationsUpdateInput, drum_distillationsUncheckedUpdateInput>
    /**
     * Choose, which drum_distillations to update.
     */
    where: drum_distillationsWhereUniqueInput
  }

  /**
   * drum_distillations updateMany
   */
  export type drum_distillationsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update drum_distillations.
     */
    data: XOR<drum_distillationsUpdateManyMutationInput, drum_distillationsUncheckedUpdateManyInput>
    /**
     * Filter which drum_distillations to update
     */
    where?: drum_distillationsWhereInput
  }

  /**
   * drum_distillations updateManyAndReturn
   */
  export type drum_distillationsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the drum_distillations
     */
    select?: drum_distillationsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the drum_distillations
     */
    omit?: drum_distillationsOmit<ExtArgs> | null
    /**
     * The data used to update drum_distillations.
     */
    data: XOR<drum_distillationsUpdateManyMutationInput, drum_distillationsUncheckedUpdateManyInput>
    /**
     * Filter which drum_distillations to update
     */
    where?: drum_distillationsWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: drum_distillationsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * drum_distillations upsert
   */
  export type drum_distillationsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the drum_distillations
     */
    select?: drum_distillationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the drum_distillations
     */
    omit?: drum_distillationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: drum_distillationsInclude<ExtArgs> | null
    /**
     * The filter to search for the drum_distillations to update in case it exists.
     */
    where: drum_distillationsWhereUniqueInput
    /**
     * In case the drum_distillations found by the `where` argument doesn't exist, create a new drum_distillations with this data.
     */
    create: XOR<drum_distillationsCreateInput, drum_distillationsUncheckedCreateInput>
    /**
     * In case the drum_distillations was found with the provided `where` argument, update it with this data.
     */
    update: XOR<drum_distillationsUpdateInput, drum_distillationsUncheckedUpdateInput>
  }

  /**
   * drum_distillations delete
   */
  export type drum_distillationsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the drum_distillations
     */
    select?: drum_distillationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the drum_distillations
     */
    omit?: drum_distillationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: drum_distillationsInclude<ExtArgs> | null
    /**
     * Filter which drum_distillations to delete.
     */
    where: drum_distillationsWhereUniqueInput
  }

  /**
   * drum_distillations deleteMany
   */
  export type drum_distillationsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which drum_distillations to delete
     */
    where?: drum_distillationsWhereInput
  }

  /**
   * drum_distillations without action
   */
  export type drum_distillationsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the drum_distillations
     */
    select?: drum_distillationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the drum_distillations
     */
    omit?: drum_distillationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: drum_distillationsInclude<ExtArgs> | null
  }


  /**
   * Model imports
   */

  export type AggregateImports = {
    _count: ImportsCountAggregateOutputType | null
    _avg: ImportsAvgAggregateOutputType | null
    _sum: ImportsSumAggregateOutputType | null
    _min: ImportsMinAggregateOutputType | null
    _max: ImportsMaxAggregateOutputType | null
  }

  export type ImportsAvgAggregateOutputType = {
    import_id: number | null
    quantity: number | null
  }

  export type ImportsSumAggregateOutputType = {
    import_id: number | null
    quantity: number | null
  }

  export type ImportsMinAggregateOutputType = {
    import_id: number | null
    supplier_name: string | null
    material_type: string | null
    quantity: number | null
    supplier_batch_code: string | null
    date_ordered: Date | null
    date_received: Date | null
    created_at: Date | null
    updated_at: Date | null
    notes: string | null
    location: string | null
  }

  export type ImportsMaxAggregateOutputType = {
    import_id: number | null
    supplier_name: string | null
    material_type: string | null
    quantity: number | null
    supplier_batch_code: string | null
    date_ordered: Date | null
    date_received: Date | null
    created_at: Date | null
    updated_at: Date | null
    notes: string | null
    location: string | null
  }

  export type ImportsCountAggregateOutputType = {
    import_id: number
    supplier_name: number
    material_type: number
    quantity: number
    supplier_batch_code: number
    date_ordered: number
    date_received: number
    created_at: number
    updated_at: number
    notes: number
    location: number
    _all: number
  }


  export type ImportsAvgAggregateInputType = {
    import_id?: true
    quantity?: true
  }

  export type ImportsSumAggregateInputType = {
    import_id?: true
    quantity?: true
  }

  export type ImportsMinAggregateInputType = {
    import_id?: true
    supplier_name?: true
    material_type?: true
    quantity?: true
    supplier_batch_code?: true
    date_ordered?: true
    date_received?: true
    created_at?: true
    updated_at?: true
    notes?: true
    location?: true
  }

  export type ImportsMaxAggregateInputType = {
    import_id?: true
    supplier_name?: true
    material_type?: true
    quantity?: true
    supplier_batch_code?: true
    date_ordered?: true
    date_received?: true
    created_at?: true
    updated_at?: true
    notes?: true
    location?: true
  }

  export type ImportsCountAggregateInputType = {
    import_id?: true
    supplier_name?: true
    material_type?: true
    quantity?: true
    supplier_batch_code?: true
    date_ordered?: true
    date_received?: true
    created_at?: true
    updated_at?: true
    notes?: true
    location?: true
    _all?: true
  }

  export type ImportsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which imports to aggregate.
     */
    where?: importsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of imports to fetch.
     */
    orderBy?: importsOrderByWithRelationInput | importsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: importsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` imports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` imports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned imports
    **/
    _count?: true | ImportsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ImportsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ImportsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImportsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImportsMaxAggregateInputType
  }

  export type GetImportsAggregateType<T extends ImportsAggregateArgs> = {
        [P in keyof T & keyof AggregateImports]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImports[P]>
      : GetScalarType<T[P], AggregateImports[P]>
  }




  export type importsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: importsWhereInput
    orderBy?: importsOrderByWithAggregationInput | importsOrderByWithAggregationInput[]
    by: ImportsScalarFieldEnum[] | ImportsScalarFieldEnum
    having?: importsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImportsCountAggregateInputType | true
    _avg?: ImportsAvgAggregateInputType
    _sum?: ImportsSumAggregateInputType
    _min?: ImportsMinAggregateInputType
    _max?: ImportsMaxAggregateInputType
  }

  export type ImportsGroupByOutputType = {
    import_id: number
    supplier_name: string
    material_type: string
    quantity: number
    supplier_batch_code: string | null
    date_ordered: Date | null
    date_received: Date
    created_at: Date | null
    updated_at: Date | null
    notes: string | null
    location: string | null
    _count: ImportsCountAggregateOutputType | null
    _avg: ImportsAvgAggregateOutputType | null
    _sum: ImportsSumAggregateOutputType | null
    _min: ImportsMinAggregateOutputType | null
    _max: ImportsMaxAggregateOutputType | null
  }

  type GetImportsGroupByPayload<T extends importsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ImportsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImportsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImportsGroupByOutputType[P]>
            : GetScalarType<T[P], ImportsGroupByOutputType[P]>
        }
      >
    >


  export type importsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    import_id?: boolean
    supplier_name?: boolean
    material_type?: boolean
    quantity?: boolean
    supplier_batch_code?: boolean
    date_ordered?: boolean
    date_received?: boolean
    created_at?: boolean
    updated_at?: boolean
    notes?: boolean
    location?: boolean
  }, ExtArgs["result"]["imports"]>

  export type importsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    import_id?: boolean
    supplier_name?: boolean
    material_type?: boolean
    quantity?: boolean
    supplier_batch_code?: boolean
    date_ordered?: boolean
    date_received?: boolean
    created_at?: boolean
    updated_at?: boolean
    notes?: boolean
    location?: boolean
  }, ExtArgs["result"]["imports"]>

  export type importsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    import_id?: boolean
    supplier_name?: boolean
    material_type?: boolean
    quantity?: boolean
    supplier_batch_code?: boolean
    date_ordered?: boolean
    date_received?: boolean
    created_at?: boolean
    updated_at?: boolean
    notes?: boolean
    location?: boolean
  }, ExtArgs["result"]["imports"]>

  export type importsSelectScalar = {
    import_id?: boolean
    supplier_name?: boolean
    material_type?: boolean
    quantity?: boolean
    supplier_batch_code?: boolean
    date_ordered?: boolean
    date_received?: boolean
    created_at?: boolean
    updated_at?: boolean
    notes?: boolean
    location?: boolean
  }

  export type importsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"import_id" | "supplier_name" | "material_type" | "quantity" | "supplier_batch_code" | "date_ordered" | "date_received" | "created_at" | "updated_at" | "notes" | "location", ExtArgs["result"]["imports"]>

  export type $importsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "imports"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      import_id: number
      supplier_name: string
      material_type: string
      quantity: number
      supplier_batch_code: string | null
      date_ordered: Date | null
      date_received: Date
      created_at: Date | null
      updated_at: Date | null
      notes: string | null
      location: string | null
    }, ExtArgs["result"]["imports"]>
    composites: {}
  }

  type importsGetPayload<S extends boolean | null | undefined | importsDefaultArgs> = $Result.GetResult<Prisma.$importsPayload, S>

  type importsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<importsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ImportsCountAggregateInputType | true
    }

  export interface importsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['imports'], meta: { name: 'imports' } }
    /**
     * Find zero or one Imports that matches the filter.
     * @param {importsFindUniqueArgs} args - Arguments to find a Imports
     * @example
     * // Get one Imports
     * const imports = await prisma.imports.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends importsFindUniqueArgs>(args: SelectSubset<T, importsFindUniqueArgs<ExtArgs>>): Prisma__importsClient<$Result.GetResult<Prisma.$importsPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Imports that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {importsFindUniqueOrThrowArgs} args - Arguments to find a Imports
     * @example
     * // Get one Imports
     * const imports = await prisma.imports.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends importsFindUniqueOrThrowArgs>(args: SelectSubset<T, importsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__importsClient<$Result.GetResult<Prisma.$importsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Imports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {importsFindFirstArgs} args - Arguments to find a Imports
     * @example
     * // Get one Imports
     * const imports = await prisma.imports.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends importsFindFirstArgs>(args?: SelectSubset<T, importsFindFirstArgs<ExtArgs>>): Prisma__importsClient<$Result.GetResult<Prisma.$importsPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Imports that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {importsFindFirstOrThrowArgs} args - Arguments to find a Imports
     * @example
     * // Get one Imports
     * const imports = await prisma.imports.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends importsFindFirstOrThrowArgs>(args?: SelectSubset<T, importsFindFirstOrThrowArgs<ExtArgs>>): Prisma__importsClient<$Result.GetResult<Prisma.$importsPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Imports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {importsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Imports
     * const imports = await prisma.imports.findMany()
     * 
     * // Get first 10 Imports
     * const imports = await prisma.imports.findMany({ take: 10 })
     * 
     * // Only select the `import_id`
     * const importsWithImport_idOnly = await prisma.imports.findMany({ select: { import_id: true } })
     * 
     */
    findMany<T extends importsFindManyArgs>(args?: SelectSubset<T, importsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$importsPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Imports.
     * @param {importsCreateArgs} args - Arguments to create a Imports.
     * @example
     * // Create one Imports
     * const Imports = await prisma.imports.create({
     *   data: {
     *     // ... data to create a Imports
     *   }
     * })
     * 
     */
    create<T extends importsCreateArgs>(args: SelectSubset<T, importsCreateArgs<ExtArgs>>): Prisma__importsClient<$Result.GetResult<Prisma.$importsPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Imports.
     * @param {importsCreateManyArgs} args - Arguments to create many Imports.
     * @example
     * // Create many Imports
     * const imports = await prisma.imports.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends importsCreateManyArgs>(args?: SelectSubset<T, importsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Imports and returns the data saved in the database.
     * @param {importsCreateManyAndReturnArgs} args - Arguments to create many Imports.
     * @example
     * // Create many Imports
     * const imports = await prisma.imports.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Imports and only return the `import_id`
     * const importsWithImport_idOnly = await prisma.imports.createManyAndReturn({
     *   select: { import_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends importsCreateManyAndReturnArgs>(args?: SelectSubset<T, importsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$importsPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Imports.
     * @param {importsDeleteArgs} args - Arguments to delete one Imports.
     * @example
     * // Delete one Imports
     * const Imports = await prisma.imports.delete({
     *   where: {
     *     // ... filter to delete one Imports
     *   }
     * })
     * 
     */
    delete<T extends importsDeleteArgs>(args: SelectSubset<T, importsDeleteArgs<ExtArgs>>): Prisma__importsClient<$Result.GetResult<Prisma.$importsPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Imports.
     * @param {importsUpdateArgs} args - Arguments to update one Imports.
     * @example
     * // Update one Imports
     * const imports = await prisma.imports.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends importsUpdateArgs>(args: SelectSubset<T, importsUpdateArgs<ExtArgs>>): Prisma__importsClient<$Result.GetResult<Prisma.$importsPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Imports.
     * @param {importsDeleteManyArgs} args - Arguments to filter Imports to delete.
     * @example
     * // Delete a few Imports
     * const { count } = await prisma.imports.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends importsDeleteManyArgs>(args?: SelectSubset<T, importsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Imports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {importsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Imports
     * const imports = await prisma.imports.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends importsUpdateManyArgs>(args: SelectSubset<T, importsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Imports and returns the data updated in the database.
     * @param {importsUpdateManyAndReturnArgs} args - Arguments to update many Imports.
     * @example
     * // Update many Imports
     * const imports = await prisma.imports.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Imports and only return the `import_id`
     * const importsWithImport_idOnly = await prisma.imports.updateManyAndReturn({
     *   select: { import_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends importsUpdateManyAndReturnArgs>(args: SelectSubset<T, importsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$importsPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Imports.
     * @param {importsUpsertArgs} args - Arguments to update or create a Imports.
     * @example
     * // Update or create a Imports
     * const imports = await prisma.imports.upsert({
     *   create: {
     *     // ... data to create a Imports
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Imports we want to update
     *   }
     * })
     */
    upsert<T extends importsUpsertArgs>(args: SelectSubset<T, importsUpsertArgs<ExtArgs>>): Prisma__importsClient<$Result.GetResult<Prisma.$importsPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Imports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {importsCountArgs} args - Arguments to filter Imports to count.
     * @example
     * // Count the number of Imports
     * const count = await prisma.imports.count({
     *   where: {
     *     // ... the filter for the Imports we want to count
     *   }
     * })
    **/
    count<T extends importsCountArgs>(
      args?: Subset<T, importsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImportsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Imports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImportsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImportsAggregateArgs>(args: Subset<T, ImportsAggregateArgs>): Prisma.PrismaPromise<GetImportsAggregateType<T>>

    /**
     * Group by Imports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {importsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends importsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: importsGroupByArgs['orderBy'] }
        : { orderBy?: importsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, importsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImportsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the imports model
   */
  readonly fields: importsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for imports.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__importsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the imports model
   */ 
  interface importsFieldRefs {
    readonly import_id: FieldRef<"imports", 'Int'>
    readonly supplier_name: FieldRef<"imports", 'String'>
    readonly material_type: FieldRef<"imports", 'String'>
    readonly quantity: FieldRef<"imports", 'Int'>
    readonly supplier_batch_code: FieldRef<"imports", 'String'>
    readonly date_ordered: FieldRef<"imports", 'DateTime'>
    readonly date_received: FieldRef<"imports", 'DateTime'>
    readonly created_at: FieldRef<"imports", 'DateTime'>
    readonly updated_at: FieldRef<"imports", 'DateTime'>
    readonly notes: FieldRef<"imports", 'String'>
    readonly location: FieldRef<"imports", 'String'>
  }
    

  // Custom InputTypes
  /**
   * imports findUnique
   */
  export type importsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imports
     */
    select?: importsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the imports
     */
    omit?: importsOmit<ExtArgs> | null
    /**
     * Filter, which imports to fetch.
     */
    where: importsWhereUniqueInput
  }

  /**
   * imports findUniqueOrThrow
   */
  export type importsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imports
     */
    select?: importsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the imports
     */
    omit?: importsOmit<ExtArgs> | null
    /**
     * Filter, which imports to fetch.
     */
    where: importsWhereUniqueInput
  }

  /**
   * imports findFirst
   */
  export type importsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imports
     */
    select?: importsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the imports
     */
    omit?: importsOmit<ExtArgs> | null
    /**
     * Filter, which imports to fetch.
     */
    where?: importsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of imports to fetch.
     */
    orderBy?: importsOrderByWithRelationInput | importsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for imports.
     */
    cursor?: importsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` imports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` imports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of imports.
     */
    distinct?: ImportsScalarFieldEnum | ImportsScalarFieldEnum[]
  }

  /**
   * imports findFirstOrThrow
   */
  export type importsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imports
     */
    select?: importsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the imports
     */
    omit?: importsOmit<ExtArgs> | null
    /**
     * Filter, which imports to fetch.
     */
    where?: importsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of imports to fetch.
     */
    orderBy?: importsOrderByWithRelationInput | importsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for imports.
     */
    cursor?: importsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` imports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` imports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of imports.
     */
    distinct?: ImportsScalarFieldEnum | ImportsScalarFieldEnum[]
  }

  /**
   * imports findMany
   */
  export type importsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imports
     */
    select?: importsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the imports
     */
    omit?: importsOmit<ExtArgs> | null
    /**
     * Filter, which imports to fetch.
     */
    where?: importsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of imports to fetch.
     */
    orderBy?: importsOrderByWithRelationInput | importsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing imports.
     */
    cursor?: importsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` imports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` imports.
     */
    skip?: number
    distinct?: ImportsScalarFieldEnum | ImportsScalarFieldEnum[]
  }

  /**
   * imports create
   */
  export type importsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imports
     */
    select?: importsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the imports
     */
    omit?: importsOmit<ExtArgs> | null
    /**
     * The data needed to create a imports.
     */
    data: XOR<importsCreateInput, importsUncheckedCreateInput>
  }

  /**
   * imports createMany
   */
  export type importsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many imports.
     */
    data: importsCreateManyInput | importsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * imports createManyAndReturn
   */
  export type importsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imports
     */
    select?: importsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the imports
     */
    omit?: importsOmit<ExtArgs> | null
    /**
     * The data used to create many imports.
     */
    data: importsCreateManyInput | importsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * imports update
   */
  export type importsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imports
     */
    select?: importsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the imports
     */
    omit?: importsOmit<ExtArgs> | null
    /**
     * The data needed to update a imports.
     */
    data: XOR<importsUpdateInput, importsUncheckedUpdateInput>
    /**
     * Choose, which imports to update.
     */
    where: importsWhereUniqueInput
  }

  /**
   * imports updateMany
   */
  export type importsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update imports.
     */
    data: XOR<importsUpdateManyMutationInput, importsUncheckedUpdateManyInput>
    /**
     * Filter which imports to update
     */
    where?: importsWhereInput
  }

  /**
   * imports updateManyAndReturn
   */
  export type importsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imports
     */
    select?: importsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the imports
     */
    omit?: importsOmit<ExtArgs> | null
    /**
     * The data used to update imports.
     */
    data: XOR<importsUpdateManyMutationInput, importsUncheckedUpdateManyInput>
    /**
     * Filter which imports to update
     */
    where?: importsWhereInput
  }

  /**
   * imports upsert
   */
  export type importsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imports
     */
    select?: importsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the imports
     */
    omit?: importsOmit<ExtArgs> | null
    /**
     * The filter to search for the imports to update in case it exists.
     */
    where: importsWhereUniqueInput
    /**
     * In case the imports found by the `where` argument doesn't exist, create a new imports with this data.
     */
    create: XOR<importsCreateInput, importsUncheckedCreateInput>
    /**
     * In case the imports was found with the provided `where` argument, update it with this data.
     */
    update: XOR<importsUpdateInput, importsUncheckedUpdateInput>
  }

  /**
   * imports delete
   */
  export type importsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imports
     */
    select?: importsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the imports
     */
    omit?: importsOmit<ExtArgs> | null
    /**
     * Filter which imports to delete.
     */
    where: importsWhereUniqueInput
  }

  /**
   * imports deleteMany
   */
  export type importsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which imports to delete
     */
    where?: importsWhereInput
  }

  /**
   * imports without action
   */
  export type importsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imports
     */
    select?: importsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the imports
     */
    omit?: importsOmit<ExtArgs> | null
  }


  /**
   * Model new_drums
   */

  export type AggregateNew_drums = {
    _count: New_drumsCountAggregateOutputType | null
    _avg: New_drumsAvgAggregateOutputType | null
    _sum: New_drumsSumAggregateOutputType | null
    _min: New_drumsMinAggregateOutputType | null
    _max: New_drumsMaxAggregateOutputType | null
  }

  export type New_drumsAvgAggregateOutputType = {
    drum_id: number | null
    import_id: number | null
    order_id: number | null
  }

  export type New_drumsSumAggregateOutputType = {
    drum_id: number | null
    import_id: number | null
    order_id: number | null
  }

  export type New_drumsMinAggregateOutputType = {
    drum_id: number | null
    import_id: number | null
    material: string | null
    date_processed: Date | null
    status: string | null
    location: string | null
    created_at: Date | null
    updated_at: Date | null
    order_id: number | null
  }

  export type New_drumsMaxAggregateOutputType = {
    drum_id: number | null
    import_id: number | null
    material: string | null
    date_processed: Date | null
    status: string | null
    location: string | null
    created_at: Date | null
    updated_at: Date | null
    order_id: number | null
  }

  export type New_drumsCountAggregateOutputType = {
    drum_id: number
    import_id: number
    material: number
    date_processed: number
    status: number
    location: number
    created_at: number
    updated_at: number
    order_id: number
    _all: number
  }


  export type New_drumsAvgAggregateInputType = {
    drum_id?: true
    import_id?: true
    order_id?: true
  }

  export type New_drumsSumAggregateInputType = {
    drum_id?: true
    import_id?: true
    order_id?: true
  }

  export type New_drumsMinAggregateInputType = {
    drum_id?: true
    import_id?: true
    material?: true
    date_processed?: true
    status?: true
    location?: true
    created_at?: true
    updated_at?: true
    order_id?: true
  }

  export type New_drumsMaxAggregateInputType = {
    drum_id?: true
    import_id?: true
    material?: true
    date_processed?: true
    status?: true
    location?: true
    created_at?: true
    updated_at?: true
    order_id?: true
  }

  export type New_drumsCountAggregateInputType = {
    drum_id?: true
    import_id?: true
    material?: true
    date_processed?: true
    status?: true
    location?: true
    created_at?: true
    updated_at?: true
    order_id?: true
    _all?: true
  }

  export type New_drumsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which new_drums to aggregate.
     */
    where?: new_drumsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of new_drums to fetch.
     */
    orderBy?: new_drumsOrderByWithRelationInput | new_drumsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: new_drumsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` new_drums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` new_drums.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned new_drums
    **/
    _count?: true | New_drumsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: New_drumsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: New_drumsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: New_drumsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: New_drumsMaxAggregateInputType
  }

  export type GetNew_drumsAggregateType<T extends New_drumsAggregateArgs> = {
        [P in keyof T & keyof AggregateNew_drums]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNew_drums[P]>
      : GetScalarType<T[P], AggregateNew_drums[P]>
  }




  export type new_drumsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: new_drumsWhereInput
    orderBy?: new_drumsOrderByWithAggregationInput | new_drumsOrderByWithAggregationInput[]
    by: New_drumsScalarFieldEnum[] | New_drumsScalarFieldEnum
    having?: new_drumsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: New_drumsCountAggregateInputType | true
    _avg?: New_drumsAvgAggregateInputType
    _sum?: New_drumsSumAggregateInputType
    _min?: New_drumsMinAggregateInputType
    _max?: New_drumsMaxAggregateInputType
  }

  export type New_drumsGroupByOutputType = {
    drum_id: number
    import_id: number | null
    material: string
    date_processed: Date | null
    status: string
    location: string | null
    created_at: Date | null
    updated_at: Date | null
    order_id: number | null
    _count: New_drumsCountAggregateOutputType | null
    _avg: New_drumsAvgAggregateOutputType | null
    _sum: New_drumsSumAggregateOutputType | null
    _min: New_drumsMinAggregateOutputType | null
    _max: New_drumsMaxAggregateOutputType | null
  }

  type GetNew_drumsGroupByPayload<T extends new_drumsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<New_drumsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof New_drumsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], New_drumsGroupByOutputType[P]>
            : GetScalarType<T[P], New_drumsGroupByOutputType[P]>
        }
      >
    >


  export type new_drumsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    drum_id?: boolean
    import_id?: boolean
    material?: boolean
    date_processed?: boolean
    status?: boolean
    location?: boolean
    created_at?: boolean
    updated_at?: boolean
    order_id?: boolean
    drum_distillations?: boolean | new_drums$drum_distillationsArgs<ExtArgs>
    orders?: boolean | new_drums$ordersArgs<ExtArgs>
    processes?: boolean | new_drums$processesArgs<ExtArgs>
    transactions?: boolean | new_drums$transactionsArgs<ExtArgs>
    _count?: boolean | New_drumsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["new_drums"]>

  export type new_drumsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    drum_id?: boolean
    import_id?: boolean
    material?: boolean
    date_processed?: boolean
    status?: boolean
    location?: boolean
    created_at?: boolean
    updated_at?: boolean
    order_id?: boolean
    orders?: boolean | new_drums$ordersArgs<ExtArgs>
  }, ExtArgs["result"]["new_drums"]>

  export type new_drumsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    drum_id?: boolean
    import_id?: boolean
    material?: boolean
    date_processed?: boolean
    status?: boolean
    location?: boolean
    created_at?: boolean
    updated_at?: boolean
    order_id?: boolean
    orders?: boolean | new_drums$ordersArgs<ExtArgs>
  }, ExtArgs["result"]["new_drums"]>

  export type new_drumsSelectScalar = {
    drum_id?: boolean
    import_id?: boolean
    material?: boolean
    date_processed?: boolean
    status?: boolean
    location?: boolean
    created_at?: boolean
    updated_at?: boolean
    order_id?: boolean
  }

  export type new_drumsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"drum_id" | "import_id" | "material" | "date_processed" | "status" | "location" | "created_at" | "updated_at" | "order_id", ExtArgs["result"]["new_drums"]>
  export type new_drumsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    drum_distillations?: boolean | new_drums$drum_distillationsArgs<ExtArgs>
    orders?: boolean | new_drums$ordersArgs<ExtArgs>
    processes?: boolean | new_drums$processesArgs<ExtArgs>
    transactions?: boolean | new_drums$transactionsArgs<ExtArgs>
    _count?: boolean | New_drumsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type new_drumsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | new_drums$ordersArgs<ExtArgs>
  }
  export type new_drumsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | new_drums$ordersArgs<ExtArgs>
  }

  export type $new_drumsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "new_drums"
    objects: {
      drum_distillations: Prisma.$drum_distillationsPayload<ExtArgs>[]
      orders: Prisma.$ordersPayload<ExtArgs> | null
      processes: Prisma.$processesPayload<ExtArgs>[]
      transactions: Prisma.$transactionsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      drum_id: number
      import_id: number | null
      material: string
      date_processed: Date | null
      status: string
      location: string | null
      created_at: Date | null
      updated_at: Date | null
      order_id: number | null
    }, ExtArgs["result"]["new_drums"]>
    composites: {}
  }

  type new_drumsGetPayload<S extends boolean | null | undefined | new_drumsDefaultArgs> = $Result.GetResult<Prisma.$new_drumsPayload, S>

  type new_drumsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<new_drumsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: New_drumsCountAggregateInputType | true
    }

  export interface new_drumsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['new_drums'], meta: { name: 'new_drums' } }
    /**
     * Find zero or one New_drums that matches the filter.
     * @param {new_drumsFindUniqueArgs} args - Arguments to find a New_drums
     * @example
     * // Get one New_drums
     * const new_drums = await prisma.new_drums.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends new_drumsFindUniqueArgs>(args: SelectSubset<T, new_drumsFindUniqueArgs<ExtArgs>>): Prisma__new_drumsClient<$Result.GetResult<Prisma.$new_drumsPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one New_drums that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {new_drumsFindUniqueOrThrowArgs} args - Arguments to find a New_drums
     * @example
     * // Get one New_drums
     * const new_drums = await prisma.new_drums.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends new_drumsFindUniqueOrThrowArgs>(args: SelectSubset<T, new_drumsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__new_drumsClient<$Result.GetResult<Prisma.$new_drumsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first New_drums that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {new_drumsFindFirstArgs} args - Arguments to find a New_drums
     * @example
     * // Get one New_drums
     * const new_drums = await prisma.new_drums.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends new_drumsFindFirstArgs>(args?: SelectSubset<T, new_drumsFindFirstArgs<ExtArgs>>): Prisma__new_drumsClient<$Result.GetResult<Prisma.$new_drumsPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first New_drums that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {new_drumsFindFirstOrThrowArgs} args - Arguments to find a New_drums
     * @example
     * // Get one New_drums
     * const new_drums = await prisma.new_drums.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends new_drumsFindFirstOrThrowArgs>(args?: SelectSubset<T, new_drumsFindFirstOrThrowArgs<ExtArgs>>): Prisma__new_drumsClient<$Result.GetResult<Prisma.$new_drumsPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more New_drums that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {new_drumsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all New_drums
     * const new_drums = await prisma.new_drums.findMany()
     * 
     * // Get first 10 New_drums
     * const new_drums = await prisma.new_drums.findMany({ take: 10 })
     * 
     * // Only select the `drum_id`
     * const new_drumsWithDrum_idOnly = await prisma.new_drums.findMany({ select: { drum_id: true } })
     * 
     */
    findMany<T extends new_drumsFindManyArgs>(args?: SelectSubset<T, new_drumsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$new_drumsPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a New_drums.
     * @param {new_drumsCreateArgs} args - Arguments to create a New_drums.
     * @example
     * // Create one New_drums
     * const New_drums = await prisma.new_drums.create({
     *   data: {
     *     // ... data to create a New_drums
     *   }
     * })
     * 
     */
    create<T extends new_drumsCreateArgs>(args: SelectSubset<T, new_drumsCreateArgs<ExtArgs>>): Prisma__new_drumsClient<$Result.GetResult<Prisma.$new_drumsPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many New_drums.
     * @param {new_drumsCreateManyArgs} args - Arguments to create many New_drums.
     * @example
     * // Create many New_drums
     * const new_drums = await prisma.new_drums.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends new_drumsCreateManyArgs>(args?: SelectSubset<T, new_drumsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many New_drums and returns the data saved in the database.
     * @param {new_drumsCreateManyAndReturnArgs} args - Arguments to create many New_drums.
     * @example
     * // Create many New_drums
     * const new_drums = await prisma.new_drums.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many New_drums and only return the `drum_id`
     * const new_drumsWithDrum_idOnly = await prisma.new_drums.createManyAndReturn({
     *   select: { drum_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends new_drumsCreateManyAndReturnArgs>(args?: SelectSubset<T, new_drumsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$new_drumsPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a New_drums.
     * @param {new_drumsDeleteArgs} args - Arguments to delete one New_drums.
     * @example
     * // Delete one New_drums
     * const New_drums = await prisma.new_drums.delete({
     *   where: {
     *     // ... filter to delete one New_drums
     *   }
     * })
     * 
     */
    delete<T extends new_drumsDeleteArgs>(args: SelectSubset<T, new_drumsDeleteArgs<ExtArgs>>): Prisma__new_drumsClient<$Result.GetResult<Prisma.$new_drumsPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one New_drums.
     * @param {new_drumsUpdateArgs} args - Arguments to update one New_drums.
     * @example
     * // Update one New_drums
     * const new_drums = await prisma.new_drums.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends new_drumsUpdateArgs>(args: SelectSubset<T, new_drumsUpdateArgs<ExtArgs>>): Prisma__new_drumsClient<$Result.GetResult<Prisma.$new_drumsPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more New_drums.
     * @param {new_drumsDeleteManyArgs} args - Arguments to filter New_drums to delete.
     * @example
     * // Delete a few New_drums
     * const { count } = await prisma.new_drums.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends new_drumsDeleteManyArgs>(args?: SelectSubset<T, new_drumsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more New_drums.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {new_drumsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many New_drums
     * const new_drums = await prisma.new_drums.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends new_drumsUpdateManyArgs>(args: SelectSubset<T, new_drumsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more New_drums and returns the data updated in the database.
     * @param {new_drumsUpdateManyAndReturnArgs} args - Arguments to update many New_drums.
     * @example
     * // Update many New_drums
     * const new_drums = await prisma.new_drums.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more New_drums and only return the `drum_id`
     * const new_drumsWithDrum_idOnly = await prisma.new_drums.updateManyAndReturn({
     *   select: { drum_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends new_drumsUpdateManyAndReturnArgs>(args: SelectSubset<T, new_drumsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$new_drumsPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one New_drums.
     * @param {new_drumsUpsertArgs} args - Arguments to update or create a New_drums.
     * @example
     * // Update or create a New_drums
     * const new_drums = await prisma.new_drums.upsert({
     *   create: {
     *     // ... data to create a New_drums
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the New_drums we want to update
     *   }
     * })
     */
    upsert<T extends new_drumsUpsertArgs>(args: SelectSubset<T, new_drumsUpsertArgs<ExtArgs>>): Prisma__new_drumsClient<$Result.GetResult<Prisma.$new_drumsPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of New_drums.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {new_drumsCountArgs} args - Arguments to filter New_drums to count.
     * @example
     * // Count the number of New_drums
     * const count = await prisma.new_drums.count({
     *   where: {
     *     // ... the filter for the New_drums we want to count
     *   }
     * })
    **/
    count<T extends new_drumsCountArgs>(
      args?: Subset<T, new_drumsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], New_drumsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a New_drums.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {New_drumsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends New_drumsAggregateArgs>(args: Subset<T, New_drumsAggregateArgs>): Prisma.PrismaPromise<GetNew_drumsAggregateType<T>>

    /**
     * Group by New_drums.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {new_drumsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends new_drumsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: new_drumsGroupByArgs['orderBy'] }
        : { orderBy?: new_drumsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, new_drumsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNew_drumsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the new_drums model
   */
  readonly fields: new_drumsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for new_drums.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__new_drumsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    drum_distillations<T extends new_drums$drum_distillationsArgs<ExtArgs> = {}>(args?: Subset<T, new_drums$drum_distillationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$drum_distillationsPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    orders<T extends new_drums$ordersArgs<ExtArgs> = {}>(args?: Subset<T, new_drums$ordersArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    processes<T extends new_drums$processesArgs<ExtArgs> = {}>(args?: Subset<T, new_drums$processesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$processesPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    transactions<T extends new_drums$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, new_drums$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the new_drums model
   */ 
  interface new_drumsFieldRefs {
    readonly drum_id: FieldRef<"new_drums", 'Int'>
    readonly import_id: FieldRef<"new_drums", 'Int'>
    readonly material: FieldRef<"new_drums", 'String'>
    readonly date_processed: FieldRef<"new_drums", 'DateTime'>
    readonly status: FieldRef<"new_drums", 'String'>
    readonly location: FieldRef<"new_drums", 'String'>
    readonly created_at: FieldRef<"new_drums", 'DateTime'>
    readonly updated_at: FieldRef<"new_drums", 'DateTime'>
    readonly order_id: FieldRef<"new_drums", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * new_drums findUnique
   */
  export type new_drumsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the new_drums
     */
    select?: new_drumsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the new_drums
     */
    omit?: new_drumsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: new_drumsInclude<ExtArgs> | null
    /**
     * Filter, which new_drums to fetch.
     */
    where: new_drumsWhereUniqueInput
  }

  /**
   * new_drums findUniqueOrThrow
   */
  export type new_drumsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the new_drums
     */
    select?: new_drumsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the new_drums
     */
    omit?: new_drumsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: new_drumsInclude<ExtArgs> | null
    /**
     * Filter, which new_drums to fetch.
     */
    where: new_drumsWhereUniqueInput
  }

  /**
   * new_drums findFirst
   */
  export type new_drumsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the new_drums
     */
    select?: new_drumsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the new_drums
     */
    omit?: new_drumsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: new_drumsInclude<ExtArgs> | null
    /**
     * Filter, which new_drums to fetch.
     */
    where?: new_drumsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of new_drums to fetch.
     */
    orderBy?: new_drumsOrderByWithRelationInput | new_drumsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for new_drums.
     */
    cursor?: new_drumsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` new_drums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` new_drums.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of new_drums.
     */
    distinct?: New_drumsScalarFieldEnum | New_drumsScalarFieldEnum[]
  }

  /**
   * new_drums findFirstOrThrow
   */
  export type new_drumsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the new_drums
     */
    select?: new_drumsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the new_drums
     */
    omit?: new_drumsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: new_drumsInclude<ExtArgs> | null
    /**
     * Filter, which new_drums to fetch.
     */
    where?: new_drumsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of new_drums to fetch.
     */
    orderBy?: new_drumsOrderByWithRelationInput | new_drumsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for new_drums.
     */
    cursor?: new_drumsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` new_drums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` new_drums.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of new_drums.
     */
    distinct?: New_drumsScalarFieldEnum | New_drumsScalarFieldEnum[]
  }

  /**
   * new_drums findMany
   */
  export type new_drumsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the new_drums
     */
    select?: new_drumsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the new_drums
     */
    omit?: new_drumsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: new_drumsInclude<ExtArgs> | null
    /**
     * Filter, which new_drums to fetch.
     */
    where?: new_drumsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of new_drums to fetch.
     */
    orderBy?: new_drumsOrderByWithRelationInput | new_drumsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing new_drums.
     */
    cursor?: new_drumsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` new_drums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` new_drums.
     */
    skip?: number
    distinct?: New_drumsScalarFieldEnum | New_drumsScalarFieldEnum[]
  }

  /**
   * new_drums create
   */
  export type new_drumsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the new_drums
     */
    select?: new_drumsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the new_drums
     */
    omit?: new_drumsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: new_drumsInclude<ExtArgs> | null
    /**
     * The data needed to create a new_drums.
     */
    data: XOR<new_drumsCreateInput, new_drumsUncheckedCreateInput>
  }

  /**
   * new_drums createMany
   */
  export type new_drumsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many new_drums.
     */
    data: new_drumsCreateManyInput | new_drumsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * new_drums createManyAndReturn
   */
  export type new_drumsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the new_drums
     */
    select?: new_drumsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the new_drums
     */
    omit?: new_drumsOmit<ExtArgs> | null
    /**
     * The data used to create many new_drums.
     */
    data: new_drumsCreateManyInput | new_drumsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: new_drumsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * new_drums update
   */
  export type new_drumsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the new_drums
     */
    select?: new_drumsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the new_drums
     */
    omit?: new_drumsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: new_drumsInclude<ExtArgs> | null
    /**
     * The data needed to update a new_drums.
     */
    data: XOR<new_drumsUpdateInput, new_drumsUncheckedUpdateInput>
    /**
     * Choose, which new_drums to update.
     */
    where: new_drumsWhereUniqueInput
  }

  /**
   * new_drums updateMany
   */
  export type new_drumsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update new_drums.
     */
    data: XOR<new_drumsUpdateManyMutationInput, new_drumsUncheckedUpdateManyInput>
    /**
     * Filter which new_drums to update
     */
    where?: new_drumsWhereInput
  }

  /**
   * new_drums updateManyAndReturn
   */
  export type new_drumsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the new_drums
     */
    select?: new_drumsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the new_drums
     */
    omit?: new_drumsOmit<ExtArgs> | null
    /**
     * The data used to update new_drums.
     */
    data: XOR<new_drumsUpdateManyMutationInput, new_drumsUncheckedUpdateManyInput>
    /**
     * Filter which new_drums to update
     */
    where?: new_drumsWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: new_drumsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * new_drums upsert
   */
  export type new_drumsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the new_drums
     */
    select?: new_drumsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the new_drums
     */
    omit?: new_drumsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: new_drumsInclude<ExtArgs> | null
    /**
     * The filter to search for the new_drums to update in case it exists.
     */
    where: new_drumsWhereUniqueInput
    /**
     * In case the new_drums found by the `where` argument doesn't exist, create a new new_drums with this data.
     */
    create: XOR<new_drumsCreateInput, new_drumsUncheckedCreateInput>
    /**
     * In case the new_drums was found with the provided `where` argument, update it with this data.
     */
    update: XOR<new_drumsUpdateInput, new_drumsUncheckedUpdateInput>
  }

  /**
   * new_drums delete
   */
  export type new_drumsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the new_drums
     */
    select?: new_drumsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the new_drums
     */
    omit?: new_drumsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: new_drumsInclude<ExtArgs> | null
    /**
     * Filter which new_drums to delete.
     */
    where: new_drumsWhereUniqueInput
  }

  /**
   * new_drums deleteMany
   */
  export type new_drumsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which new_drums to delete
     */
    where?: new_drumsWhereInput
  }

  /**
   * new_drums.drum_distillations
   */
  export type new_drums$drum_distillationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the drum_distillations
     */
    select?: drum_distillationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the drum_distillations
     */
    omit?: drum_distillationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: drum_distillationsInclude<ExtArgs> | null
    where?: drum_distillationsWhereInput
    orderBy?: drum_distillationsOrderByWithRelationInput | drum_distillationsOrderByWithRelationInput[]
    cursor?: drum_distillationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Drum_distillationsScalarFieldEnum | Drum_distillationsScalarFieldEnum[]
  }

  /**
   * new_drums.orders
   */
  export type new_drums$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orders
     */
    omit?: ordersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    where?: ordersWhereInput
  }

  /**
   * new_drums.processes
   */
  export type new_drums$processesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the processes
     */
    select?: processesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the processes
     */
    omit?: processesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: processesInclude<ExtArgs> | null
    where?: processesWhereInput
    orderBy?: processesOrderByWithRelationInput | processesOrderByWithRelationInput[]
    cursor?: processesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProcessesScalarFieldEnum | ProcessesScalarFieldEnum[]
  }

  /**
   * new_drums.transactions
   */
  export type new_drums$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions
     */
    omit?: transactionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    where?: transactionsWhereInput
    orderBy?: transactionsOrderByWithRelationInput | transactionsOrderByWithRelationInput[]
    cursor?: transactionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionsScalarFieldEnum | TransactionsScalarFieldEnum[]
  }

  /**
   * new_drums without action
   */
  export type new_drumsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the new_drums
     */
    select?: new_drumsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the new_drums
     */
    omit?: new_drumsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: new_drumsInclude<ExtArgs> | null
  }


  /**
   * Model orders
   */

  export type AggregateOrders = {
    _count: OrdersCountAggregateOutputType | null
    _avg: OrdersAvgAggregateOutputType | null
    _sum: OrdersSumAggregateOutputType | null
    _min: OrdersMinAggregateOutputType | null
    _max: OrdersMaxAggregateOutputType | null
  }

  export type OrdersAvgAggregateOutputType = {
    order_id: number | null
    quantity: number | null
    quantity_received: number | null
  }

  export type OrdersSumAggregateOutputType = {
    order_id: number | null
    quantity: number | null
    quantity_received: number | null
  }

  export type OrdersMinAggregateOutputType = {
    order_id: number | null
    supplier: string | null
    material: string | null
    quantity: number | null
    date_ordered: Date | null
    notes: string | null
    created_at: Date | null
    updated_at: Date | null
    quantity_received: number | null
    delivery_status: string | null
  }

  export type OrdersMaxAggregateOutputType = {
    order_id: number | null
    supplier: string | null
    material: string | null
    quantity: number | null
    date_ordered: Date | null
    notes: string | null
    created_at: Date | null
    updated_at: Date | null
    quantity_received: number | null
    delivery_status: string | null
  }

  export type OrdersCountAggregateOutputType = {
    order_id: number
    supplier: number
    material: number
    quantity: number
    date_ordered: number
    notes: number
    created_at: number
    updated_at: number
    quantity_received: number
    delivery_status: number
    _all: number
  }


  export type OrdersAvgAggregateInputType = {
    order_id?: true
    quantity?: true
    quantity_received?: true
  }

  export type OrdersSumAggregateInputType = {
    order_id?: true
    quantity?: true
    quantity_received?: true
  }

  export type OrdersMinAggregateInputType = {
    order_id?: true
    supplier?: true
    material?: true
    quantity?: true
    date_ordered?: true
    notes?: true
    created_at?: true
    updated_at?: true
    quantity_received?: true
    delivery_status?: true
  }

  export type OrdersMaxAggregateInputType = {
    order_id?: true
    supplier?: true
    material?: true
    quantity?: true
    date_ordered?: true
    notes?: true
    created_at?: true
    updated_at?: true
    quantity_received?: true
    delivery_status?: true
  }

  export type OrdersCountAggregateInputType = {
    order_id?: true
    supplier?: true
    material?: true
    quantity?: true
    date_ordered?: true
    notes?: true
    created_at?: true
    updated_at?: true
    quantity_received?: true
    delivery_status?: true
    _all?: true
  }

  export type OrdersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which orders to aggregate.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned orders
    **/
    _count?: true | OrdersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrdersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrdersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrdersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrdersMaxAggregateInputType
  }

  export type GetOrdersAggregateType<T extends OrdersAggregateArgs> = {
        [P in keyof T & keyof AggregateOrders]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrders[P]>
      : GetScalarType<T[P], AggregateOrders[P]>
  }




  export type ordersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ordersWhereInput
    orderBy?: ordersOrderByWithAggregationInput | ordersOrderByWithAggregationInput[]
    by: OrdersScalarFieldEnum[] | OrdersScalarFieldEnum
    having?: ordersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrdersCountAggregateInputType | true
    _avg?: OrdersAvgAggregateInputType
    _sum?: OrdersSumAggregateInputType
    _min?: OrdersMinAggregateInputType
    _max?: OrdersMaxAggregateInputType
  }

  export type OrdersGroupByOutputType = {
    order_id: number
    supplier: string
    material: string
    quantity: number
    date_ordered: Date | null
    notes: string | null
    created_at: Date | null
    updated_at: Date | null
    quantity_received: number
    delivery_status: string
    _count: OrdersCountAggregateOutputType | null
    _avg: OrdersAvgAggregateOutputType | null
    _sum: OrdersSumAggregateOutputType | null
    _min: OrdersMinAggregateOutputType | null
    _max: OrdersMaxAggregateOutputType | null
  }

  type GetOrdersGroupByPayload<T extends ordersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrdersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrdersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrdersGroupByOutputType[P]>
            : GetScalarType<T[P], OrdersGroupByOutputType[P]>
        }
      >
    >


  export type ordersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    order_id?: boolean
    supplier?: boolean
    material?: boolean
    quantity?: boolean
    date_ordered?: boolean
    notes?: boolean
    created_at?: boolean
    updated_at?: boolean
    quantity_received?: boolean
    delivery_status?: boolean
    deliveries?: boolean | orders$deliveriesArgs<ExtArgs>
    new_drums?: boolean | orders$new_drumsArgs<ExtArgs>
    _count?: boolean | OrdersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orders"]>

  export type ordersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    order_id?: boolean
    supplier?: boolean
    material?: boolean
    quantity?: boolean
    date_ordered?: boolean
    notes?: boolean
    created_at?: boolean
    updated_at?: boolean
    quantity_received?: boolean
    delivery_status?: boolean
  }, ExtArgs["result"]["orders"]>

  export type ordersSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    order_id?: boolean
    supplier?: boolean
    material?: boolean
    quantity?: boolean
    date_ordered?: boolean
    notes?: boolean
    created_at?: boolean
    updated_at?: boolean
    quantity_received?: boolean
    delivery_status?: boolean
  }, ExtArgs["result"]["orders"]>

  export type ordersSelectScalar = {
    order_id?: boolean
    supplier?: boolean
    material?: boolean
    quantity?: boolean
    date_ordered?: boolean
    notes?: boolean
    created_at?: boolean
    updated_at?: boolean
    quantity_received?: boolean
    delivery_status?: boolean
  }

  export type ordersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"order_id" | "supplier" | "material" | "quantity" | "date_ordered" | "notes" | "created_at" | "updated_at" | "quantity_received" | "delivery_status", ExtArgs["result"]["orders"]>
  export type ordersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    deliveries?: boolean | orders$deliveriesArgs<ExtArgs>
    new_drums?: boolean | orders$new_drumsArgs<ExtArgs>
    _count?: boolean | OrdersCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ordersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ordersIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ordersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "orders"
    objects: {
      deliveries: Prisma.$deliveriesPayload<ExtArgs>[]
      new_drums: Prisma.$new_drumsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      order_id: number
      supplier: string
      material: string
      quantity: number
      date_ordered: Date | null
      notes: string | null
      created_at: Date | null
      updated_at: Date | null
      quantity_received: number
      delivery_status: string
    }, ExtArgs["result"]["orders"]>
    composites: {}
  }

  type ordersGetPayload<S extends boolean | null | undefined | ordersDefaultArgs> = $Result.GetResult<Prisma.$ordersPayload, S>

  type ordersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ordersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrdersCountAggregateInputType | true
    }

  export interface ordersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['orders'], meta: { name: 'orders' } }
    /**
     * Find zero or one Orders that matches the filter.
     * @param {ordersFindUniqueArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ordersFindUniqueArgs>(args: SelectSubset<T, ordersFindUniqueArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Orders that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ordersFindUniqueOrThrowArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ordersFindUniqueOrThrowArgs>(args: SelectSubset<T, ordersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersFindFirstArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ordersFindFirstArgs>(args?: SelectSubset<T, ordersFindFirstArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Orders that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersFindFirstOrThrowArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ordersFindFirstOrThrowArgs>(args?: SelectSubset<T, ordersFindFirstOrThrowArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.orders.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.orders.findMany({ take: 10 })
     * 
     * // Only select the `order_id`
     * const ordersWithOrder_idOnly = await prisma.orders.findMany({ select: { order_id: true } })
     * 
     */
    findMany<T extends ordersFindManyArgs>(args?: SelectSubset<T, ordersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Orders.
     * @param {ordersCreateArgs} args - Arguments to create a Orders.
     * @example
     * // Create one Orders
     * const Orders = await prisma.orders.create({
     *   data: {
     *     // ... data to create a Orders
     *   }
     * })
     * 
     */
    create<T extends ordersCreateArgs>(args: SelectSubset<T, ordersCreateArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Orders.
     * @param {ordersCreateManyArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const orders = await prisma.orders.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ordersCreateManyArgs>(args?: SelectSubset<T, ordersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Orders and returns the data saved in the database.
     * @param {ordersCreateManyAndReturnArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const orders = await prisma.orders.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Orders and only return the `order_id`
     * const ordersWithOrder_idOnly = await prisma.orders.createManyAndReturn({
     *   select: { order_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ordersCreateManyAndReturnArgs>(args?: SelectSubset<T, ordersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Orders.
     * @param {ordersDeleteArgs} args - Arguments to delete one Orders.
     * @example
     * // Delete one Orders
     * const Orders = await prisma.orders.delete({
     *   where: {
     *     // ... filter to delete one Orders
     *   }
     * })
     * 
     */
    delete<T extends ordersDeleteArgs>(args: SelectSubset<T, ordersDeleteArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Orders.
     * @param {ordersUpdateArgs} args - Arguments to update one Orders.
     * @example
     * // Update one Orders
     * const orders = await prisma.orders.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ordersUpdateArgs>(args: SelectSubset<T, ordersUpdateArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Orders.
     * @param {ordersDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.orders.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ordersDeleteManyArgs>(args?: SelectSubset<T, ordersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const orders = await prisma.orders.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ordersUpdateManyArgs>(args: SelectSubset<T, ordersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders and returns the data updated in the database.
     * @param {ordersUpdateManyAndReturnArgs} args - Arguments to update many Orders.
     * @example
     * // Update many Orders
     * const orders = await prisma.orders.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Orders and only return the `order_id`
     * const ordersWithOrder_idOnly = await prisma.orders.updateManyAndReturn({
     *   select: { order_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ordersUpdateManyAndReturnArgs>(args: SelectSubset<T, ordersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Orders.
     * @param {ordersUpsertArgs} args - Arguments to update or create a Orders.
     * @example
     * // Update or create a Orders
     * const orders = await prisma.orders.upsert({
     *   create: {
     *     // ... data to create a Orders
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Orders we want to update
     *   }
     * })
     */
    upsert<T extends ordersUpsertArgs>(args: SelectSubset<T, ordersUpsertArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.orders.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends ordersCountArgs>(
      args?: Subset<T, ordersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrdersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrdersAggregateArgs>(args: Subset<T, OrdersAggregateArgs>): Prisma.PrismaPromise<GetOrdersAggregateType<T>>

    /**
     * Group by Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ordersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ordersGroupByArgs['orderBy'] }
        : { orderBy?: ordersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ordersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrdersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the orders model
   */
  readonly fields: ordersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for orders.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ordersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    deliveries<T extends orders$deliveriesArgs<ExtArgs> = {}>(args?: Subset<T, orders$deliveriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$deliveriesPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    new_drums<T extends orders$new_drumsArgs<ExtArgs> = {}>(args?: Subset<T, orders$new_drumsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$new_drumsPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the orders model
   */ 
  interface ordersFieldRefs {
    readonly order_id: FieldRef<"orders", 'Int'>
    readonly supplier: FieldRef<"orders", 'String'>
    readonly material: FieldRef<"orders", 'String'>
    readonly quantity: FieldRef<"orders", 'Int'>
    readonly date_ordered: FieldRef<"orders", 'DateTime'>
    readonly notes: FieldRef<"orders", 'String'>
    readonly created_at: FieldRef<"orders", 'DateTime'>
    readonly updated_at: FieldRef<"orders", 'DateTime'>
    readonly quantity_received: FieldRef<"orders", 'Int'>
    readonly delivery_status: FieldRef<"orders", 'String'>
  }
    

  // Custom InputTypes
  /**
   * orders findUnique
   */
  export type ordersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orders
     */
    omit?: ordersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where: ordersWhereUniqueInput
  }

  /**
   * orders findUniqueOrThrow
   */
  export type ordersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orders
     */
    omit?: ordersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where: ordersWhereUniqueInput
  }

  /**
   * orders findFirst
   */
  export type ordersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orders
     */
    omit?: ordersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orders.
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orders.
     */
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }

  /**
   * orders findFirstOrThrow
   */
  export type ordersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orders
     */
    omit?: ordersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orders.
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orders.
     */
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }

  /**
   * orders findMany
   */
  export type ordersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orders
     */
    omit?: ordersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing orders.
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }

  /**
   * orders create
   */
  export type ordersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orders
     */
    omit?: ordersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * The data needed to create a orders.
     */
    data: XOR<ordersCreateInput, ordersUncheckedCreateInput>
  }

  /**
   * orders createMany
   */
  export type ordersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many orders.
     */
    data: ordersCreateManyInput | ordersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * orders createManyAndReturn
   */
  export type ordersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the orders
     */
    omit?: ordersOmit<ExtArgs> | null
    /**
     * The data used to create many orders.
     */
    data: ordersCreateManyInput | ordersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * orders update
   */
  export type ordersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orders
     */
    omit?: ordersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * The data needed to update a orders.
     */
    data: XOR<ordersUpdateInput, ordersUncheckedUpdateInput>
    /**
     * Choose, which orders to update.
     */
    where: ordersWhereUniqueInput
  }

  /**
   * orders updateMany
   */
  export type ordersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update orders.
     */
    data: XOR<ordersUpdateManyMutationInput, ordersUncheckedUpdateManyInput>
    /**
     * Filter which orders to update
     */
    where?: ordersWhereInput
  }

  /**
   * orders updateManyAndReturn
   */
  export type ordersUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the orders
     */
    omit?: ordersOmit<ExtArgs> | null
    /**
     * The data used to update orders.
     */
    data: XOR<ordersUpdateManyMutationInput, ordersUncheckedUpdateManyInput>
    /**
     * Filter which orders to update
     */
    where?: ordersWhereInput
  }

  /**
   * orders upsert
   */
  export type ordersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orders
     */
    omit?: ordersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * The filter to search for the orders to update in case it exists.
     */
    where: ordersWhereUniqueInput
    /**
     * In case the orders found by the `where` argument doesn't exist, create a new orders with this data.
     */
    create: XOR<ordersCreateInput, ordersUncheckedCreateInput>
    /**
     * In case the orders was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ordersUpdateInput, ordersUncheckedUpdateInput>
  }

  /**
   * orders delete
   */
  export type ordersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orders
     */
    omit?: ordersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter which orders to delete.
     */
    where: ordersWhereUniqueInput
  }

  /**
   * orders deleteMany
   */
  export type ordersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which orders to delete
     */
    where?: ordersWhereInput
  }

  /**
   * orders.deliveries
   */
  export type orders$deliveriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deliveries
     */
    select?: deliveriesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the deliveries
     */
    omit?: deliveriesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: deliveriesInclude<ExtArgs> | null
    where?: deliveriesWhereInput
    orderBy?: deliveriesOrderByWithRelationInput | deliveriesOrderByWithRelationInput[]
    cursor?: deliveriesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DeliveriesScalarFieldEnum | DeliveriesScalarFieldEnum[]
  }

  /**
   * orders.new_drums
   */
  export type orders$new_drumsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the new_drums
     */
    select?: new_drumsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the new_drums
     */
    omit?: new_drumsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: new_drumsInclude<ExtArgs> | null
    where?: new_drumsWhereInput
    orderBy?: new_drumsOrderByWithRelationInput | new_drumsOrderByWithRelationInput[]
    cursor?: new_drumsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: New_drumsScalarFieldEnum | New_drumsScalarFieldEnum[]
  }

  /**
   * orders without action
   */
  export type ordersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orders
     */
    omit?: ordersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
  }


  /**
   * Model processes
   */

  export type AggregateProcesses = {
    _count: ProcessesCountAggregateOutputType | null
    _avg: ProcessesAvgAggregateOutputType | null
    _sum: ProcessesSumAggregateOutputType | null
    _min: ProcessesMinAggregateOutputType | null
    _max: ProcessesMaxAggregateOutputType | null
  }

  export type ProcessesAvgAggregateOutputType = {
    process_id: number | null
    drum_id: number | null
  }

  export type ProcessesSumAggregateOutputType = {
    process_id: number | null
    drum_id: number | null
  }

  export type ProcessesMinAggregateOutputType = {
    process_id: number | null
    material: string | null
    drum_id: number | null
    supplier: string | null
    still_code: string | null
    operator: string | null
    loader: string | null
    transporter: string | null
    date_processed: Date | null
  }

  export type ProcessesMaxAggregateOutputType = {
    process_id: number | null
    material: string | null
    drum_id: number | null
    supplier: string | null
    still_code: string | null
    operator: string | null
    loader: string | null
    transporter: string | null
    date_processed: Date | null
  }

  export type ProcessesCountAggregateOutputType = {
    process_id: number
    material: number
    drum_id: number
    supplier: number
    still_code: number
    operator: number
    loader: number
    transporter: number
    date_processed: number
    _all: number
  }


  export type ProcessesAvgAggregateInputType = {
    process_id?: true
    drum_id?: true
  }

  export type ProcessesSumAggregateInputType = {
    process_id?: true
    drum_id?: true
  }

  export type ProcessesMinAggregateInputType = {
    process_id?: true
    material?: true
    drum_id?: true
    supplier?: true
    still_code?: true
    operator?: true
    loader?: true
    transporter?: true
    date_processed?: true
  }

  export type ProcessesMaxAggregateInputType = {
    process_id?: true
    material?: true
    drum_id?: true
    supplier?: true
    still_code?: true
    operator?: true
    loader?: true
    transporter?: true
    date_processed?: true
  }

  export type ProcessesCountAggregateInputType = {
    process_id?: true
    material?: true
    drum_id?: true
    supplier?: true
    still_code?: true
    operator?: true
    loader?: true
    transporter?: true
    date_processed?: true
    _all?: true
  }

  export type ProcessesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which processes to aggregate.
     */
    where?: processesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of processes to fetch.
     */
    orderBy?: processesOrderByWithRelationInput | processesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: processesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` processes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` processes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned processes
    **/
    _count?: true | ProcessesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProcessesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProcessesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProcessesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProcessesMaxAggregateInputType
  }

  export type GetProcessesAggregateType<T extends ProcessesAggregateArgs> = {
        [P in keyof T & keyof AggregateProcesses]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProcesses[P]>
      : GetScalarType<T[P], AggregateProcesses[P]>
  }




  export type processesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: processesWhereInput
    orderBy?: processesOrderByWithAggregationInput | processesOrderByWithAggregationInput[]
    by: ProcessesScalarFieldEnum[] | ProcessesScalarFieldEnum
    having?: processesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProcessesCountAggregateInputType | true
    _avg?: ProcessesAvgAggregateInputType
    _sum?: ProcessesSumAggregateInputType
    _min?: ProcessesMinAggregateInputType
    _max?: ProcessesMaxAggregateInputType
  }

  export type ProcessesGroupByOutputType = {
    process_id: number
    material: string | null
    drum_id: number | null
    supplier: string | null
    still_code: string
    operator: string | null
    loader: string | null
    transporter: string | null
    date_processed: Date | null
    _count: ProcessesCountAggregateOutputType | null
    _avg: ProcessesAvgAggregateOutputType | null
    _sum: ProcessesSumAggregateOutputType | null
    _min: ProcessesMinAggregateOutputType | null
    _max: ProcessesMaxAggregateOutputType | null
  }

  type GetProcessesGroupByPayload<T extends processesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProcessesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProcessesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProcessesGroupByOutputType[P]>
            : GetScalarType<T[P], ProcessesGroupByOutputType[P]>
        }
      >
    >


  export type processesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    process_id?: boolean
    material?: boolean
    drum_id?: boolean
    supplier?: boolean
    still_code?: boolean
    operator?: boolean
    loader?: boolean
    transporter?: boolean
    date_processed?: boolean
    new_drums?: boolean | processes$new_drumsArgs<ExtArgs>
    stills?: boolean | stillsDefaultArgs<ExtArgs>
    transactions?: boolean | processes$transactionsArgs<ExtArgs>
    _count?: boolean | ProcessesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["processes"]>

  export type processesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    process_id?: boolean
    material?: boolean
    drum_id?: boolean
    supplier?: boolean
    still_code?: boolean
    operator?: boolean
    loader?: boolean
    transporter?: boolean
    date_processed?: boolean
    new_drums?: boolean | processes$new_drumsArgs<ExtArgs>
    stills?: boolean | stillsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["processes"]>

  export type processesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    process_id?: boolean
    material?: boolean
    drum_id?: boolean
    supplier?: boolean
    still_code?: boolean
    operator?: boolean
    loader?: boolean
    transporter?: boolean
    date_processed?: boolean
    new_drums?: boolean | processes$new_drumsArgs<ExtArgs>
    stills?: boolean | stillsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["processes"]>

  export type processesSelectScalar = {
    process_id?: boolean
    material?: boolean
    drum_id?: boolean
    supplier?: boolean
    still_code?: boolean
    operator?: boolean
    loader?: boolean
    transporter?: boolean
    date_processed?: boolean
  }

  export type processesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"process_id" | "material" | "drum_id" | "supplier" | "still_code" | "operator" | "loader" | "transporter" | "date_processed", ExtArgs["result"]["processes"]>
  export type processesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    new_drums?: boolean | processes$new_drumsArgs<ExtArgs>
    stills?: boolean | stillsDefaultArgs<ExtArgs>
    transactions?: boolean | processes$transactionsArgs<ExtArgs>
    _count?: boolean | ProcessesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type processesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    new_drums?: boolean | processes$new_drumsArgs<ExtArgs>
    stills?: boolean | stillsDefaultArgs<ExtArgs>
  }
  export type processesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    new_drums?: boolean | processes$new_drumsArgs<ExtArgs>
    stills?: boolean | stillsDefaultArgs<ExtArgs>
  }

  export type $processesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "processes"
    objects: {
      new_drums: Prisma.$new_drumsPayload<ExtArgs> | null
      stills: Prisma.$stillsPayload<ExtArgs>
      transactions: Prisma.$transactionsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      process_id: number
      material: string | null
      drum_id: number | null
      supplier: string | null
      still_code: string
      operator: string | null
      loader: string | null
      transporter: string | null
      date_processed: Date | null
    }, ExtArgs["result"]["processes"]>
    composites: {}
  }

  type processesGetPayload<S extends boolean | null | undefined | processesDefaultArgs> = $Result.GetResult<Prisma.$processesPayload, S>

  type processesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<processesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProcessesCountAggregateInputType | true
    }

  export interface processesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['processes'], meta: { name: 'processes' } }
    /**
     * Find zero or one Processes that matches the filter.
     * @param {processesFindUniqueArgs} args - Arguments to find a Processes
     * @example
     * // Get one Processes
     * const processes = await prisma.processes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends processesFindUniqueArgs>(args: SelectSubset<T, processesFindUniqueArgs<ExtArgs>>): Prisma__processesClient<$Result.GetResult<Prisma.$processesPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Processes that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {processesFindUniqueOrThrowArgs} args - Arguments to find a Processes
     * @example
     * // Get one Processes
     * const processes = await prisma.processes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends processesFindUniqueOrThrowArgs>(args: SelectSubset<T, processesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__processesClient<$Result.GetResult<Prisma.$processesPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Processes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {processesFindFirstArgs} args - Arguments to find a Processes
     * @example
     * // Get one Processes
     * const processes = await prisma.processes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends processesFindFirstArgs>(args?: SelectSubset<T, processesFindFirstArgs<ExtArgs>>): Prisma__processesClient<$Result.GetResult<Prisma.$processesPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Processes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {processesFindFirstOrThrowArgs} args - Arguments to find a Processes
     * @example
     * // Get one Processes
     * const processes = await prisma.processes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends processesFindFirstOrThrowArgs>(args?: SelectSubset<T, processesFindFirstOrThrowArgs<ExtArgs>>): Prisma__processesClient<$Result.GetResult<Prisma.$processesPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Processes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {processesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Processes
     * const processes = await prisma.processes.findMany()
     * 
     * // Get first 10 Processes
     * const processes = await prisma.processes.findMany({ take: 10 })
     * 
     * // Only select the `process_id`
     * const processesWithProcess_idOnly = await prisma.processes.findMany({ select: { process_id: true } })
     * 
     */
    findMany<T extends processesFindManyArgs>(args?: SelectSubset<T, processesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$processesPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Processes.
     * @param {processesCreateArgs} args - Arguments to create a Processes.
     * @example
     * // Create one Processes
     * const Processes = await prisma.processes.create({
     *   data: {
     *     // ... data to create a Processes
     *   }
     * })
     * 
     */
    create<T extends processesCreateArgs>(args: SelectSubset<T, processesCreateArgs<ExtArgs>>): Prisma__processesClient<$Result.GetResult<Prisma.$processesPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Processes.
     * @param {processesCreateManyArgs} args - Arguments to create many Processes.
     * @example
     * // Create many Processes
     * const processes = await prisma.processes.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends processesCreateManyArgs>(args?: SelectSubset<T, processesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Processes and returns the data saved in the database.
     * @param {processesCreateManyAndReturnArgs} args - Arguments to create many Processes.
     * @example
     * // Create many Processes
     * const processes = await prisma.processes.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Processes and only return the `process_id`
     * const processesWithProcess_idOnly = await prisma.processes.createManyAndReturn({
     *   select: { process_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends processesCreateManyAndReturnArgs>(args?: SelectSubset<T, processesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$processesPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Processes.
     * @param {processesDeleteArgs} args - Arguments to delete one Processes.
     * @example
     * // Delete one Processes
     * const Processes = await prisma.processes.delete({
     *   where: {
     *     // ... filter to delete one Processes
     *   }
     * })
     * 
     */
    delete<T extends processesDeleteArgs>(args: SelectSubset<T, processesDeleteArgs<ExtArgs>>): Prisma__processesClient<$Result.GetResult<Prisma.$processesPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Processes.
     * @param {processesUpdateArgs} args - Arguments to update one Processes.
     * @example
     * // Update one Processes
     * const processes = await prisma.processes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends processesUpdateArgs>(args: SelectSubset<T, processesUpdateArgs<ExtArgs>>): Prisma__processesClient<$Result.GetResult<Prisma.$processesPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Processes.
     * @param {processesDeleteManyArgs} args - Arguments to filter Processes to delete.
     * @example
     * // Delete a few Processes
     * const { count } = await prisma.processes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends processesDeleteManyArgs>(args?: SelectSubset<T, processesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Processes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {processesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Processes
     * const processes = await prisma.processes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends processesUpdateManyArgs>(args: SelectSubset<T, processesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Processes and returns the data updated in the database.
     * @param {processesUpdateManyAndReturnArgs} args - Arguments to update many Processes.
     * @example
     * // Update many Processes
     * const processes = await prisma.processes.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Processes and only return the `process_id`
     * const processesWithProcess_idOnly = await prisma.processes.updateManyAndReturn({
     *   select: { process_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends processesUpdateManyAndReturnArgs>(args: SelectSubset<T, processesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$processesPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Processes.
     * @param {processesUpsertArgs} args - Arguments to update or create a Processes.
     * @example
     * // Update or create a Processes
     * const processes = await prisma.processes.upsert({
     *   create: {
     *     // ... data to create a Processes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Processes we want to update
     *   }
     * })
     */
    upsert<T extends processesUpsertArgs>(args: SelectSubset<T, processesUpsertArgs<ExtArgs>>): Prisma__processesClient<$Result.GetResult<Prisma.$processesPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Processes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {processesCountArgs} args - Arguments to filter Processes to count.
     * @example
     * // Count the number of Processes
     * const count = await prisma.processes.count({
     *   where: {
     *     // ... the filter for the Processes we want to count
     *   }
     * })
    **/
    count<T extends processesCountArgs>(
      args?: Subset<T, processesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProcessesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Processes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProcessesAggregateArgs>(args: Subset<T, ProcessesAggregateArgs>): Prisma.PrismaPromise<GetProcessesAggregateType<T>>

    /**
     * Group by Processes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {processesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends processesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: processesGroupByArgs['orderBy'] }
        : { orderBy?: processesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, processesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProcessesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the processes model
   */
  readonly fields: processesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for processes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__processesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    new_drums<T extends processes$new_drumsArgs<ExtArgs> = {}>(args?: Subset<T, processes$new_drumsArgs<ExtArgs>>): Prisma__new_drumsClient<$Result.GetResult<Prisma.$new_drumsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    stills<T extends stillsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, stillsDefaultArgs<ExtArgs>>): Prisma__stillsClient<$Result.GetResult<Prisma.$stillsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    transactions<T extends processes$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, processes$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the processes model
   */ 
  interface processesFieldRefs {
    readonly process_id: FieldRef<"processes", 'Int'>
    readonly material: FieldRef<"processes", 'String'>
    readonly drum_id: FieldRef<"processes", 'Int'>
    readonly supplier: FieldRef<"processes", 'String'>
    readonly still_code: FieldRef<"processes", 'String'>
    readonly operator: FieldRef<"processes", 'String'>
    readonly loader: FieldRef<"processes", 'String'>
    readonly transporter: FieldRef<"processes", 'String'>
    readonly date_processed: FieldRef<"processes", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * processes findUnique
   */
  export type processesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the processes
     */
    select?: processesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the processes
     */
    omit?: processesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: processesInclude<ExtArgs> | null
    /**
     * Filter, which processes to fetch.
     */
    where: processesWhereUniqueInput
  }

  /**
   * processes findUniqueOrThrow
   */
  export type processesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the processes
     */
    select?: processesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the processes
     */
    omit?: processesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: processesInclude<ExtArgs> | null
    /**
     * Filter, which processes to fetch.
     */
    where: processesWhereUniqueInput
  }

  /**
   * processes findFirst
   */
  export type processesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the processes
     */
    select?: processesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the processes
     */
    omit?: processesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: processesInclude<ExtArgs> | null
    /**
     * Filter, which processes to fetch.
     */
    where?: processesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of processes to fetch.
     */
    orderBy?: processesOrderByWithRelationInput | processesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for processes.
     */
    cursor?: processesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` processes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` processes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of processes.
     */
    distinct?: ProcessesScalarFieldEnum | ProcessesScalarFieldEnum[]
  }

  /**
   * processes findFirstOrThrow
   */
  export type processesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the processes
     */
    select?: processesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the processes
     */
    omit?: processesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: processesInclude<ExtArgs> | null
    /**
     * Filter, which processes to fetch.
     */
    where?: processesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of processes to fetch.
     */
    orderBy?: processesOrderByWithRelationInput | processesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for processes.
     */
    cursor?: processesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` processes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` processes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of processes.
     */
    distinct?: ProcessesScalarFieldEnum | ProcessesScalarFieldEnum[]
  }

  /**
   * processes findMany
   */
  export type processesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the processes
     */
    select?: processesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the processes
     */
    omit?: processesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: processesInclude<ExtArgs> | null
    /**
     * Filter, which processes to fetch.
     */
    where?: processesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of processes to fetch.
     */
    orderBy?: processesOrderByWithRelationInput | processesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing processes.
     */
    cursor?: processesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` processes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` processes.
     */
    skip?: number
    distinct?: ProcessesScalarFieldEnum | ProcessesScalarFieldEnum[]
  }

  /**
   * processes create
   */
  export type processesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the processes
     */
    select?: processesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the processes
     */
    omit?: processesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: processesInclude<ExtArgs> | null
    /**
     * The data needed to create a processes.
     */
    data: XOR<processesCreateInput, processesUncheckedCreateInput>
  }

  /**
   * processes createMany
   */
  export type processesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many processes.
     */
    data: processesCreateManyInput | processesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * processes createManyAndReturn
   */
  export type processesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the processes
     */
    select?: processesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the processes
     */
    omit?: processesOmit<ExtArgs> | null
    /**
     * The data used to create many processes.
     */
    data: processesCreateManyInput | processesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: processesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * processes update
   */
  export type processesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the processes
     */
    select?: processesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the processes
     */
    omit?: processesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: processesInclude<ExtArgs> | null
    /**
     * The data needed to update a processes.
     */
    data: XOR<processesUpdateInput, processesUncheckedUpdateInput>
    /**
     * Choose, which processes to update.
     */
    where: processesWhereUniqueInput
  }

  /**
   * processes updateMany
   */
  export type processesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update processes.
     */
    data: XOR<processesUpdateManyMutationInput, processesUncheckedUpdateManyInput>
    /**
     * Filter which processes to update
     */
    where?: processesWhereInput
  }

  /**
   * processes updateManyAndReturn
   */
  export type processesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the processes
     */
    select?: processesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the processes
     */
    omit?: processesOmit<ExtArgs> | null
    /**
     * The data used to update processes.
     */
    data: XOR<processesUpdateManyMutationInput, processesUncheckedUpdateManyInput>
    /**
     * Filter which processes to update
     */
    where?: processesWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: processesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * processes upsert
   */
  export type processesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the processes
     */
    select?: processesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the processes
     */
    omit?: processesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: processesInclude<ExtArgs> | null
    /**
     * The filter to search for the processes to update in case it exists.
     */
    where: processesWhereUniqueInput
    /**
     * In case the processes found by the `where` argument doesn't exist, create a new processes with this data.
     */
    create: XOR<processesCreateInput, processesUncheckedCreateInput>
    /**
     * In case the processes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<processesUpdateInput, processesUncheckedUpdateInput>
  }

  /**
   * processes delete
   */
  export type processesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the processes
     */
    select?: processesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the processes
     */
    omit?: processesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: processesInclude<ExtArgs> | null
    /**
     * Filter which processes to delete.
     */
    where: processesWhereUniqueInput
  }

  /**
   * processes deleteMany
   */
  export type processesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which processes to delete
     */
    where?: processesWhereInput
  }

  /**
   * processes.new_drums
   */
  export type processes$new_drumsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the new_drums
     */
    select?: new_drumsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the new_drums
     */
    omit?: new_drumsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: new_drumsInclude<ExtArgs> | null
    where?: new_drumsWhereInput
  }

  /**
   * processes.transactions
   */
  export type processes$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions
     */
    omit?: transactionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    where?: transactionsWhereInput
    orderBy?: transactionsOrderByWithRelationInput | transactionsOrderByWithRelationInput[]
    cursor?: transactionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionsScalarFieldEnum | TransactionsScalarFieldEnum[]
  }

  /**
   * processes without action
   */
  export type processesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the processes
     */
    select?: processesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the processes
     */
    omit?: processesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: processesInclude<ExtArgs> | null
  }


  /**
   * Model repro_additions
   */

  export type AggregateRepro_additions = {
    _count: Repro_additionsCountAggregateOutputType | null
    _avg: Repro_additionsAvgAggregateOutputType | null
    _sum: Repro_additionsSumAggregateOutputType | null
    _min: Repro_additionsMinAggregateOutputType | null
    _max: Repro_additionsMaxAggregateOutputType | null
  }

  export type Repro_additionsAvgAggregateOutputType = {
    addition_id: number | null
    repro_drum_id: number | null
    distillation_id: number | null
    volume_added: number | null
    volume_in_drum: number | null
  }

  export type Repro_additionsSumAggregateOutputType = {
    addition_id: number | null
    repro_drum_id: number | null
    distillation_id: number | null
    volume_added: number | null
    volume_in_drum: number | null
  }

  export type Repro_additionsMinAggregateOutputType = {
    addition_id: number | null
    repro_drum_id: number | null
    distillation_id: number | null
    date_added: Date | null
    volume_added: number | null
    volume_in_drum: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Repro_additionsMaxAggregateOutputType = {
    addition_id: number | null
    repro_drum_id: number | null
    distillation_id: number | null
    date_added: Date | null
    volume_added: number | null
    volume_in_drum: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Repro_additionsCountAggregateOutputType = {
    addition_id: number
    repro_drum_id: number
    distillation_id: number
    date_added: number
    volume_added: number
    volume_in_drum: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type Repro_additionsAvgAggregateInputType = {
    addition_id?: true
    repro_drum_id?: true
    distillation_id?: true
    volume_added?: true
    volume_in_drum?: true
  }

  export type Repro_additionsSumAggregateInputType = {
    addition_id?: true
    repro_drum_id?: true
    distillation_id?: true
    volume_added?: true
    volume_in_drum?: true
  }

  export type Repro_additionsMinAggregateInputType = {
    addition_id?: true
    repro_drum_id?: true
    distillation_id?: true
    date_added?: true
    volume_added?: true
    volume_in_drum?: true
    created_at?: true
    updated_at?: true
  }

  export type Repro_additionsMaxAggregateInputType = {
    addition_id?: true
    repro_drum_id?: true
    distillation_id?: true
    date_added?: true
    volume_added?: true
    volume_in_drum?: true
    created_at?: true
    updated_at?: true
  }

  export type Repro_additionsCountAggregateInputType = {
    addition_id?: true
    repro_drum_id?: true
    distillation_id?: true
    date_added?: true
    volume_added?: true
    volume_in_drum?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type Repro_additionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which repro_additions to aggregate.
     */
    where?: repro_additionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of repro_additions to fetch.
     */
    orderBy?: repro_additionsOrderByWithRelationInput | repro_additionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: repro_additionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` repro_additions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` repro_additions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned repro_additions
    **/
    _count?: true | Repro_additionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Repro_additionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Repro_additionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Repro_additionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Repro_additionsMaxAggregateInputType
  }

  export type GetRepro_additionsAggregateType<T extends Repro_additionsAggregateArgs> = {
        [P in keyof T & keyof AggregateRepro_additions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRepro_additions[P]>
      : GetScalarType<T[P], AggregateRepro_additions[P]>
  }




  export type repro_additionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: repro_additionsWhereInput
    orderBy?: repro_additionsOrderByWithAggregationInput | repro_additionsOrderByWithAggregationInput[]
    by: Repro_additionsScalarFieldEnum[] | Repro_additionsScalarFieldEnum
    having?: repro_additionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Repro_additionsCountAggregateInputType | true
    _avg?: Repro_additionsAvgAggregateInputType
    _sum?: Repro_additionsSumAggregateInputType
    _min?: Repro_additionsMinAggregateInputType
    _max?: Repro_additionsMaxAggregateInputType
  }

  export type Repro_additionsGroupByOutputType = {
    addition_id: number
    repro_drum_id: number | null
    distillation_id: number | null
    date_added: Date | null
    volume_added: number
    volume_in_drum: number
    created_at: Date | null
    updated_at: Date | null
    _count: Repro_additionsCountAggregateOutputType | null
    _avg: Repro_additionsAvgAggregateOutputType | null
    _sum: Repro_additionsSumAggregateOutputType | null
    _min: Repro_additionsMinAggregateOutputType | null
    _max: Repro_additionsMaxAggregateOutputType | null
  }

  type GetRepro_additionsGroupByPayload<T extends repro_additionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Repro_additionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Repro_additionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Repro_additionsGroupByOutputType[P]>
            : GetScalarType<T[P], Repro_additionsGroupByOutputType[P]>
        }
      >
    >


  export type repro_additionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    addition_id?: boolean
    repro_drum_id?: boolean
    distillation_id?: boolean
    date_added?: boolean
    volume_added?: boolean
    volume_in_drum?: boolean
    created_at?: boolean
    updated_at?: boolean
    distillations?: boolean | repro_additions$distillationsArgs<ExtArgs>
    repro_drums?: boolean | repro_additions$repro_drumsArgs<ExtArgs>
  }, ExtArgs["result"]["repro_additions"]>

  export type repro_additionsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    addition_id?: boolean
    repro_drum_id?: boolean
    distillation_id?: boolean
    date_added?: boolean
    volume_added?: boolean
    volume_in_drum?: boolean
    created_at?: boolean
    updated_at?: boolean
    distillations?: boolean | repro_additions$distillationsArgs<ExtArgs>
    repro_drums?: boolean | repro_additions$repro_drumsArgs<ExtArgs>
  }, ExtArgs["result"]["repro_additions"]>

  export type repro_additionsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    addition_id?: boolean
    repro_drum_id?: boolean
    distillation_id?: boolean
    date_added?: boolean
    volume_added?: boolean
    volume_in_drum?: boolean
    created_at?: boolean
    updated_at?: boolean
    distillations?: boolean | repro_additions$distillationsArgs<ExtArgs>
    repro_drums?: boolean | repro_additions$repro_drumsArgs<ExtArgs>
  }, ExtArgs["result"]["repro_additions"]>

  export type repro_additionsSelectScalar = {
    addition_id?: boolean
    repro_drum_id?: boolean
    distillation_id?: boolean
    date_added?: boolean
    volume_added?: boolean
    volume_in_drum?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type repro_additionsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"addition_id" | "repro_drum_id" | "distillation_id" | "date_added" | "volume_added" | "volume_in_drum" | "created_at" | "updated_at", ExtArgs["result"]["repro_additions"]>
  export type repro_additionsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    distillations?: boolean | repro_additions$distillationsArgs<ExtArgs>
    repro_drums?: boolean | repro_additions$repro_drumsArgs<ExtArgs>
  }
  export type repro_additionsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    distillations?: boolean | repro_additions$distillationsArgs<ExtArgs>
    repro_drums?: boolean | repro_additions$repro_drumsArgs<ExtArgs>
  }
  export type repro_additionsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    distillations?: boolean | repro_additions$distillationsArgs<ExtArgs>
    repro_drums?: boolean | repro_additions$repro_drumsArgs<ExtArgs>
  }

  export type $repro_additionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "repro_additions"
    objects: {
      distillations: Prisma.$distillationsPayload<ExtArgs> | null
      repro_drums: Prisma.$repro_drumsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      addition_id: number
      repro_drum_id: number | null
      distillation_id: number | null
      date_added: Date | null
      volume_added: number
      volume_in_drum: number
      created_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["repro_additions"]>
    composites: {}
  }

  type repro_additionsGetPayload<S extends boolean | null | undefined | repro_additionsDefaultArgs> = $Result.GetResult<Prisma.$repro_additionsPayload, S>

  type repro_additionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<repro_additionsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Repro_additionsCountAggregateInputType | true
    }

  export interface repro_additionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['repro_additions'], meta: { name: 'repro_additions' } }
    /**
     * Find zero or one Repro_additions that matches the filter.
     * @param {repro_additionsFindUniqueArgs} args - Arguments to find a Repro_additions
     * @example
     * // Get one Repro_additions
     * const repro_additions = await prisma.repro_additions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends repro_additionsFindUniqueArgs>(args: SelectSubset<T, repro_additionsFindUniqueArgs<ExtArgs>>): Prisma__repro_additionsClient<$Result.GetResult<Prisma.$repro_additionsPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Repro_additions that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {repro_additionsFindUniqueOrThrowArgs} args - Arguments to find a Repro_additions
     * @example
     * // Get one Repro_additions
     * const repro_additions = await prisma.repro_additions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends repro_additionsFindUniqueOrThrowArgs>(args: SelectSubset<T, repro_additionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__repro_additionsClient<$Result.GetResult<Prisma.$repro_additionsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Repro_additions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {repro_additionsFindFirstArgs} args - Arguments to find a Repro_additions
     * @example
     * // Get one Repro_additions
     * const repro_additions = await prisma.repro_additions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends repro_additionsFindFirstArgs>(args?: SelectSubset<T, repro_additionsFindFirstArgs<ExtArgs>>): Prisma__repro_additionsClient<$Result.GetResult<Prisma.$repro_additionsPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Repro_additions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {repro_additionsFindFirstOrThrowArgs} args - Arguments to find a Repro_additions
     * @example
     * // Get one Repro_additions
     * const repro_additions = await prisma.repro_additions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends repro_additionsFindFirstOrThrowArgs>(args?: SelectSubset<T, repro_additionsFindFirstOrThrowArgs<ExtArgs>>): Prisma__repro_additionsClient<$Result.GetResult<Prisma.$repro_additionsPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Repro_additions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {repro_additionsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Repro_additions
     * const repro_additions = await prisma.repro_additions.findMany()
     * 
     * // Get first 10 Repro_additions
     * const repro_additions = await prisma.repro_additions.findMany({ take: 10 })
     * 
     * // Only select the `addition_id`
     * const repro_additionsWithAddition_idOnly = await prisma.repro_additions.findMany({ select: { addition_id: true } })
     * 
     */
    findMany<T extends repro_additionsFindManyArgs>(args?: SelectSubset<T, repro_additionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$repro_additionsPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Repro_additions.
     * @param {repro_additionsCreateArgs} args - Arguments to create a Repro_additions.
     * @example
     * // Create one Repro_additions
     * const Repro_additions = await prisma.repro_additions.create({
     *   data: {
     *     // ... data to create a Repro_additions
     *   }
     * })
     * 
     */
    create<T extends repro_additionsCreateArgs>(args: SelectSubset<T, repro_additionsCreateArgs<ExtArgs>>): Prisma__repro_additionsClient<$Result.GetResult<Prisma.$repro_additionsPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Repro_additions.
     * @param {repro_additionsCreateManyArgs} args - Arguments to create many Repro_additions.
     * @example
     * // Create many Repro_additions
     * const repro_additions = await prisma.repro_additions.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends repro_additionsCreateManyArgs>(args?: SelectSubset<T, repro_additionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Repro_additions and returns the data saved in the database.
     * @param {repro_additionsCreateManyAndReturnArgs} args - Arguments to create many Repro_additions.
     * @example
     * // Create many Repro_additions
     * const repro_additions = await prisma.repro_additions.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Repro_additions and only return the `addition_id`
     * const repro_additionsWithAddition_idOnly = await prisma.repro_additions.createManyAndReturn({
     *   select: { addition_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends repro_additionsCreateManyAndReturnArgs>(args?: SelectSubset<T, repro_additionsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$repro_additionsPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Repro_additions.
     * @param {repro_additionsDeleteArgs} args - Arguments to delete one Repro_additions.
     * @example
     * // Delete one Repro_additions
     * const Repro_additions = await prisma.repro_additions.delete({
     *   where: {
     *     // ... filter to delete one Repro_additions
     *   }
     * })
     * 
     */
    delete<T extends repro_additionsDeleteArgs>(args: SelectSubset<T, repro_additionsDeleteArgs<ExtArgs>>): Prisma__repro_additionsClient<$Result.GetResult<Prisma.$repro_additionsPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Repro_additions.
     * @param {repro_additionsUpdateArgs} args - Arguments to update one Repro_additions.
     * @example
     * // Update one Repro_additions
     * const repro_additions = await prisma.repro_additions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends repro_additionsUpdateArgs>(args: SelectSubset<T, repro_additionsUpdateArgs<ExtArgs>>): Prisma__repro_additionsClient<$Result.GetResult<Prisma.$repro_additionsPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Repro_additions.
     * @param {repro_additionsDeleteManyArgs} args - Arguments to filter Repro_additions to delete.
     * @example
     * // Delete a few Repro_additions
     * const { count } = await prisma.repro_additions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends repro_additionsDeleteManyArgs>(args?: SelectSubset<T, repro_additionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Repro_additions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {repro_additionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Repro_additions
     * const repro_additions = await prisma.repro_additions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends repro_additionsUpdateManyArgs>(args: SelectSubset<T, repro_additionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Repro_additions and returns the data updated in the database.
     * @param {repro_additionsUpdateManyAndReturnArgs} args - Arguments to update many Repro_additions.
     * @example
     * // Update many Repro_additions
     * const repro_additions = await prisma.repro_additions.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Repro_additions and only return the `addition_id`
     * const repro_additionsWithAddition_idOnly = await prisma.repro_additions.updateManyAndReturn({
     *   select: { addition_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends repro_additionsUpdateManyAndReturnArgs>(args: SelectSubset<T, repro_additionsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$repro_additionsPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Repro_additions.
     * @param {repro_additionsUpsertArgs} args - Arguments to update or create a Repro_additions.
     * @example
     * // Update or create a Repro_additions
     * const repro_additions = await prisma.repro_additions.upsert({
     *   create: {
     *     // ... data to create a Repro_additions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Repro_additions we want to update
     *   }
     * })
     */
    upsert<T extends repro_additionsUpsertArgs>(args: SelectSubset<T, repro_additionsUpsertArgs<ExtArgs>>): Prisma__repro_additionsClient<$Result.GetResult<Prisma.$repro_additionsPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Repro_additions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {repro_additionsCountArgs} args - Arguments to filter Repro_additions to count.
     * @example
     * // Count the number of Repro_additions
     * const count = await prisma.repro_additions.count({
     *   where: {
     *     // ... the filter for the Repro_additions we want to count
     *   }
     * })
    **/
    count<T extends repro_additionsCountArgs>(
      args?: Subset<T, repro_additionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Repro_additionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Repro_additions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Repro_additionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Repro_additionsAggregateArgs>(args: Subset<T, Repro_additionsAggregateArgs>): Prisma.PrismaPromise<GetRepro_additionsAggregateType<T>>

    /**
     * Group by Repro_additions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {repro_additionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends repro_additionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: repro_additionsGroupByArgs['orderBy'] }
        : { orderBy?: repro_additionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, repro_additionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRepro_additionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the repro_additions model
   */
  readonly fields: repro_additionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for repro_additions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__repro_additionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    distillations<T extends repro_additions$distillationsArgs<ExtArgs> = {}>(args?: Subset<T, repro_additions$distillationsArgs<ExtArgs>>): Prisma__distillationsClient<$Result.GetResult<Prisma.$distillationsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    repro_drums<T extends repro_additions$repro_drumsArgs<ExtArgs> = {}>(args?: Subset<T, repro_additions$repro_drumsArgs<ExtArgs>>): Prisma__repro_drumsClient<$Result.GetResult<Prisma.$repro_drumsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the repro_additions model
   */ 
  interface repro_additionsFieldRefs {
    readonly addition_id: FieldRef<"repro_additions", 'Int'>
    readonly repro_drum_id: FieldRef<"repro_additions", 'Int'>
    readonly distillation_id: FieldRef<"repro_additions", 'Int'>
    readonly date_added: FieldRef<"repro_additions", 'DateTime'>
    readonly volume_added: FieldRef<"repro_additions", 'Int'>
    readonly volume_in_drum: FieldRef<"repro_additions", 'Int'>
    readonly created_at: FieldRef<"repro_additions", 'DateTime'>
    readonly updated_at: FieldRef<"repro_additions", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * repro_additions findUnique
   */
  export type repro_additionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repro_additions
     */
    select?: repro_additionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the repro_additions
     */
    omit?: repro_additionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repro_additionsInclude<ExtArgs> | null
    /**
     * Filter, which repro_additions to fetch.
     */
    where: repro_additionsWhereUniqueInput
  }

  /**
   * repro_additions findUniqueOrThrow
   */
  export type repro_additionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repro_additions
     */
    select?: repro_additionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the repro_additions
     */
    omit?: repro_additionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repro_additionsInclude<ExtArgs> | null
    /**
     * Filter, which repro_additions to fetch.
     */
    where: repro_additionsWhereUniqueInput
  }

  /**
   * repro_additions findFirst
   */
  export type repro_additionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repro_additions
     */
    select?: repro_additionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the repro_additions
     */
    omit?: repro_additionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repro_additionsInclude<ExtArgs> | null
    /**
     * Filter, which repro_additions to fetch.
     */
    where?: repro_additionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of repro_additions to fetch.
     */
    orderBy?: repro_additionsOrderByWithRelationInput | repro_additionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for repro_additions.
     */
    cursor?: repro_additionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` repro_additions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` repro_additions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of repro_additions.
     */
    distinct?: Repro_additionsScalarFieldEnum | Repro_additionsScalarFieldEnum[]
  }

  /**
   * repro_additions findFirstOrThrow
   */
  export type repro_additionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repro_additions
     */
    select?: repro_additionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the repro_additions
     */
    omit?: repro_additionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repro_additionsInclude<ExtArgs> | null
    /**
     * Filter, which repro_additions to fetch.
     */
    where?: repro_additionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of repro_additions to fetch.
     */
    orderBy?: repro_additionsOrderByWithRelationInput | repro_additionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for repro_additions.
     */
    cursor?: repro_additionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` repro_additions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` repro_additions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of repro_additions.
     */
    distinct?: Repro_additionsScalarFieldEnum | Repro_additionsScalarFieldEnum[]
  }

  /**
   * repro_additions findMany
   */
  export type repro_additionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repro_additions
     */
    select?: repro_additionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the repro_additions
     */
    omit?: repro_additionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repro_additionsInclude<ExtArgs> | null
    /**
     * Filter, which repro_additions to fetch.
     */
    where?: repro_additionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of repro_additions to fetch.
     */
    orderBy?: repro_additionsOrderByWithRelationInput | repro_additionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing repro_additions.
     */
    cursor?: repro_additionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` repro_additions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` repro_additions.
     */
    skip?: number
    distinct?: Repro_additionsScalarFieldEnum | Repro_additionsScalarFieldEnum[]
  }

  /**
   * repro_additions create
   */
  export type repro_additionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repro_additions
     */
    select?: repro_additionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the repro_additions
     */
    omit?: repro_additionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repro_additionsInclude<ExtArgs> | null
    /**
     * The data needed to create a repro_additions.
     */
    data: XOR<repro_additionsCreateInput, repro_additionsUncheckedCreateInput>
  }

  /**
   * repro_additions createMany
   */
  export type repro_additionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many repro_additions.
     */
    data: repro_additionsCreateManyInput | repro_additionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * repro_additions createManyAndReturn
   */
  export type repro_additionsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repro_additions
     */
    select?: repro_additionsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the repro_additions
     */
    omit?: repro_additionsOmit<ExtArgs> | null
    /**
     * The data used to create many repro_additions.
     */
    data: repro_additionsCreateManyInput | repro_additionsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repro_additionsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * repro_additions update
   */
  export type repro_additionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repro_additions
     */
    select?: repro_additionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the repro_additions
     */
    omit?: repro_additionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repro_additionsInclude<ExtArgs> | null
    /**
     * The data needed to update a repro_additions.
     */
    data: XOR<repro_additionsUpdateInput, repro_additionsUncheckedUpdateInput>
    /**
     * Choose, which repro_additions to update.
     */
    where: repro_additionsWhereUniqueInput
  }

  /**
   * repro_additions updateMany
   */
  export type repro_additionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update repro_additions.
     */
    data: XOR<repro_additionsUpdateManyMutationInput, repro_additionsUncheckedUpdateManyInput>
    /**
     * Filter which repro_additions to update
     */
    where?: repro_additionsWhereInput
  }

  /**
   * repro_additions updateManyAndReturn
   */
  export type repro_additionsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repro_additions
     */
    select?: repro_additionsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the repro_additions
     */
    omit?: repro_additionsOmit<ExtArgs> | null
    /**
     * The data used to update repro_additions.
     */
    data: XOR<repro_additionsUpdateManyMutationInput, repro_additionsUncheckedUpdateManyInput>
    /**
     * Filter which repro_additions to update
     */
    where?: repro_additionsWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repro_additionsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * repro_additions upsert
   */
  export type repro_additionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repro_additions
     */
    select?: repro_additionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the repro_additions
     */
    omit?: repro_additionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repro_additionsInclude<ExtArgs> | null
    /**
     * The filter to search for the repro_additions to update in case it exists.
     */
    where: repro_additionsWhereUniqueInput
    /**
     * In case the repro_additions found by the `where` argument doesn't exist, create a new repro_additions with this data.
     */
    create: XOR<repro_additionsCreateInput, repro_additionsUncheckedCreateInput>
    /**
     * In case the repro_additions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<repro_additionsUpdateInput, repro_additionsUncheckedUpdateInput>
  }

  /**
   * repro_additions delete
   */
  export type repro_additionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repro_additions
     */
    select?: repro_additionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the repro_additions
     */
    omit?: repro_additionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repro_additionsInclude<ExtArgs> | null
    /**
     * Filter which repro_additions to delete.
     */
    where: repro_additionsWhereUniqueInput
  }

  /**
   * repro_additions deleteMany
   */
  export type repro_additionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which repro_additions to delete
     */
    where?: repro_additionsWhereInput
  }

  /**
   * repro_additions.distillations
   */
  export type repro_additions$distillationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the distillations
     */
    select?: distillationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the distillations
     */
    omit?: distillationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: distillationsInclude<ExtArgs> | null
    where?: distillationsWhereInput
  }

  /**
   * repro_additions.repro_drums
   */
  export type repro_additions$repro_drumsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repro_drums
     */
    select?: repro_drumsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the repro_drums
     */
    omit?: repro_drumsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repro_drumsInclude<ExtArgs> | null
    where?: repro_drumsWhereInput
  }

  /**
   * repro_additions without action
   */
  export type repro_additionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repro_additions
     */
    select?: repro_additionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the repro_additions
     */
    omit?: repro_additionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repro_additionsInclude<ExtArgs> | null
  }


  /**
   * Model repro_drums
   */

  export type AggregateRepro_drums = {
    _count: Repro_drumsCountAggregateOutputType | null
    _avg: Repro_drumsAvgAggregateOutputType | null
    _sum: Repro_drumsSumAggregateOutputType | null
    _min: Repro_drumsMinAggregateOutputType | null
    _max: Repro_drumsMaxAggregateOutputType | null
  }

  export type Repro_drumsAvgAggregateOutputType = {
    repro_drum_id: number | null
    capacity: number | null
    current_volume: number | null
  }

  export type Repro_drumsSumAggregateOutputType = {
    repro_drum_id: number | null
    capacity: number | null
    current_volume: number | null
  }

  export type Repro_drumsMinAggregateOutputType = {
    repro_drum_id: number | null
    date_created: Date | null
    material: string | null
    capacity: number | null
    current_volume: number | null
    created_at: Date | null
    updated_at: Date | null
    status: string | null
    volume_status: string | null
    notes: string | null
    location: string | null
  }

  export type Repro_drumsMaxAggregateOutputType = {
    repro_drum_id: number | null
    date_created: Date | null
    material: string | null
    capacity: number | null
    current_volume: number | null
    created_at: Date | null
    updated_at: Date | null
    status: string | null
    volume_status: string | null
    notes: string | null
    location: string | null
  }

  export type Repro_drumsCountAggregateOutputType = {
    repro_drum_id: number
    date_created: number
    material: number
    capacity: number
    current_volume: number
    created_at: number
    updated_at: number
    status: number
    volume_status: number
    notes: number
    location: number
    _all: number
  }


  export type Repro_drumsAvgAggregateInputType = {
    repro_drum_id?: true
    capacity?: true
    current_volume?: true
  }

  export type Repro_drumsSumAggregateInputType = {
    repro_drum_id?: true
    capacity?: true
    current_volume?: true
  }

  export type Repro_drumsMinAggregateInputType = {
    repro_drum_id?: true
    date_created?: true
    material?: true
    capacity?: true
    current_volume?: true
    created_at?: true
    updated_at?: true
    status?: true
    volume_status?: true
    notes?: true
    location?: true
  }

  export type Repro_drumsMaxAggregateInputType = {
    repro_drum_id?: true
    date_created?: true
    material?: true
    capacity?: true
    current_volume?: true
    created_at?: true
    updated_at?: true
    status?: true
    volume_status?: true
    notes?: true
    location?: true
  }

  export type Repro_drumsCountAggregateInputType = {
    repro_drum_id?: true
    date_created?: true
    material?: true
    capacity?: true
    current_volume?: true
    created_at?: true
    updated_at?: true
    status?: true
    volume_status?: true
    notes?: true
    location?: true
    _all?: true
  }

  export type Repro_drumsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which repro_drums to aggregate.
     */
    where?: repro_drumsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of repro_drums to fetch.
     */
    orderBy?: repro_drumsOrderByWithRelationInput | repro_drumsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: repro_drumsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` repro_drums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` repro_drums.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned repro_drums
    **/
    _count?: true | Repro_drumsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Repro_drumsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Repro_drumsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Repro_drumsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Repro_drumsMaxAggregateInputType
  }

  export type GetRepro_drumsAggregateType<T extends Repro_drumsAggregateArgs> = {
        [P in keyof T & keyof AggregateRepro_drums]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRepro_drums[P]>
      : GetScalarType<T[P], AggregateRepro_drums[P]>
  }




  export type repro_drumsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: repro_drumsWhereInput
    orderBy?: repro_drumsOrderByWithAggregationInput | repro_drumsOrderByWithAggregationInput[]
    by: Repro_drumsScalarFieldEnum[] | Repro_drumsScalarFieldEnum
    having?: repro_drumsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Repro_drumsCountAggregateInputType | true
    _avg?: Repro_drumsAvgAggregateInputType
    _sum?: Repro_drumsSumAggregateInputType
    _min?: Repro_drumsMinAggregateInputType
    _max?: Repro_drumsMaxAggregateInputType
  }

  export type Repro_drumsGroupByOutputType = {
    repro_drum_id: number
    date_created: Date
    material: string
    capacity: number
    current_volume: number
    created_at: Date | null
    updated_at: Date | null
    status: string
    volume_status: string
    notes: string | null
    location: string | null
    _count: Repro_drumsCountAggregateOutputType | null
    _avg: Repro_drumsAvgAggregateOutputType | null
    _sum: Repro_drumsSumAggregateOutputType | null
    _min: Repro_drumsMinAggregateOutputType | null
    _max: Repro_drumsMaxAggregateOutputType | null
  }

  type GetRepro_drumsGroupByPayload<T extends repro_drumsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Repro_drumsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Repro_drumsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Repro_drumsGroupByOutputType[P]>
            : GetScalarType<T[P], Repro_drumsGroupByOutputType[P]>
        }
      >
    >


  export type repro_drumsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    repro_drum_id?: boolean
    date_created?: boolean
    material?: boolean
    capacity?: boolean
    current_volume?: boolean
    created_at?: boolean
    updated_at?: boolean
    status?: boolean
    volume_status?: boolean
    notes?: boolean
    location?: boolean
    repro_additions?: boolean | repro_drums$repro_additionsArgs<ExtArgs>
    transactions?: boolean | repro_drums$transactionsArgs<ExtArgs>
    _count?: boolean | Repro_drumsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["repro_drums"]>

  export type repro_drumsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    repro_drum_id?: boolean
    date_created?: boolean
    material?: boolean
    capacity?: boolean
    current_volume?: boolean
    created_at?: boolean
    updated_at?: boolean
    status?: boolean
    volume_status?: boolean
    notes?: boolean
    location?: boolean
  }, ExtArgs["result"]["repro_drums"]>

  export type repro_drumsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    repro_drum_id?: boolean
    date_created?: boolean
    material?: boolean
    capacity?: boolean
    current_volume?: boolean
    created_at?: boolean
    updated_at?: boolean
    status?: boolean
    volume_status?: boolean
    notes?: boolean
    location?: boolean
  }, ExtArgs["result"]["repro_drums"]>

  export type repro_drumsSelectScalar = {
    repro_drum_id?: boolean
    date_created?: boolean
    material?: boolean
    capacity?: boolean
    current_volume?: boolean
    created_at?: boolean
    updated_at?: boolean
    status?: boolean
    volume_status?: boolean
    notes?: boolean
    location?: boolean
  }

  export type repro_drumsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"repro_drum_id" | "date_created" | "material" | "capacity" | "current_volume" | "created_at" | "updated_at" | "status" | "volume_status" | "notes" | "location", ExtArgs["result"]["repro_drums"]>
  export type repro_drumsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    repro_additions?: boolean | repro_drums$repro_additionsArgs<ExtArgs>
    transactions?: boolean | repro_drums$transactionsArgs<ExtArgs>
    _count?: boolean | Repro_drumsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type repro_drumsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type repro_drumsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $repro_drumsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "repro_drums"
    objects: {
      repro_additions: Prisma.$repro_additionsPayload<ExtArgs>[]
      transactions: Prisma.$transactionsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      repro_drum_id: number
      date_created: Date
      material: string
      capacity: number
      current_volume: number
      created_at: Date | null
      updated_at: Date | null
      status: string
      volume_status: string
      notes: string | null
      location: string | null
    }, ExtArgs["result"]["repro_drums"]>
    composites: {}
  }

  type repro_drumsGetPayload<S extends boolean | null | undefined | repro_drumsDefaultArgs> = $Result.GetResult<Prisma.$repro_drumsPayload, S>

  type repro_drumsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<repro_drumsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Repro_drumsCountAggregateInputType | true
    }

  export interface repro_drumsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['repro_drums'], meta: { name: 'repro_drums' } }
    /**
     * Find zero or one Repro_drums that matches the filter.
     * @param {repro_drumsFindUniqueArgs} args - Arguments to find a Repro_drums
     * @example
     * // Get one Repro_drums
     * const repro_drums = await prisma.repro_drums.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends repro_drumsFindUniqueArgs>(args: SelectSubset<T, repro_drumsFindUniqueArgs<ExtArgs>>): Prisma__repro_drumsClient<$Result.GetResult<Prisma.$repro_drumsPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Repro_drums that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {repro_drumsFindUniqueOrThrowArgs} args - Arguments to find a Repro_drums
     * @example
     * // Get one Repro_drums
     * const repro_drums = await prisma.repro_drums.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends repro_drumsFindUniqueOrThrowArgs>(args: SelectSubset<T, repro_drumsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__repro_drumsClient<$Result.GetResult<Prisma.$repro_drumsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Repro_drums that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {repro_drumsFindFirstArgs} args - Arguments to find a Repro_drums
     * @example
     * // Get one Repro_drums
     * const repro_drums = await prisma.repro_drums.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends repro_drumsFindFirstArgs>(args?: SelectSubset<T, repro_drumsFindFirstArgs<ExtArgs>>): Prisma__repro_drumsClient<$Result.GetResult<Prisma.$repro_drumsPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Repro_drums that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {repro_drumsFindFirstOrThrowArgs} args - Arguments to find a Repro_drums
     * @example
     * // Get one Repro_drums
     * const repro_drums = await prisma.repro_drums.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends repro_drumsFindFirstOrThrowArgs>(args?: SelectSubset<T, repro_drumsFindFirstOrThrowArgs<ExtArgs>>): Prisma__repro_drumsClient<$Result.GetResult<Prisma.$repro_drumsPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Repro_drums that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {repro_drumsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Repro_drums
     * const repro_drums = await prisma.repro_drums.findMany()
     * 
     * // Get first 10 Repro_drums
     * const repro_drums = await prisma.repro_drums.findMany({ take: 10 })
     * 
     * // Only select the `repro_drum_id`
     * const repro_drumsWithRepro_drum_idOnly = await prisma.repro_drums.findMany({ select: { repro_drum_id: true } })
     * 
     */
    findMany<T extends repro_drumsFindManyArgs>(args?: SelectSubset<T, repro_drumsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$repro_drumsPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Repro_drums.
     * @param {repro_drumsCreateArgs} args - Arguments to create a Repro_drums.
     * @example
     * // Create one Repro_drums
     * const Repro_drums = await prisma.repro_drums.create({
     *   data: {
     *     // ... data to create a Repro_drums
     *   }
     * })
     * 
     */
    create<T extends repro_drumsCreateArgs>(args: SelectSubset<T, repro_drumsCreateArgs<ExtArgs>>): Prisma__repro_drumsClient<$Result.GetResult<Prisma.$repro_drumsPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Repro_drums.
     * @param {repro_drumsCreateManyArgs} args - Arguments to create many Repro_drums.
     * @example
     * // Create many Repro_drums
     * const repro_drums = await prisma.repro_drums.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends repro_drumsCreateManyArgs>(args?: SelectSubset<T, repro_drumsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Repro_drums and returns the data saved in the database.
     * @param {repro_drumsCreateManyAndReturnArgs} args - Arguments to create many Repro_drums.
     * @example
     * // Create many Repro_drums
     * const repro_drums = await prisma.repro_drums.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Repro_drums and only return the `repro_drum_id`
     * const repro_drumsWithRepro_drum_idOnly = await prisma.repro_drums.createManyAndReturn({
     *   select: { repro_drum_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends repro_drumsCreateManyAndReturnArgs>(args?: SelectSubset<T, repro_drumsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$repro_drumsPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Repro_drums.
     * @param {repro_drumsDeleteArgs} args - Arguments to delete one Repro_drums.
     * @example
     * // Delete one Repro_drums
     * const Repro_drums = await prisma.repro_drums.delete({
     *   where: {
     *     // ... filter to delete one Repro_drums
     *   }
     * })
     * 
     */
    delete<T extends repro_drumsDeleteArgs>(args: SelectSubset<T, repro_drumsDeleteArgs<ExtArgs>>): Prisma__repro_drumsClient<$Result.GetResult<Prisma.$repro_drumsPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Repro_drums.
     * @param {repro_drumsUpdateArgs} args - Arguments to update one Repro_drums.
     * @example
     * // Update one Repro_drums
     * const repro_drums = await prisma.repro_drums.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends repro_drumsUpdateArgs>(args: SelectSubset<T, repro_drumsUpdateArgs<ExtArgs>>): Prisma__repro_drumsClient<$Result.GetResult<Prisma.$repro_drumsPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Repro_drums.
     * @param {repro_drumsDeleteManyArgs} args - Arguments to filter Repro_drums to delete.
     * @example
     * // Delete a few Repro_drums
     * const { count } = await prisma.repro_drums.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends repro_drumsDeleteManyArgs>(args?: SelectSubset<T, repro_drumsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Repro_drums.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {repro_drumsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Repro_drums
     * const repro_drums = await prisma.repro_drums.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends repro_drumsUpdateManyArgs>(args: SelectSubset<T, repro_drumsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Repro_drums and returns the data updated in the database.
     * @param {repro_drumsUpdateManyAndReturnArgs} args - Arguments to update many Repro_drums.
     * @example
     * // Update many Repro_drums
     * const repro_drums = await prisma.repro_drums.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Repro_drums and only return the `repro_drum_id`
     * const repro_drumsWithRepro_drum_idOnly = await prisma.repro_drums.updateManyAndReturn({
     *   select: { repro_drum_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends repro_drumsUpdateManyAndReturnArgs>(args: SelectSubset<T, repro_drumsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$repro_drumsPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Repro_drums.
     * @param {repro_drumsUpsertArgs} args - Arguments to update or create a Repro_drums.
     * @example
     * // Update or create a Repro_drums
     * const repro_drums = await prisma.repro_drums.upsert({
     *   create: {
     *     // ... data to create a Repro_drums
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Repro_drums we want to update
     *   }
     * })
     */
    upsert<T extends repro_drumsUpsertArgs>(args: SelectSubset<T, repro_drumsUpsertArgs<ExtArgs>>): Prisma__repro_drumsClient<$Result.GetResult<Prisma.$repro_drumsPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Repro_drums.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {repro_drumsCountArgs} args - Arguments to filter Repro_drums to count.
     * @example
     * // Count the number of Repro_drums
     * const count = await prisma.repro_drums.count({
     *   where: {
     *     // ... the filter for the Repro_drums we want to count
     *   }
     * })
    **/
    count<T extends repro_drumsCountArgs>(
      args?: Subset<T, repro_drumsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Repro_drumsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Repro_drums.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Repro_drumsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Repro_drumsAggregateArgs>(args: Subset<T, Repro_drumsAggregateArgs>): Prisma.PrismaPromise<GetRepro_drumsAggregateType<T>>

    /**
     * Group by Repro_drums.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {repro_drumsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends repro_drumsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: repro_drumsGroupByArgs['orderBy'] }
        : { orderBy?: repro_drumsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, repro_drumsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRepro_drumsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the repro_drums model
   */
  readonly fields: repro_drumsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for repro_drums.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__repro_drumsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    repro_additions<T extends repro_drums$repro_additionsArgs<ExtArgs> = {}>(args?: Subset<T, repro_drums$repro_additionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$repro_additionsPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    transactions<T extends repro_drums$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, repro_drums$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the repro_drums model
   */ 
  interface repro_drumsFieldRefs {
    readonly repro_drum_id: FieldRef<"repro_drums", 'Int'>
    readonly date_created: FieldRef<"repro_drums", 'DateTime'>
    readonly material: FieldRef<"repro_drums", 'String'>
    readonly capacity: FieldRef<"repro_drums", 'Int'>
    readonly current_volume: FieldRef<"repro_drums", 'Int'>
    readonly created_at: FieldRef<"repro_drums", 'DateTime'>
    readonly updated_at: FieldRef<"repro_drums", 'DateTime'>
    readonly status: FieldRef<"repro_drums", 'String'>
    readonly volume_status: FieldRef<"repro_drums", 'String'>
    readonly notes: FieldRef<"repro_drums", 'String'>
    readonly location: FieldRef<"repro_drums", 'String'>
  }
    

  // Custom InputTypes
  /**
   * repro_drums findUnique
   */
  export type repro_drumsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repro_drums
     */
    select?: repro_drumsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the repro_drums
     */
    omit?: repro_drumsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repro_drumsInclude<ExtArgs> | null
    /**
     * Filter, which repro_drums to fetch.
     */
    where: repro_drumsWhereUniqueInput
  }

  /**
   * repro_drums findUniqueOrThrow
   */
  export type repro_drumsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repro_drums
     */
    select?: repro_drumsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the repro_drums
     */
    omit?: repro_drumsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repro_drumsInclude<ExtArgs> | null
    /**
     * Filter, which repro_drums to fetch.
     */
    where: repro_drumsWhereUniqueInput
  }

  /**
   * repro_drums findFirst
   */
  export type repro_drumsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repro_drums
     */
    select?: repro_drumsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the repro_drums
     */
    omit?: repro_drumsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repro_drumsInclude<ExtArgs> | null
    /**
     * Filter, which repro_drums to fetch.
     */
    where?: repro_drumsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of repro_drums to fetch.
     */
    orderBy?: repro_drumsOrderByWithRelationInput | repro_drumsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for repro_drums.
     */
    cursor?: repro_drumsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` repro_drums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` repro_drums.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of repro_drums.
     */
    distinct?: Repro_drumsScalarFieldEnum | Repro_drumsScalarFieldEnum[]
  }

  /**
   * repro_drums findFirstOrThrow
   */
  export type repro_drumsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repro_drums
     */
    select?: repro_drumsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the repro_drums
     */
    omit?: repro_drumsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repro_drumsInclude<ExtArgs> | null
    /**
     * Filter, which repro_drums to fetch.
     */
    where?: repro_drumsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of repro_drums to fetch.
     */
    orderBy?: repro_drumsOrderByWithRelationInput | repro_drumsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for repro_drums.
     */
    cursor?: repro_drumsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` repro_drums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` repro_drums.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of repro_drums.
     */
    distinct?: Repro_drumsScalarFieldEnum | Repro_drumsScalarFieldEnum[]
  }

  /**
   * repro_drums findMany
   */
  export type repro_drumsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repro_drums
     */
    select?: repro_drumsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the repro_drums
     */
    omit?: repro_drumsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repro_drumsInclude<ExtArgs> | null
    /**
     * Filter, which repro_drums to fetch.
     */
    where?: repro_drumsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of repro_drums to fetch.
     */
    orderBy?: repro_drumsOrderByWithRelationInput | repro_drumsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing repro_drums.
     */
    cursor?: repro_drumsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` repro_drums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` repro_drums.
     */
    skip?: number
    distinct?: Repro_drumsScalarFieldEnum | Repro_drumsScalarFieldEnum[]
  }

  /**
   * repro_drums create
   */
  export type repro_drumsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repro_drums
     */
    select?: repro_drumsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the repro_drums
     */
    omit?: repro_drumsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repro_drumsInclude<ExtArgs> | null
    /**
     * The data needed to create a repro_drums.
     */
    data: XOR<repro_drumsCreateInput, repro_drumsUncheckedCreateInput>
  }

  /**
   * repro_drums createMany
   */
  export type repro_drumsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many repro_drums.
     */
    data: repro_drumsCreateManyInput | repro_drumsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * repro_drums createManyAndReturn
   */
  export type repro_drumsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repro_drums
     */
    select?: repro_drumsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the repro_drums
     */
    omit?: repro_drumsOmit<ExtArgs> | null
    /**
     * The data used to create many repro_drums.
     */
    data: repro_drumsCreateManyInput | repro_drumsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * repro_drums update
   */
  export type repro_drumsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repro_drums
     */
    select?: repro_drumsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the repro_drums
     */
    omit?: repro_drumsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repro_drumsInclude<ExtArgs> | null
    /**
     * The data needed to update a repro_drums.
     */
    data: XOR<repro_drumsUpdateInput, repro_drumsUncheckedUpdateInput>
    /**
     * Choose, which repro_drums to update.
     */
    where: repro_drumsWhereUniqueInput
  }

  /**
   * repro_drums updateMany
   */
  export type repro_drumsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update repro_drums.
     */
    data: XOR<repro_drumsUpdateManyMutationInput, repro_drumsUncheckedUpdateManyInput>
    /**
     * Filter which repro_drums to update
     */
    where?: repro_drumsWhereInput
  }

  /**
   * repro_drums updateManyAndReturn
   */
  export type repro_drumsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repro_drums
     */
    select?: repro_drumsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the repro_drums
     */
    omit?: repro_drumsOmit<ExtArgs> | null
    /**
     * The data used to update repro_drums.
     */
    data: XOR<repro_drumsUpdateManyMutationInput, repro_drumsUncheckedUpdateManyInput>
    /**
     * Filter which repro_drums to update
     */
    where?: repro_drumsWhereInput
  }

  /**
   * repro_drums upsert
   */
  export type repro_drumsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repro_drums
     */
    select?: repro_drumsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the repro_drums
     */
    omit?: repro_drumsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repro_drumsInclude<ExtArgs> | null
    /**
     * The filter to search for the repro_drums to update in case it exists.
     */
    where: repro_drumsWhereUniqueInput
    /**
     * In case the repro_drums found by the `where` argument doesn't exist, create a new repro_drums with this data.
     */
    create: XOR<repro_drumsCreateInput, repro_drumsUncheckedCreateInput>
    /**
     * In case the repro_drums was found with the provided `where` argument, update it with this data.
     */
    update: XOR<repro_drumsUpdateInput, repro_drumsUncheckedUpdateInput>
  }

  /**
   * repro_drums delete
   */
  export type repro_drumsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repro_drums
     */
    select?: repro_drumsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the repro_drums
     */
    omit?: repro_drumsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repro_drumsInclude<ExtArgs> | null
    /**
     * Filter which repro_drums to delete.
     */
    where: repro_drumsWhereUniqueInput
  }

  /**
   * repro_drums deleteMany
   */
  export type repro_drumsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which repro_drums to delete
     */
    where?: repro_drumsWhereInput
  }

  /**
   * repro_drums.repro_additions
   */
  export type repro_drums$repro_additionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repro_additions
     */
    select?: repro_additionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the repro_additions
     */
    omit?: repro_additionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repro_additionsInclude<ExtArgs> | null
    where?: repro_additionsWhereInput
    orderBy?: repro_additionsOrderByWithRelationInput | repro_additionsOrderByWithRelationInput[]
    cursor?: repro_additionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Repro_additionsScalarFieldEnum | Repro_additionsScalarFieldEnum[]
  }

  /**
   * repro_drums.transactions
   */
  export type repro_drums$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions
     */
    omit?: transactionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    where?: transactionsWhereInput
    orderBy?: transactionsOrderByWithRelationInput | transactionsOrderByWithRelationInput[]
    cursor?: transactionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionsScalarFieldEnum | TransactionsScalarFieldEnum[]
  }

  /**
   * repro_drums without action
   */
  export type repro_drumsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repro_drums
     */
    select?: repro_drumsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the repro_drums
     */
    omit?: repro_drumsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repro_drumsInclude<ExtArgs> | null
  }


  /**
   * Model transactions
   */

  export type AggregateTransactions = {
    _count: TransactionsCountAggregateOutputType | null
    _avg: TransactionsAvgAggregateOutputType | null
    _sum: TransactionsSumAggregateOutputType | null
    _min: TransactionsMinAggregateOutputType | null
    _max: TransactionsMaxAggregateOutputType | null
  }

  export type TransactionsAvgAggregateOutputType = {
    tx_id: number | null
    drum_id: number | null
    repro_id: number | null
    process_id: number | null
    delivery_id: number | null
  }

  export type TransactionsSumAggregateOutputType = {
    tx_id: number | null
    drum_id: number | null
    repro_id: number | null
    process_id: number | null
    delivery_id: number | null
  }

  export type TransactionsMinAggregateOutputType = {
    tx_id: number | null
    tx_type: string | null
    tx_date: Date | null
    material: string | null
    drum_id: number | null
    repro_id: number | null
    tx_notes: string | null
    created_at: Date | null
    updated_at: Date | null
    process_id: number | null
    direction: string | null
    delivery_id: number | null
    batch_code: string | null
  }

  export type TransactionsMaxAggregateOutputType = {
    tx_id: number | null
    tx_type: string | null
    tx_date: Date | null
    material: string | null
    drum_id: number | null
    repro_id: number | null
    tx_notes: string | null
    created_at: Date | null
    updated_at: Date | null
    process_id: number | null
    direction: string | null
    delivery_id: number | null
    batch_code: string | null
  }

  export type TransactionsCountAggregateOutputType = {
    tx_id: number
    tx_type: number
    tx_date: number
    material: number
    drum_id: number
    repro_id: number
    tx_notes: number
    created_at: number
    updated_at: number
    process_id: number
    direction: number
    delivery_id: number
    batch_code: number
    _all: number
  }


  export type TransactionsAvgAggregateInputType = {
    tx_id?: true
    drum_id?: true
    repro_id?: true
    process_id?: true
    delivery_id?: true
  }

  export type TransactionsSumAggregateInputType = {
    tx_id?: true
    drum_id?: true
    repro_id?: true
    process_id?: true
    delivery_id?: true
  }

  export type TransactionsMinAggregateInputType = {
    tx_id?: true
    tx_type?: true
    tx_date?: true
    material?: true
    drum_id?: true
    repro_id?: true
    tx_notes?: true
    created_at?: true
    updated_at?: true
    process_id?: true
    direction?: true
    delivery_id?: true
    batch_code?: true
  }

  export type TransactionsMaxAggregateInputType = {
    tx_id?: true
    tx_type?: true
    tx_date?: true
    material?: true
    drum_id?: true
    repro_id?: true
    tx_notes?: true
    created_at?: true
    updated_at?: true
    process_id?: true
    direction?: true
    delivery_id?: true
    batch_code?: true
  }

  export type TransactionsCountAggregateInputType = {
    tx_id?: true
    tx_type?: true
    tx_date?: true
    material?: true
    drum_id?: true
    repro_id?: true
    tx_notes?: true
    created_at?: true
    updated_at?: true
    process_id?: true
    direction?: true
    delivery_id?: true
    batch_code?: true
    _all?: true
  }

  export type TransactionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which transactions to aggregate.
     */
    where?: transactionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transactions to fetch.
     */
    orderBy?: transactionsOrderByWithRelationInput | transactionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: transactionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned transactions
    **/
    _count?: true | TransactionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransactionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransactionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionsMaxAggregateInputType
  }

  export type GetTransactionsAggregateType<T extends TransactionsAggregateArgs> = {
        [P in keyof T & keyof AggregateTransactions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransactions[P]>
      : GetScalarType<T[P], AggregateTransactions[P]>
  }




  export type transactionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: transactionsWhereInput
    orderBy?: transactionsOrderByWithAggregationInput | transactionsOrderByWithAggregationInput[]
    by: TransactionsScalarFieldEnum[] | TransactionsScalarFieldEnum
    having?: transactionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionsCountAggregateInputType | true
    _avg?: TransactionsAvgAggregateInputType
    _sum?: TransactionsSumAggregateInputType
    _min?: TransactionsMinAggregateInputType
    _max?: TransactionsMaxAggregateInputType
  }

  export type TransactionsGroupByOutputType = {
    tx_id: number
    tx_type: string
    tx_date: Date
    material: string | null
    drum_id: number | null
    repro_id: number | null
    tx_notes: string | null
    created_at: Date | null
    updated_at: Date | null
    process_id: number | null
    direction: string | null
    delivery_id: number | null
    batch_code: string | null
    _count: TransactionsCountAggregateOutputType | null
    _avg: TransactionsAvgAggregateOutputType | null
    _sum: TransactionsSumAggregateOutputType | null
    _min: TransactionsMinAggregateOutputType | null
    _max: TransactionsMaxAggregateOutputType | null
  }

  type GetTransactionsGroupByPayload<T extends transactionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransactionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionsGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionsGroupByOutputType[P]>
        }
      >
    >


  export type transactionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tx_id?: boolean
    tx_type?: boolean
    tx_date?: boolean
    material?: boolean
    drum_id?: boolean
    repro_id?: boolean
    tx_notes?: boolean
    created_at?: boolean
    updated_at?: boolean
    process_id?: boolean
    direction?: boolean
    delivery_id?: boolean
    batch_code?: boolean
    deliveries?: boolean | transactions$deliveriesArgs<ExtArgs>
    new_drums?: boolean | transactions$new_drumsArgs<ExtArgs>
    processes?: boolean | transactions$processesArgs<ExtArgs>
    repro_drums?: boolean | transactions$repro_drumsArgs<ExtArgs>
  }, ExtArgs["result"]["transactions"]>

  export type transactionsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tx_id?: boolean
    tx_type?: boolean
    tx_date?: boolean
    material?: boolean
    drum_id?: boolean
    repro_id?: boolean
    tx_notes?: boolean
    created_at?: boolean
    updated_at?: boolean
    process_id?: boolean
    direction?: boolean
    delivery_id?: boolean
    batch_code?: boolean
    deliveries?: boolean | transactions$deliveriesArgs<ExtArgs>
    new_drums?: boolean | transactions$new_drumsArgs<ExtArgs>
    processes?: boolean | transactions$processesArgs<ExtArgs>
    repro_drums?: boolean | transactions$repro_drumsArgs<ExtArgs>
  }, ExtArgs["result"]["transactions"]>

  export type transactionsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tx_id?: boolean
    tx_type?: boolean
    tx_date?: boolean
    material?: boolean
    drum_id?: boolean
    repro_id?: boolean
    tx_notes?: boolean
    created_at?: boolean
    updated_at?: boolean
    process_id?: boolean
    direction?: boolean
    delivery_id?: boolean
    batch_code?: boolean
    deliveries?: boolean | transactions$deliveriesArgs<ExtArgs>
    new_drums?: boolean | transactions$new_drumsArgs<ExtArgs>
    processes?: boolean | transactions$processesArgs<ExtArgs>
    repro_drums?: boolean | transactions$repro_drumsArgs<ExtArgs>
  }, ExtArgs["result"]["transactions"]>

  export type transactionsSelectScalar = {
    tx_id?: boolean
    tx_type?: boolean
    tx_date?: boolean
    material?: boolean
    drum_id?: boolean
    repro_id?: boolean
    tx_notes?: boolean
    created_at?: boolean
    updated_at?: boolean
    process_id?: boolean
    direction?: boolean
    delivery_id?: boolean
    batch_code?: boolean
  }

  export type transactionsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"tx_id" | "tx_type" | "tx_date" | "material" | "drum_id" | "repro_id" | "tx_notes" | "created_at" | "updated_at" | "process_id" | "direction" | "delivery_id" | "batch_code", ExtArgs["result"]["transactions"]>
  export type transactionsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    deliveries?: boolean | transactions$deliveriesArgs<ExtArgs>
    new_drums?: boolean | transactions$new_drumsArgs<ExtArgs>
    processes?: boolean | transactions$processesArgs<ExtArgs>
    repro_drums?: boolean | transactions$repro_drumsArgs<ExtArgs>
  }
  export type transactionsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    deliveries?: boolean | transactions$deliveriesArgs<ExtArgs>
    new_drums?: boolean | transactions$new_drumsArgs<ExtArgs>
    processes?: boolean | transactions$processesArgs<ExtArgs>
    repro_drums?: boolean | transactions$repro_drumsArgs<ExtArgs>
  }
  export type transactionsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    deliveries?: boolean | transactions$deliveriesArgs<ExtArgs>
    new_drums?: boolean | transactions$new_drumsArgs<ExtArgs>
    processes?: boolean | transactions$processesArgs<ExtArgs>
    repro_drums?: boolean | transactions$repro_drumsArgs<ExtArgs>
  }

  export type $transactionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "transactions"
    objects: {
      deliveries: Prisma.$deliveriesPayload<ExtArgs> | null
      new_drums: Prisma.$new_drumsPayload<ExtArgs> | null
      processes: Prisma.$processesPayload<ExtArgs> | null
      repro_drums: Prisma.$repro_drumsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      tx_id: number
      tx_type: string
      tx_date: Date
      material: string | null
      drum_id: number | null
      repro_id: number | null
      tx_notes: string | null
      created_at: Date | null
      updated_at: Date | null
      process_id: number | null
      direction: string | null
      delivery_id: number | null
      batch_code: string | null
    }, ExtArgs["result"]["transactions"]>
    composites: {}
  }

  type transactionsGetPayload<S extends boolean | null | undefined | transactionsDefaultArgs> = $Result.GetResult<Prisma.$transactionsPayload, S>

  type transactionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<transactionsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TransactionsCountAggregateInputType | true
    }

  export interface transactionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['transactions'], meta: { name: 'transactions' } }
    /**
     * Find zero or one Transactions that matches the filter.
     * @param {transactionsFindUniqueArgs} args - Arguments to find a Transactions
     * @example
     * // Get one Transactions
     * const transactions = await prisma.transactions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends transactionsFindUniqueArgs>(args: SelectSubset<T, transactionsFindUniqueArgs<ExtArgs>>): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Transactions that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {transactionsFindUniqueOrThrowArgs} args - Arguments to find a Transactions
     * @example
     * // Get one Transactions
     * const transactions = await prisma.transactions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends transactionsFindUniqueOrThrowArgs>(args: SelectSubset<T, transactionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactionsFindFirstArgs} args - Arguments to find a Transactions
     * @example
     * // Get one Transactions
     * const transactions = await prisma.transactions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends transactionsFindFirstArgs>(args?: SelectSubset<T, transactionsFindFirstArgs<ExtArgs>>): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Transactions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactionsFindFirstOrThrowArgs} args - Arguments to find a Transactions
     * @example
     * // Get one Transactions
     * const transactions = await prisma.transactions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends transactionsFindFirstOrThrowArgs>(args?: SelectSubset<T, transactionsFindFirstOrThrowArgs<ExtArgs>>): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactionsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transactions
     * const transactions = await prisma.transactions.findMany()
     * 
     * // Get first 10 Transactions
     * const transactions = await prisma.transactions.findMany({ take: 10 })
     * 
     * // Only select the `tx_id`
     * const transactionsWithTx_idOnly = await prisma.transactions.findMany({ select: { tx_id: true } })
     * 
     */
    findMany<T extends transactionsFindManyArgs>(args?: SelectSubset<T, transactionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Transactions.
     * @param {transactionsCreateArgs} args - Arguments to create a Transactions.
     * @example
     * // Create one Transactions
     * const Transactions = await prisma.transactions.create({
     *   data: {
     *     // ... data to create a Transactions
     *   }
     * })
     * 
     */
    create<T extends transactionsCreateArgs>(args: SelectSubset<T, transactionsCreateArgs<ExtArgs>>): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Transactions.
     * @param {transactionsCreateManyArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transactions = await prisma.transactions.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends transactionsCreateManyArgs>(args?: SelectSubset<T, transactionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Transactions and returns the data saved in the database.
     * @param {transactionsCreateManyAndReturnArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transactions = await prisma.transactions.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Transactions and only return the `tx_id`
     * const transactionsWithTx_idOnly = await prisma.transactions.createManyAndReturn({
     *   select: { tx_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends transactionsCreateManyAndReturnArgs>(args?: SelectSubset<T, transactionsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Transactions.
     * @param {transactionsDeleteArgs} args - Arguments to delete one Transactions.
     * @example
     * // Delete one Transactions
     * const Transactions = await prisma.transactions.delete({
     *   where: {
     *     // ... filter to delete one Transactions
     *   }
     * })
     * 
     */
    delete<T extends transactionsDeleteArgs>(args: SelectSubset<T, transactionsDeleteArgs<ExtArgs>>): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Transactions.
     * @param {transactionsUpdateArgs} args - Arguments to update one Transactions.
     * @example
     * // Update one Transactions
     * const transactions = await prisma.transactions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends transactionsUpdateArgs>(args: SelectSubset<T, transactionsUpdateArgs<ExtArgs>>): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Transactions.
     * @param {transactionsDeleteManyArgs} args - Arguments to filter Transactions to delete.
     * @example
     * // Delete a few Transactions
     * const { count } = await prisma.transactions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends transactionsDeleteManyArgs>(args?: SelectSubset<T, transactionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transactions
     * const transactions = await prisma.transactions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends transactionsUpdateManyArgs>(args: SelectSubset<T, transactionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions and returns the data updated in the database.
     * @param {transactionsUpdateManyAndReturnArgs} args - Arguments to update many Transactions.
     * @example
     * // Update many Transactions
     * const transactions = await prisma.transactions.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Transactions and only return the `tx_id`
     * const transactionsWithTx_idOnly = await prisma.transactions.updateManyAndReturn({
     *   select: { tx_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends transactionsUpdateManyAndReturnArgs>(args: SelectSubset<T, transactionsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Transactions.
     * @param {transactionsUpsertArgs} args - Arguments to update or create a Transactions.
     * @example
     * // Update or create a Transactions
     * const transactions = await prisma.transactions.upsert({
     *   create: {
     *     // ... data to create a Transactions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transactions we want to update
     *   }
     * })
     */
    upsert<T extends transactionsUpsertArgs>(args: SelectSubset<T, transactionsUpsertArgs<ExtArgs>>): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactionsCountArgs} args - Arguments to filter Transactions to count.
     * @example
     * // Count the number of Transactions
     * const count = await prisma.transactions.count({
     *   where: {
     *     // ... the filter for the Transactions we want to count
     *   }
     * })
    **/
    count<T extends transactionsCountArgs>(
      args?: Subset<T, transactionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionsAggregateArgs>(args: Subset<T, TransactionsAggregateArgs>): Prisma.PrismaPromise<GetTransactionsAggregateType<T>>

    /**
     * Group by Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends transactionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: transactionsGroupByArgs['orderBy'] }
        : { orderBy?: transactionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, transactionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the transactions model
   */
  readonly fields: transactionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for transactions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__transactionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    deliveries<T extends transactions$deliveriesArgs<ExtArgs> = {}>(args?: Subset<T, transactions$deliveriesArgs<ExtArgs>>): Prisma__deliveriesClient<$Result.GetResult<Prisma.$deliveriesPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    new_drums<T extends transactions$new_drumsArgs<ExtArgs> = {}>(args?: Subset<T, transactions$new_drumsArgs<ExtArgs>>): Prisma__new_drumsClient<$Result.GetResult<Prisma.$new_drumsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    processes<T extends transactions$processesArgs<ExtArgs> = {}>(args?: Subset<T, transactions$processesArgs<ExtArgs>>): Prisma__processesClient<$Result.GetResult<Prisma.$processesPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    repro_drums<T extends transactions$repro_drumsArgs<ExtArgs> = {}>(args?: Subset<T, transactions$repro_drumsArgs<ExtArgs>>): Prisma__repro_drumsClient<$Result.GetResult<Prisma.$repro_drumsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the transactions model
   */ 
  interface transactionsFieldRefs {
    readonly tx_id: FieldRef<"transactions", 'Int'>
    readonly tx_type: FieldRef<"transactions", 'String'>
    readonly tx_date: FieldRef<"transactions", 'DateTime'>
    readonly material: FieldRef<"transactions", 'String'>
    readonly drum_id: FieldRef<"transactions", 'Int'>
    readonly repro_id: FieldRef<"transactions", 'Int'>
    readonly tx_notes: FieldRef<"transactions", 'String'>
    readonly created_at: FieldRef<"transactions", 'DateTime'>
    readonly updated_at: FieldRef<"transactions", 'DateTime'>
    readonly process_id: FieldRef<"transactions", 'Int'>
    readonly direction: FieldRef<"transactions", 'String'>
    readonly delivery_id: FieldRef<"transactions", 'Int'>
    readonly batch_code: FieldRef<"transactions", 'String'>
  }
    

  // Custom InputTypes
  /**
   * transactions findUnique
   */
  export type transactionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions
     */
    omit?: transactionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    /**
     * Filter, which transactions to fetch.
     */
    where: transactionsWhereUniqueInput
  }

  /**
   * transactions findUniqueOrThrow
   */
  export type transactionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions
     */
    omit?: transactionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    /**
     * Filter, which transactions to fetch.
     */
    where: transactionsWhereUniqueInput
  }

  /**
   * transactions findFirst
   */
  export type transactionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions
     */
    omit?: transactionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    /**
     * Filter, which transactions to fetch.
     */
    where?: transactionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transactions to fetch.
     */
    orderBy?: transactionsOrderByWithRelationInput | transactionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for transactions.
     */
    cursor?: transactionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of transactions.
     */
    distinct?: TransactionsScalarFieldEnum | TransactionsScalarFieldEnum[]
  }

  /**
   * transactions findFirstOrThrow
   */
  export type transactionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions
     */
    omit?: transactionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    /**
     * Filter, which transactions to fetch.
     */
    where?: transactionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transactions to fetch.
     */
    orderBy?: transactionsOrderByWithRelationInput | transactionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for transactions.
     */
    cursor?: transactionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of transactions.
     */
    distinct?: TransactionsScalarFieldEnum | TransactionsScalarFieldEnum[]
  }

  /**
   * transactions findMany
   */
  export type transactionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions
     */
    omit?: transactionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    /**
     * Filter, which transactions to fetch.
     */
    where?: transactionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transactions to fetch.
     */
    orderBy?: transactionsOrderByWithRelationInput | transactionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing transactions.
     */
    cursor?: transactionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transactions.
     */
    skip?: number
    distinct?: TransactionsScalarFieldEnum | TransactionsScalarFieldEnum[]
  }

  /**
   * transactions create
   */
  export type transactionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions
     */
    omit?: transactionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    /**
     * The data needed to create a transactions.
     */
    data?: XOR<transactionsCreateInput, transactionsUncheckedCreateInput>
  }

  /**
   * transactions createMany
   */
  export type transactionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many transactions.
     */
    data: transactionsCreateManyInput | transactionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * transactions createManyAndReturn
   */
  export type transactionsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the transactions
     */
    omit?: transactionsOmit<ExtArgs> | null
    /**
     * The data used to create many transactions.
     */
    data: transactionsCreateManyInput | transactionsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * transactions update
   */
  export type transactionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions
     */
    omit?: transactionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    /**
     * The data needed to update a transactions.
     */
    data: XOR<transactionsUpdateInput, transactionsUncheckedUpdateInput>
    /**
     * Choose, which transactions to update.
     */
    where: transactionsWhereUniqueInput
  }

  /**
   * transactions updateMany
   */
  export type transactionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update transactions.
     */
    data: XOR<transactionsUpdateManyMutationInput, transactionsUncheckedUpdateManyInput>
    /**
     * Filter which transactions to update
     */
    where?: transactionsWhereInput
  }

  /**
   * transactions updateManyAndReturn
   */
  export type transactionsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the transactions
     */
    omit?: transactionsOmit<ExtArgs> | null
    /**
     * The data used to update transactions.
     */
    data: XOR<transactionsUpdateManyMutationInput, transactionsUncheckedUpdateManyInput>
    /**
     * Filter which transactions to update
     */
    where?: transactionsWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * transactions upsert
   */
  export type transactionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions
     */
    omit?: transactionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    /**
     * The filter to search for the transactions to update in case it exists.
     */
    where: transactionsWhereUniqueInput
    /**
     * In case the transactions found by the `where` argument doesn't exist, create a new transactions with this data.
     */
    create: XOR<transactionsCreateInput, transactionsUncheckedCreateInput>
    /**
     * In case the transactions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<transactionsUpdateInput, transactionsUncheckedUpdateInput>
  }

  /**
   * transactions delete
   */
  export type transactionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions
     */
    omit?: transactionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    /**
     * Filter which transactions to delete.
     */
    where: transactionsWhereUniqueInput
  }

  /**
   * transactions deleteMany
   */
  export type transactionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which transactions to delete
     */
    where?: transactionsWhereInput
  }

  /**
   * transactions.deliveries
   */
  export type transactions$deliveriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deliveries
     */
    select?: deliveriesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the deliveries
     */
    omit?: deliveriesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: deliveriesInclude<ExtArgs> | null
    where?: deliveriesWhereInput
  }

  /**
   * transactions.new_drums
   */
  export type transactions$new_drumsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the new_drums
     */
    select?: new_drumsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the new_drums
     */
    omit?: new_drumsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: new_drumsInclude<ExtArgs> | null
    where?: new_drumsWhereInput
  }

  /**
   * transactions.processes
   */
  export type transactions$processesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the processes
     */
    select?: processesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the processes
     */
    omit?: processesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: processesInclude<ExtArgs> | null
    where?: processesWhereInput
  }

  /**
   * transactions.repro_drums
   */
  export type transactions$repro_drumsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repro_drums
     */
    select?: repro_drumsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the repro_drums
     */
    omit?: repro_drumsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repro_drumsInclude<ExtArgs> | null
    where?: repro_drumsWhereInput
  }

  /**
   * transactions without action
   */
  export type transactionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions
     */
    omit?: transactionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
  }


  /**
   * Model stills
   */

  export type AggregateStills = {
    _count: StillsCountAggregateOutputType | null
    _avg: StillsAvgAggregateOutputType | null
    _sum: StillsSumAggregateOutputType | null
    _min: StillsMinAggregateOutputType | null
    _max: StillsMaxAggregateOutputType | null
  }

  export type StillsAvgAggregateOutputType = {
    power: number | null
    capacity: number | null
  }

  export type StillsSumAggregateOutputType = {
    power: number | null
    capacity: number | null
  }

  export type StillsMinAggregateOutputType = {
    code: string | null
    site: string | null
    power: number | null
    capacity: number | null
    is_vacuum: boolean | null
    is_operational: boolean | null
  }

  export type StillsMaxAggregateOutputType = {
    code: string | null
    site: string | null
    power: number | null
    capacity: number | null
    is_vacuum: boolean | null
    is_operational: boolean | null
  }

  export type StillsCountAggregateOutputType = {
    code: number
    site: number
    power: number
    capacity: number
    is_vacuum: number
    is_operational: number
    _all: number
  }


  export type StillsAvgAggregateInputType = {
    power?: true
    capacity?: true
  }

  export type StillsSumAggregateInputType = {
    power?: true
    capacity?: true
  }

  export type StillsMinAggregateInputType = {
    code?: true
    site?: true
    power?: true
    capacity?: true
    is_vacuum?: true
    is_operational?: true
  }

  export type StillsMaxAggregateInputType = {
    code?: true
    site?: true
    power?: true
    capacity?: true
    is_vacuum?: true
    is_operational?: true
  }

  export type StillsCountAggregateInputType = {
    code?: true
    site?: true
    power?: true
    capacity?: true
    is_vacuum?: true
    is_operational?: true
    _all?: true
  }

  export type StillsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which stills to aggregate.
     */
    where?: stillsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of stills to fetch.
     */
    orderBy?: stillsOrderByWithRelationInput | stillsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: stillsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` stills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` stills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned stills
    **/
    _count?: true | StillsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StillsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StillsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StillsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StillsMaxAggregateInputType
  }

  export type GetStillsAggregateType<T extends StillsAggregateArgs> = {
        [P in keyof T & keyof AggregateStills]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStills[P]>
      : GetScalarType<T[P], AggregateStills[P]>
  }




  export type stillsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: stillsWhereInput
    orderBy?: stillsOrderByWithAggregationInput | stillsOrderByWithAggregationInput[]
    by: StillsScalarFieldEnum[] | StillsScalarFieldEnum
    having?: stillsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StillsCountAggregateInputType | true
    _avg?: StillsAvgAggregateInputType
    _sum?: StillsSumAggregateInputType
    _min?: StillsMinAggregateInputType
    _max?: StillsMaxAggregateInputType
  }

  export type StillsGroupByOutputType = {
    code: string
    site: string
    power: number
    capacity: number
    is_vacuum: boolean | null
    is_operational: boolean | null
    _count: StillsCountAggregateOutputType | null
    _avg: StillsAvgAggregateOutputType | null
    _sum: StillsSumAggregateOutputType | null
    _min: StillsMinAggregateOutputType | null
    _max: StillsMaxAggregateOutputType | null
  }

  type GetStillsGroupByPayload<T extends stillsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StillsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StillsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StillsGroupByOutputType[P]>
            : GetScalarType<T[P], StillsGroupByOutputType[P]>
        }
      >
    >


  export type stillsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    code?: boolean
    site?: boolean
    power?: boolean
    capacity?: boolean
    is_vacuum?: boolean
    is_operational?: boolean
    processes?: boolean | stills$processesArgs<ExtArgs>
    _count?: boolean | StillsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stills"]>

  export type stillsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    code?: boolean
    site?: boolean
    power?: boolean
    capacity?: boolean
    is_vacuum?: boolean
    is_operational?: boolean
  }, ExtArgs["result"]["stills"]>

  export type stillsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    code?: boolean
    site?: boolean
    power?: boolean
    capacity?: boolean
    is_vacuum?: boolean
    is_operational?: boolean
  }, ExtArgs["result"]["stills"]>

  export type stillsSelectScalar = {
    code?: boolean
    site?: boolean
    power?: boolean
    capacity?: boolean
    is_vacuum?: boolean
    is_operational?: boolean
  }

  export type stillsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"code" | "site" | "power" | "capacity" | "is_vacuum" | "is_operational", ExtArgs["result"]["stills"]>
  export type stillsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    processes?: boolean | stills$processesArgs<ExtArgs>
    _count?: boolean | StillsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type stillsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type stillsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $stillsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "stills"
    objects: {
      processes: Prisma.$processesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      code: string
      site: string
      power: number
      capacity: number
      is_vacuum: boolean | null
      is_operational: boolean | null
    }, ExtArgs["result"]["stills"]>
    composites: {}
  }

  type stillsGetPayload<S extends boolean | null | undefined | stillsDefaultArgs> = $Result.GetResult<Prisma.$stillsPayload, S>

  type stillsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<stillsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StillsCountAggregateInputType | true
    }

  export interface stillsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['stills'], meta: { name: 'stills' } }
    /**
     * Find zero or one Stills that matches the filter.
     * @param {stillsFindUniqueArgs} args - Arguments to find a Stills
     * @example
     * // Get one Stills
     * const stills = await prisma.stills.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends stillsFindUniqueArgs>(args: SelectSubset<T, stillsFindUniqueArgs<ExtArgs>>): Prisma__stillsClient<$Result.GetResult<Prisma.$stillsPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Stills that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {stillsFindUniqueOrThrowArgs} args - Arguments to find a Stills
     * @example
     * // Get one Stills
     * const stills = await prisma.stills.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends stillsFindUniqueOrThrowArgs>(args: SelectSubset<T, stillsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__stillsClient<$Result.GetResult<Prisma.$stillsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Stills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {stillsFindFirstArgs} args - Arguments to find a Stills
     * @example
     * // Get one Stills
     * const stills = await prisma.stills.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends stillsFindFirstArgs>(args?: SelectSubset<T, stillsFindFirstArgs<ExtArgs>>): Prisma__stillsClient<$Result.GetResult<Prisma.$stillsPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Stills that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {stillsFindFirstOrThrowArgs} args - Arguments to find a Stills
     * @example
     * // Get one Stills
     * const stills = await prisma.stills.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends stillsFindFirstOrThrowArgs>(args?: SelectSubset<T, stillsFindFirstOrThrowArgs<ExtArgs>>): Prisma__stillsClient<$Result.GetResult<Prisma.$stillsPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Stills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {stillsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stills
     * const stills = await prisma.stills.findMany()
     * 
     * // Get first 10 Stills
     * const stills = await prisma.stills.findMany({ take: 10 })
     * 
     * // Only select the `code`
     * const stillsWithCodeOnly = await prisma.stills.findMany({ select: { code: true } })
     * 
     */
    findMany<T extends stillsFindManyArgs>(args?: SelectSubset<T, stillsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$stillsPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Stills.
     * @param {stillsCreateArgs} args - Arguments to create a Stills.
     * @example
     * // Create one Stills
     * const Stills = await prisma.stills.create({
     *   data: {
     *     // ... data to create a Stills
     *   }
     * })
     * 
     */
    create<T extends stillsCreateArgs>(args: SelectSubset<T, stillsCreateArgs<ExtArgs>>): Prisma__stillsClient<$Result.GetResult<Prisma.$stillsPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Stills.
     * @param {stillsCreateManyArgs} args - Arguments to create many Stills.
     * @example
     * // Create many Stills
     * const stills = await prisma.stills.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends stillsCreateManyArgs>(args?: SelectSubset<T, stillsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Stills and returns the data saved in the database.
     * @param {stillsCreateManyAndReturnArgs} args - Arguments to create many Stills.
     * @example
     * // Create many Stills
     * const stills = await prisma.stills.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Stills and only return the `code`
     * const stillsWithCodeOnly = await prisma.stills.createManyAndReturn({
     *   select: { code: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends stillsCreateManyAndReturnArgs>(args?: SelectSubset<T, stillsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$stillsPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Stills.
     * @param {stillsDeleteArgs} args - Arguments to delete one Stills.
     * @example
     * // Delete one Stills
     * const Stills = await prisma.stills.delete({
     *   where: {
     *     // ... filter to delete one Stills
     *   }
     * })
     * 
     */
    delete<T extends stillsDeleteArgs>(args: SelectSubset<T, stillsDeleteArgs<ExtArgs>>): Prisma__stillsClient<$Result.GetResult<Prisma.$stillsPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Stills.
     * @param {stillsUpdateArgs} args - Arguments to update one Stills.
     * @example
     * // Update one Stills
     * const stills = await prisma.stills.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends stillsUpdateArgs>(args: SelectSubset<T, stillsUpdateArgs<ExtArgs>>): Prisma__stillsClient<$Result.GetResult<Prisma.$stillsPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Stills.
     * @param {stillsDeleteManyArgs} args - Arguments to filter Stills to delete.
     * @example
     * // Delete a few Stills
     * const { count } = await prisma.stills.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends stillsDeleteManyArgs>(args?: SelectSubset<T, stillsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {stillsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stills
     * const stills = await prisma.stills.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends stillsUpdateManyArgs>(args: SelectSubset<T, stillsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stills and returns the data updated in the database.
     * @param {stillsUpdateManyAndReturnArgs} args - Arguments to update many Stills.
     * @example
     * // Update many Stills
     * const stills = await prisma.stills.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Stills and only return the `code`
     * const stillsWithCodeOnly = await prisma.stills.updateManyAndReturn({
     *   select: { code: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends stillsUpdateManyAndReturnArgs>(args: SelectSubset<T, stillsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$stillsPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Stills.
     * @param {stillsUpsertArgs} args - Arguments to update or create a Stills.
     * @example
     * // Update or create a Stills
     * const stills = await prisma.stills.upsert({
     *   create: {
     *     // ... data to create a Stills
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Stills we want to update
     *   }
     * })
     */
    upsert<T extends stillsUpsertArgs>(args: SelectSubset<T, stillsUpsertArgs<ExtArgs>>): Prisma__stillsClient<$Result.GetResult<Prisma.$stillsPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Stills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {stillsCountArgs} args - Arguments to filter Stills to count.
     * @example
     * // Count the number of Stills
     * const count = await prisma.stills.count({
     *   where: {
     *     // ... the filter for the Stills we want to count
     *   }
     * })
    **/
    count<T extends stillsCountArgs>(
      args?: Subset<T, stillsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StillsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Stills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StillsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StillsAggregateArgs>(args: Subset<T, StillsAggregateArgs>): Prisma.PrismaPromise<GetStillsAggregateType<T>>

    /**
     * Group by Stills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {stillsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends stillsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: stillsGroupByArgs['orderBy'] }
        : { orderBy?: stillsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, stillsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStillsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the stills model
   */
  readonly fields: stillsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for stills.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__stillsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    processes<T extends stills$processesArgs<ExtArgs> = {}>(args?: Subset<T, stills$processesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$processesPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the stills model
   */ 
  interface stillsFieldRefs {
    readonly code: FieldRef<"stills", 'String'>
    readonly site: FieldRef<"stills", 'String'>
    readonly power: FieldRef<"stills", 'Int'>
    readonly capacity: FieldRef<"stills", 'Int'>
    readonly is_vacuum: FieldRef<"stills", 'Boolean'>
    readonly is_operational: FieldRef<"stills", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * stills findUnique
   */
  export type stillsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the stills
     */
    select?: stillsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the stills
     */
    omit?: stillsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: stillsInclude<ExtArgs> | null
    /**
     * Filter, which stills to fetch.
     */
    where: stillsWhereUniqueInput
  }

  /**
   * stills findUniqueOrThrow
   */
  export type stillsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the stills
     */
    select?: stillsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the stills
     */
    omit?: stillsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: stillsInclude<ExtArgs> | null
    /**
     * Filter, which stills to fetch.
     */
    where: stillsWhereUniqueInput
  }

  /**
   * stills findFirst
   */
  export type stillsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the stills
     */
    select?: stillsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the stills
     */
    omit?: stillsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: stillsInclude<ExtArgs> | null
    /**
     * Filter, which stills to fetch.
     */
    where?: stillsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of stills to fetch.
     */
    orderBy?: stillsOrderByWithRelationInput | stillsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for stills.
     */
    cursor?: stillsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` stills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` stills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of stills.
     */
    distinct?: StillsScalarFieldEnum | StillsScalarFieldEnum[]
  }

  /**
   * stills findFirstOrThrow
   */
  export type stillsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the stills
     */
    select?: stillsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the stills
     */
    omit?: stillsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: stillsInclude<ExtArgs> | null
    /**
     * Filter, which stills to fetch.
     */
    where?: stillsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of stills to fetch.
     */
    orderBy?: stillsOrderByWithRelationInput | stillsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for stills.
     */
    cursor?: stillsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` stills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` stills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of stills.
     */
    distinct?: StillsScalarFieldEnum | StillsScalarFieldEnum[]
  }

  /**
   * stills findMany
   */
  export type stillsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the stills
     */
    select?: stillsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the stills
     */
    omit?: stillsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: stillsInclude<ExtArgs> | null
    /**
     * Filter, which stills to fetch.
     */
    where?: stillsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of stills to fetch.
     */
    orderBy?: stillsOrderByWithRelationInput | stillsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing stills.
     */
    cursor?: stillsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` stills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` stills.
     */
    skip?: number
    distinct?: StillsScalarFieldEnum | StillsScalarFieldEnum[]
  }

  /**
   * stills create
   */
  export type stillsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the stills
     */
    select?: stillsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the stills
     */
    omit?: stillsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: stillsInclude<ExtArgs> | null
    /**
     * The data needed to create a stills.
     */
    data: XOR<stillsCreateInput, stillsUncheckedCreateInput>
  }

  /**
   * stills createMany
   */
  export type stillsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many stills.
     */
    data: stillsCreateManyInput | stillsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * stills createManyAndReturn
   */
  export type stillsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the stills
     */
    select?: stillsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the stills
     */
    omit?: stillsOmit<ExtArgs> | null
    /**
     * The data used to create many stills.
     */
    data: stillsCreateManyInput | stillsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * stills update
   */
  export type stillsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the stills
     */
    select?: stillsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the stills
     */
    omit?: stillsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: stillsInclude<ExtArgs> | null
    /**
     * The data needed to update a stills.
     */
    data: XOR<stillsUpdateInput, stillsUncheckedUpdateInput>
    /**
     * Choose, which stills to update.
     */
    where: stillsWhereUniqueInput
  }

  /**
   * stills updateMany
   */
  export type stillsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update stills.
     */
    data: XOR<stillsUpdateManyMutationInput, stillsUncheckedUpdateManyInput>
    /**
     * Filter which stills to update
     */
    where?: stillsWhereInput
  }

  /**
   * stills updateManyAndReturn
   */
  export type stillsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the stills
     */
    select?: stillsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the stills
     */
    omit?: stillsOmit<ExtArgs> | null
    /**
     * The data used to update stills.
     */
    data: XOR<stillsUpdateManyMutationInput, stillsUncheckedUpdateManyInput>
    /**
     * Filter which stills to update
     */
    where?: stillsWhereInput
  }

  /**
   * stills upsert
   */
  export type stillsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the stills
     */
    select?: stillsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the stills
     */
    omit?: stillsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: stillsInclude<ExtArgs> | null
    /**
     * The filter to search for the stills to update in case it exists.
     */
    where: stillsWhereUniqueInput
    /**
     * In case the stills found by the `where` argument doesn't exist, create a new stills with this data.
     */
    create: XOR<stillsCreateInput, stillsUncheckedCreateInput>
    /**
     * In case the stills was found with the provided `where` argument, update it with this data.
     */
    update: XOR<stillsUpdateInput, stillsUncheckedUpdateInput>
  }

  /**
   * stills delete
   */
  export type stillsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the stills
     */
    select?: stillsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the stills
     */
    omit?: stillsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: stillsInclude<ExtArgs> | null
    /**
     * Filter which stills to delete.
     */
    where: stillsWhereUniqueInput
  }

  /**
   * stills deleteMany
   */
  export type stillsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which stills to delete
     */
    where?: stillsWhereInput
  }

  /**
   * stills.processes
   */
  export type stills$processesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the processes
     */
    select?: processesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the processes
     */
    omit?: processesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: processesInclude<ExtArgs> | null
    where?: processesWhereInput
    orderBy?: processesOrderByWithRelationInput | processesOrderByWithRelationInput[]
    cursor?: processesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProcessesScalarFieldEnum | ProcessesScalarFieldEnum[]
  }

  /**
   * stills without action
   */
  export type stillsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the stills
     */
    select?: stillsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the stills
     */
    omit?: stillsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: stillsInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const Bottle_sizesScalarFieldEnum: {
    id: 'id',
    volume: 'volume'
  };

  export type Bottle_sizesScalarFieldEnum = (typeof Bottle_sizesScalarFieldEnum)[keyof typeof Bottle_sizesScalarFieldEnum]


  export const Chemical_groupsScalarFieldEnum: {
    group_id: 'group_id',
    name: 'name'
  };

  export type Chemical_groupsScalarFieldEnum = (typeof Chemical_groupsScalarFieldEnum)[keyof typeof Chemical_groupsScalarFieldEnum]


  export const Product_pricesScalarFieldEnum: {
    product_id: 'product_id',
    bottle_size_id: 'bottle_size_id',
    price: 'price'
  };

  export type Product_pricesScalarFieldEnum = (typeof Product_pricesScalarFieldEnum)[keyof typeof Product_pricesScalarFieldEnum]


  export const ProductsScalarFieldEnum: {
    product_id: 'product_id',
    name: 'name',
    sku: 'sku',
    raw_material_id: 'raw_material_id',
    grade: 'grade'
  };

  export type ProductsScalarFieldEnum = (typeof ProductsScalarFieldEnum)[keyof typeof ProductsScalarFieldEnum]


  export const Raw_materialsScalarFieldEnum: {
    raw_material_id: 'raw_material_id',
    name: 'name',
    cas_number: 'cas_number',
    chemical_group: 'chemical_group',
    description: 'description',
    un_code: 'un_code',
    flash_point: 'flash_point'
  };

  export type Raw_materialsScalarFieldEnum = (typeof Raw_materialsScalarFieldEnum)[keyof typeof Raw_materialsScalarFieldEnum]


  export const BatchesScalarFieldEnum: {
    batch_id: 'batch_id',
    distillation_id: 'distillation_id',
    creation_date: 'creation_date',
    batch_code: 'batch_code',
    grade: 'grade',
    quantity: 'quantity',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type BatchesScalarFieldEnum = (typeof BatchesScalarFieldEnum)[keyof typeof BatchesScalarFieldEnum]


  export const DeliveriesScalarFieldEnum: {
    delivery_id: 'delivery_id',
    order_id: 'order_id',
    quantity_received: 'quantity_received',
    date_received: 'date_received',
    batch_code: 'batch_code',
    location: 'location',
    delivery_notes: 'delivery_notes',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type DeliveriesScalarFieldEnum = (typeof DeliveriesScalarFieldEnum)[keyof typeof DeliveriesScalarFieldEnum]


  export const DistillationsScalarFieldEnum: {
    distillation_id: 'distillation_id',
    loading_date: 'loading_date',
    start_date: 'start_date',
    still_code: 'still_code',
    volume_in: 'volume_in',
    transporter: 'transporter',
    loader: 'loader',
    operator: 'operator',
    completion_date: 'completion_date',
    volume_in_spec: 'volume_in_spec',
    volume_repro: 'volume_repro',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type DistillationsScalarFieldEnum = (typeof DistillationsScalarFieldEnum)[keyof typeof DistillationsScalarFieldEnum]


  export const Drum_distillationsScalarFieldEnum: {
    drum_id: 'drum_id',
    distillation_id: 'distillation_id',
    fraction_used: 'fraction_used'
  };

  export type Drum_distillationsScalarFieldEnum = (typeof Drum_distillationsScalarFieldEnum)[keyof typeof Drum_distillationsScalarFieldEnum]


  export const ImportsScalarFieldEnum: {
    import_id: 'import_id',
    supplier_name: 'supplier_name',
    material_type: 'material_type',
    quantity: 'quantity',
    supplier_batch_code: 'supplier_batch_code',
    date_ordered: 'date_ordered',
    date_received: 'date_received',
    created_at: 'created_at',
    updated_at: 'updated_at',
    notes: 'notes',
    location: 'location'
  };

  export type ImportsScalarFieldEnum = (typeof ImportsScalarFieldEnum)[keyof typeof ImportsScalarFieldEnum]


  export const New_drumsScalarFieldEnum: {
    drum_id: 'drum_id',
    import_id: 'import_id',
    material: 'material',
    date_processed: 'date_processed',
    status: 'status',
    location: 'location',
    created_at: 'created_at',
    updated_at: 'updated_at',
    order_id: 'order_id'
  };

  export type New_drumsScalarFieldEnum = (typeof New_drumsScalarFieldEnum)[keyof typeof New_drumsScalarFieldEnum]


  export const OrdersScalarFieldEnum: {
    order_id: 'order_id',
    supplier: 'supplier',
    material: 'material',
    quantity: 'quantity',
    date_ordered: 'date_ordered',
    notes: 'notes',
    created_at: 'created_at',
    updated_at: 'updated_at',
    quantity_received: 'quantity_received',
    delivery_status: 'delivery_status'
  };

  export type OrdersScalarFieldEnum = (typeof OrdersScalarFieldEnum)[keyof typeof OrdersScalarFieldEnum]


  export const ProcessesScalarFieldEnum: {
    process_id: 'process_id',
    material: 'material',
    drum_id: 'drum_id',
    supplier: 'supplier',
    still_code: 'still_code',
    operator: 'operator',
    loader: 'loader',
    transporter: 'transporter',
    date_processed: 'date_processed'
  };

  export type ProcessesScalarFieldEnum = (typeof ProcessesScalarFieldEnum)[keyof typeof ProcessesScalarFieldEnum]


  export const Repro_additionsScalarFieldEnum: {
    addition_id: 'addition_id',
    repro_drum_id: 'repro_drum_id',
    distillation_id: 'distillation_id',
    date_added: 'date_added',
    volume_added: 'volume_added',
    volume_in_drum: 'volume_in_drum',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type Repro_additionsScalarFieldEnum = (typeof Repro_additionsScalarFieldEnum)[keyof typeof Repro_additionsScalarFieldEnum]


  export const Repro_drumsScalarFieldEnum: {
    repro_drum_id: 'repro_drum_id',
    date_created: 'date_created',
    material: 'material',
    capacity: 'capacity',
    current_volume: 'current_volume',
    created_at: 'created_at',
    updated_at: 'updated_at',
    status: 'status',
    volume_status: 'volume_status',
    notes: 'notes',
    location: 'location'
  };

  export type Repro_drumsScalarFieldEnum = (typeof Repro_drumsScalarFieldEnum)[keyof typeof Repro_drumsScalarFieldEnum]


  export const TransactionsScalarFieldEnum: {
    tx_id: 'tx_id',
    tx_type: 'tx_type',
    tx_date: 'tx_date',
    material: 'material',
    drum_id: 'drum_id',
    repro_id: 'repro_id',
    tx_notes: 'tx_notes',
    created_at: 'created_at',
    updated_at: 'updated_at',
    process_id: 'process_id',
    direction: 'direction',
    delivery_id: 'delivery_id',
    batch_code: 'batch_code'
  };

  export type TransactionsScalarFieldEnum = (typeof TransactionsScalarFieldEnum)[keyof typeof TransactionsScalarFieldEnum]


  export const StillsScalarFieldEnum: {
    code: 'code',
    site: 'site',
    power: 'power',
    capacity: 'capacity',
    is_vacuum: 'is_vacuum',
    is_operational: 'is_operational'
  };

  export type StillsScalarFieldEnum = (typeof StillsScalarFieldEnum)[keyof typeof StillsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type bottle_sizesWhereInput = {
    AND?: bottle_sizesWhereInput | bottle_sizesWhereInput[]
    OR?: bottle_sizesWhereInput[]
    NOT?: bottle_sizesWhereInput | bottle_sizesWhereInput[]
    id?: IntFilter<"bottle_sizes"> | number
    volume?: StringFilter<"bottle_sizes"> | string
    product_prices?: Product_pricesListRelationFilter
  }

  export type bottle_sizesOrderByWithRelationInput = {
    id?: SortOrder
    volume?: SortOrder
    product_prices?: product_pricesOrderByRelationAggregateInput
  }

  export type bottle_sizesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: bottle_sizesWhereInput | bottle_sizesWhereInput[]
    OR?: bottle_sizesWhereInput[]
    NOT?: bottle_sizesWhereInput | bottle_sizesWhereInput[]
    volume?: StringFilter<"bottle_sizes"> | string
    product_prices?: Product_pricesListRelationFilter
  }, "id">

  export type bottle_sizesOrderByWithAggregationInput = {
    id?: SortOrder
    volume?: SortOrder
    _count?: bottle_sizesCountOrderByAggregateInput
    _avg?: bottle_sizesAvgOrderByAggregateInput
    _max?: bottle_sizesMaxOrderByAggregateInput
    _min?: bottle_sizesMinOrderByAggregateInput
    _sum?: bottle_sizesSumOrderByAggregateInput
  }

  export type bottle_sizesScalarWhereWithAggregatesInput = {
    AND?: bottle_sizesScalarWhereWithAggregatesInput | bottle_sizesScalarWhereWithAggregatesInput[]
    OR?: bottle_sizesScalarWhereWithAggregatesInput[]
    NOT?: bottle_sizesScalarWhereWithAggregatesInput | bottle_sizesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"bottle_sizes"> | number
    volume?: StringWithAggregatesFilter<"bottle_sizes"> | string
  }

  export type chemical_groupsWhereInput = {
    AND?: chemical_groupsWhereInput | chemical_groupsWhereInput[]
    OR?: chemical_groupsWhereInput[]
    NOT?: chemical_groupsWhereInput | chemical_groupsWhereInput[]
    group_id?: IntFilter<"chemical_groups"> | number
    name?: StringFilter<"chemical_groups"> | string
  }

  export type chemical_groupsOrderByWithRelationInput = {
    group_id?: SortOrder
    name?: SortOrder
  }

  export type chemical_groupsWhereUniqueInput = Prisma.AtLeast<{
    group_id?: number
    AND?: chemical_groupsWhereInput | chemical_groupsWhereInput[]
    OR?: chemical_groupsWhereInput[]
    NOT?: chemical_groupsWhereInput | chemical_groupsWhereInput[]
    name?: StringFilter<"chemical_groups"> | string
  }, "group_id">

  export type chemical_groupsOrderByWithAggregationInput = {
    group_id?: SortOrder
    name?: SortOrder
    _count?: chemical_groupsCountOrderByAggregateInput
    _avg?: chemical_groupsAvgOrderByAggregateInput
    _max?: chemical_groupsMaxOrderByAggregateInput
    _min?: chemical_groupsMinOrderByAggregateInput
    _sum?: chemical_groupsSumOrderByAggregateInput
  }

  export type chemical_groupsScalarWhereWithAggregatesInput = {
    AND?: chemical_groupsScalarWhereWithAggregatesInput | chemical_groupsScalarWhereWithAggregatesInput[]
    OR?: chemical_groupsScalarWhereWithAggregatesInput[]
    NOT?: chemical_groupsScalarWhereWithAggregatesInput | chemical_groupsScalarWhereWithAggregatesInput[]
    group_id?: IntWithAggregatesFilter<"chemical_groups"> | number
    name?: StringWithAggregatesFilter<"chemical_groups"> | string
  }

  export type product_pricesWhereInput = {
    AND?: product_pricesWhereInput | product_pricesWhereInput[]
    OR?: product_pricesWhereInput[]
    NOT?: product_pricesWhereInput | product_pricesWhereInput[]
    product_id?: IntFilter<"product_prices"> | number
    bottle_size_id?: IntFilter<"product_prices"> | number
    price?: DecimalFilter<"product_prices"> | Decimal | DecimalJsLike | number | string
    bottle_sizes?: XOR<Bottle_sizesScalarRelationFilter, bottle_sizesWhereInput>
    products?: XOR<ProductsScalarRelationFilter, productsWhereInput>
  }

  export type product_pricesOrderByWithRelationInput = {
    product_id?: SortOrder
    bottle_size_id?: SortOrder
    price?: SortOrder
    bottle_sizes?: bottle_sizesOrderByWithRelationInput
    products?: productsOrderByWithRelationInput
  }

  export type product_pricesWhereUniqueInput = Prisma.AtLeast<{
    product_id_bottle_size_id?: product_pricesProduct_idBottle_size_idCompoundUniqueInput
    AND?: product_pricesWhereInput | product_pricesWhereInput[]
    OR?: product_pricesWhereInput[]
    NOT?: product_pricesWhereInput | product_pricesWhereInput[]
    product_id?: IntFilter<"product_prices"> | number
    bottle_size_id?: IntFilter<"product_prices"> | number
    price?: DecimalFilter<"product_prices"> | Decimal | DecimalJsLike | number | string
    bottle_sizes?: XOR<Bottle_sizesScalarRelationFilter, bottle_sizesWhereInput>
    products?: XOR<ProductsScalarRelationFilter, productsWhereInput>
  }, "product_id_bottle_size_id">

  export type product_pricesOrderByWithAggregationInput = {
    product_id?: SortOrder
    bottle_size_id?: SortOrder
    price?: SortOrder
    _count?: product_pricesCountOrderByAggregateInput
    _avg?: product_pricesAvgOrderByAggregateInput
    _max?: product_pricesMaxOrderByAggregateInput
    _min?: product_pricesMinOrderByAggregateInput
    _sum?: product_pricesSumOrderByAggregateInput
  }

  export type product_pricesScalarWhereWithAggregatesInput = {
    AND?: product_pricesScalarWhereWithAggregatesInput | product_pricesScalarWhereWithAggregatesInput[]
    OR?: product_pricesScalarWhereWithAggregatesInput[]
    NOT?: product_pricesScalarWhereWithAggregatesInput | product_pricesScalarWhereWithAggregatesInput[]
    product_id?: IntWithAggregatesFilter<"product_prices"> | number
    bottle_size_id?: IntWithAggregatesFilter<"product_prices"> | number
    price?: DecimalWithAggregatesFilter<"product_prices"> | Decimal | DecimalJsLike | number | string
  }

  export type productsWhereInput = {
    AND?: productsWhereInput | productsWhereInput[]
    OR?: productsWhereInput[]
    NOT?: productsWhereInput | productsWhereInput[]
    product_id?: IntFilter<"products"> | number
    name?: StringFilter<"products"> | string
    sku?: StringFilter<"products"> | string
    raw_material_id?: IntNullableFilter<"products"> | number | null
    grade?: StringFilter<"products"> | string
    product_prices?: Product_pricesListRelationFilter
    raw_materials?: XOR<Raw_materialsNullableScalarRelationFilter, raw_materialsWhereInput> | null
  }

  export type productsOrderByWithRelationInput = {
    product_id?: SortOrder
    name?: SortOrder
    sku?: SortOrder
    raw_material_id?: SortOrderInput | SortOrder
    grade?: SortOrder
    product_prices?: product_pricesOrderByRelationAggregateInput
    raw_materials?: raw_materialsOrderByWithRelationInput
  }

  export type productsWhereUniqueInput = Prisma.AtLeast<{
    product_id?: number
    sku?: string
    AND?: productsWhereInput | productsWhereInput[]
    OR?: productsWhereInput[]
    NOT?: productsWhereInput | productsWhereInput[]
    name?: StringFilter<"products"> | string
    raw_material_id?: IntNullableFilter<"products"> | number | null
    grade?: StringFilter<"products"> | string
    product_prices?: Product_pricesListRelationFilter
    raw_materials?: XOR<Raw_materialsNullableScalarRelationFilter, raw_materialsWhereInput> | null
  }, "product_id" | "sku">

  export type productsOrderByWithAggregationInput = {
    product_id?: SortOrder
    name?: SortOrder
    sku?: SortOrder
    raw_material_id?: SortOrderInput | SortOrder
    grade?: SortOrder
    _count?: productsCountOrderByAggregateInput
    _avg?: productsAvgOrderByAggregateInput
    _max?: productsMaxOrderByAggregateInput
    _min?: productsMinOrderByAggregateInput
    _sum?: productsSumOrderByAggregateInput
  }

  export type productsScalarWhereWithAggregatesInput = {
    AND?: productsScalarWhereWithAggregatesInput | productsScalarWhereWithAggregatesInput[]
    OR?: productsScalarWhereWithAggregatesInput[]
    NOT?: productsScalarWhereWithAggregatesInput | productsScalarWhereWithAggregatesInput[]
    product_id?: IntWithAggregatesFilter<"products"> | number
    name?: StringWithAggregatesFilter<"products"> | string
    sku?: StringWithAggregatesFilter<"products"> | string
    raw_material_id?: IntNullableWithAggregatesFilter<"products"> | number | null
    grade?: StringWithAggregatesFilter<"products"> | string
  }

  export type raw_materialsWhereInput = {
    AND?: raw_materialsWhereInput | raw_materialsWhereInput[]
    OR?: raw_materialsWhereInput[]
    NOT?: raw_materialsWhereInput | raw_materialsWhereInput[]
    raw_material_id?: IntFilter<"raw_materials"> | number
    name?: StringFilter<"raw_materials"> | string
    cas_number?: StringFilter<"raw_materials"> | string
    chemical_group?: StringNullableFilter<"raw_materials"> | string | null
    description?: StringNullableFilter<"raw_materials"> | string | null
    un_code?: StringNullableFilter<"raw_materials"> | string | null
    flash_point?: IntNullableFilter<"raw_materials"> | number | null
    products?: ProductsListRelationFilter
  }

  export type raw_materialsOrderByWithRelationInput = {
    raw_material_id?: SortOrder
    name?: SortOrder
    cas_number?: SortOrder
    chemical_group?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    un_code?: SortOrderInput | SortOrder
    flash_point?: SortOrderInput | SortOrder
    products?: productsOrderByRelationAggregateInput
  }

  export type raw_materialsWhereUniqueInput = Prisma.AtLeast<{
    raw_material_id?: number
    AND?: raw_materialsWhereInput | raw_materialsWhereInput[]
    OR?: raw_materialsWhereInput[]
    NOT?: raw_materialsWhereInput | raw_materialsWhereInput[]
    name?: StringFilter<"raw_materials"> | string
    cas_number?: StringFilter<"raw_materials"> | string
    chemical_group?: StringNullableFilter<"raw_materials"> | string | null
    description?: StringNullableFilter<"raw_materials"> | string | null
    un_code?: StringNullableFilter<"raw_materials"> | string | null
    flash_point?: IntNullableFilter<"raw_materials"> | number | null
    products?: ProductsListRelationFilter
  }, "raw_material_id">

  export type raw_materialsOrderByWithAggregationInput = {
    raw_material_id?: SortOrder
    name?: SortOrder
    cas_number?: SortOrder
    chemical_group?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    un_code?: SortOrderInput | SortOrder
    flash_point?: SortOrderInput | SortOrder
    _count?: raw_materialsCountOrderByAggregateInput
    _avg?: raw_materialsAvgOrderByAggregateInput
    _max?: raw_materialsMaxOrderByAggregateInput
    _min?: raw_materialsMinOrderByAggregateInput
    _sum?: raw_materialsSumOrderByAggregateInput
  }

  export type raw_materialsScalarWhereWithAggregatesInput = {
    AND?: raw_materialsScalarWhereWithAggregatesInput | raw_materialsScalarWhereWithAggregatesInput[]
    OR?: raw_materialsScalarWhereWithAggregatesInput[]
    NOT?: raw_materialsScalarWhereWithAggregatesInput | raw_materialsScalarWhereWithAggregatesInput[]
    raw_material_id?: IntWithAggregatesFilter<"raw_materials"> | number
    name?: StringWithAggregatesFilter<"raw_materials"> | string
    cas_number?: StringWithAggregatesFilter<"raw_materials"> | string
    chemical_group?: StringNullableWithAggregatesFilter<"raw_materials"> | string | null
    description?: StringNullableWithAggregatesFilter<"raw_materials"> | string | null
    un_code?: StringNullableWithAggregatesFilter<"raw_materials"> | string | null
    flash_point?: IntNullableWithAggregatesFilter<"raw_materials"> | number | null
  }

  export type batchesWhereInput = {
    AND?: batchesWhereInput | batchesWhereInput[]
    OR?: batchesWhereInput[]
    NOT?: batchesWhereInput | batchesWhereInput[]
    batch_id?: IntFilter<"batches"> | number
    distillation_id?: IntNullableFilter<"batches"> | number | null
    creation_date?: DateTimeNullableFilter<"batches"> | Date | string | null
    batch_code?: StringNullableFilter<"batches"> | string | null
    grade?: StringNullableFilter<"batches"> | string | null
    quantity?: DecimalNullableFilter<"batches"> | Decimal | DecimalJsLike | number | string | null
    created_at?: DateTimeNullableFilter<"batches"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"batches"> | Date | string | null
    distillations?: XOR<DistillationsNullableScalarRelationFilter, distillationsWhereInput> | null
  }

  export type batchesOrderByWithRelationInput = {
    batch_id?: SortOrder
    distillation_id?: SortOrderInput | SortOrder
    creation_date?: SortOrderInput | SortOrder
    batch_code?: SortOrderInput | SortOrder
    grade?: SortOrderInput | SortOrder
    quantity?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    distillations?: distillationsOrderByWithRelationInput
  }

  export type batchesWhereUniqueInput = Prisma.AtLeast<{
    batch_id?: number
    batch_code?: string
    AND?: batchesWhereInput | batchesWhereInput[]
    OR?: batchesWhereInput[]
    NOT?: batchesWhereInput | batchesWhereInput[]
    distillation_id?: IntNullableFilter<"batches"> | number | null
    creation_date?: DateTimeNullableFilter<"batches"> | Date | string | null
    grade?: StringNullableFilter<"batches"> | string | null
    quantity?: DecimalNullableFilter<"batches"> | Decimal | DecimalJsLike | number | string | null
    created_at?: DateTimeNullableFilter<"batches"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"batches"> | Date | string | null
    distillations?: XOR<DistillationsNullableScalarRelationFilter, distillationsWhereInput> | null
  }, "batch_id" | "batch_code">

  export type batchesOrderByWithAggregationInput = {
    batch_id?: SortOrder
    distillation_id?: SortOrderInput | SortOrder
    creation_date?: SortOrderInput | SortOrder
    batch_code?: SortOrderInput | SortOrder
    grade?: SortOrderInput | SortOrder
    quantity?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: batchesCountOrderByAggregateInput
    _avg?: batchesAvgOrderByAggregateInput
    _max?: batchesMaxOrderByAggregateInput
    _min?: batchesMinOrderByAggregateInput
    _sum?: batchesSumOrderByAggregateInput
  }

  export type batchesScalarWhereWithAggregatesInput = {
    AND?: batchesScalarWhereWithAggregatesInput | batchesScalarWhereWithAggregatesInput[]
    OR?: batchesScalarWhereWithAggregatesInput[]
    NOT?: batchesScalarWhereWithAggregatesInput | batchesScalarWhereWithAggregatesInput[]
    batch_id?: IntWithAggregatesFilter<"batches"> | number
    distillation_id?: IntNullableWithAggregatesFilter<"batches"> | number | null
    creation_date?: DateTimeNullableWithAggregatesFilter<"batches"> | Date | string | null
    batch_code?: StringNullableWithAggregatesFilter<"batches"> | string | null
    grade?: StringNullableWithAggregatesFilter<"batches"> | string | null
    quantity?: DecimalNullableWithAggregatesFilter<"batches"> | Decimal | DecimalJsLike | number | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"batches"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"batches"> | Date | string | null
  }

  export type deliveriesWhereInput = {
    AND?: deliveriesWhereInput | deliveriesWhereInput[]
    OR?: deliveriesWhereInput[]
    NOT?: deliveriesWhereInput | deliveriesWhereInput[]
    delivery_id?: IntFilter<"deliveries"> | number
    order_id?: IntNullableFilter<"deliveries"> | number | null
    quantity_received?: IntFilter<"deliveries"> | number
    date_received?: DateTimeFilter<"deliveries"> | Date | string
    batch_code?: StringNullableFilter<"deliveries"> | string | null
    location?: StringNullableFilter<"deliveries"> | string | null
    delivery_notes?: StringNullableFilter<"deliveries"> | string | null
    created_at?: DateTimeNullableFilter<"deliveries"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"deliveries"> | Date | string | null
    orders?: XOR<OrdersNullableScalarRelationFilter, ordersWhereInput> | null
    transactions?: TransactionsListRelationFilter
  }

  export type deliveriesOrderByWithRelationInput = {
    delivery_id?: SortOrder
    order_id?: SortOrderInput | SortOrder
    quantity_received?: SortOrder
    date_received?: SortOrder
    batch_code?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    delivery_notes?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    orders?: ordersOrderByWithRelationInput
    transactions?: transactionsOrderByRelationAggregateInput
  }

  export type deliveriesWhereUniqueInput = Prisma.AtLeast<{
    delivery_id?: number
    order_id_batch_code?: deliveriesOrder_idBatch_codeCompoundUniqueInput
    AND?: deliveriesWhereInput | deliveriesWhereInput[]
    OR?: deliveriesWhereInput[]
    NOT?: deliveriesWhereInput | deliveriesWhereInput[]
    order_id?: IntNullableFilter<"deliveries"> | number | null
    quantity_received?: IntFilter<"deliveries"> | number
    date_received?: DateTimeFilter<"deliveries"> | Date | string
    batch_code?: StringNullableFilter<"deliveries"> | string | null
    location?: StringNullableFilter<"deliveries"> | string | null
    delivery_notes?: StringNullableFilter<"deliveries"> | string | null
    created_at?: DateTimeNullableFilter<"deliveries"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"deliveries"> | Date | string | null
    orders?: XOR<OrdersNullableScalarRelationFilter, ordersWhereInput> | null
    transactions?: TransactionsListRelationFilter
  }, "delivery_id" | "order_id_batch_code">

  export type deliveriesOrderByWithAggregationInput = {
    delivery_id?: SortOrder
    order_id?: SortOrderInput | SortOrder
    quantity_received?: SortOrder
    date_received?: SortOrder
    batch_code?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    delivery_notes?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: deliveriesCountOrderByAggregateInput
    _avg?: deliveriesAvgOrderByAggregateInput
    _max?: deliveriesMaxOrderByAggregateInput
    _min?: deliveriesMinOrderByAggregateInput
    _sum?: deliveriesSumOrderByAggregateInput
  }

  export type deliveriesScalarWhereWithAggregatesInput = {
    AND?: deliveriesScalarWhereWithAggregatesInput | deliveriesScalarWhereWithAggregatesInput[]
    OR?: deliveriesScalarWhereWithAggregatesInput[]
    NOT?: deliveriesScalarWhereWithAggregatesInput | deliveriesScalarWhereWithAggregatesInput[]
    delivery_id?: IntWithAggregatesFilter<"deliveries"> | number
    order_id?: IntNullableWithAggregatesFilter<"deliveries"> | number | null
    quantity_received?: IntWithAggregatesFilter<"deliveries"> | number
    date_received?: DateTimeWithAggregatesFilter<"deliveries"> | Date | string
    batch_code?: StringNullableWithAggregatesFilter<"deliveries"> | string | null
    location?: StringNullableWithAggregatesFilter<"deliveries"> | string | null
    delivery_notes?: StringNullableWithAggregatesFilter<"deliveries"> | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"deliveries"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"deliveries"> | Date | string | null
  }

  export type distillationsWhereInput = {
    AND?: distillationsWhereInput | distillationsWhereInput[]
    OR?: distillationsWhereInput[]
    NOT?: distillationsWhereInput | distillationsWhereInput[]
    distillation_id?: IntFilter<"distillations"> | number
    loading_date?: DateTimeNullableFilter<"distillations"> | Date | string | null
    start_date?: DateTimeNullableFilter<"distillations"> | Date | string | null
    still_code?: StringNullableFilter<"distillations"> | string | null
    volume_in?: DecimalNullableFilter<"distillations"> | Decimal | DecimalJsLike | number | string | null
    transporter?: StringNullableFilter<"distillations"> | string | null
    loader?: StringNullableFilter<"distillations"> | string | null
    operator?: StringNullableFilter<"distillations"> | string | null
    completion_date?: DateTimeNullableFilter<"distillations"> | Date | string | null
    volume_in_spec?: DecimalNullableFilter<"distillations"> | Decimal | DecimalJsLike | number | string | null
    volume_repro?: DecimalNullableFilter<"distillations"> | Decimal | DecimalJsLike | number | string | null
    created_at?: DateTimeNullableFilter<"distillations"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"distillations"> | Date | string | null
    batches?: BatchesListRelationFilter
    drum_distillations?: Drum_distillationsListRelationFilter
    repro_additions?: Repro_additionsListRelationFilter
  }

  export type distillationsOrderByWithRelationInput = {
    distillation_id?: SortOrder
    loading_date?: SortOrderInput | SortOrder
    start_date?: SortOrderInput | SortOrder
    still_code?: SortOrderInput | SortOrder
    volume_in?: SortOrderInput | SortOrder
    transporter?: SortOrderInput | SortOrder
    loader?: SortOrderInput | SortOrder
    operator?: SortOrderInput | SortOrder
    completion_date?: SortOrderInput | SortOrder
    volume_in_spec?: SortOrderInput | SortOrder
    volume_repro?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    batches?: batchesOrderByRelationAggregateInput
    drum_distillations?: drum_distillationsOrderByRelationAggregateInput
    repro_additions?: repro_additionsOrderByRelationAggregateInput
  }

  export type distillationsWhereUniqueInput = Prisma.AtLeast<{
    distillation_id?: number
    AND?: distillationsWhereInput | distillationsWhereInput[]
    OR?: distillationsWhereInput[]
    NOT?: distillationsWhereInput | distillationsWhereInput[]
    loading_date?: DateTimeNullableFilter<"distillations"> | Date | string | null
    start_date?: DateTimeNullableFilter<"distillations"> | Date | string | null
    still_code?: StringNullableFilter<"distillations"> | string | null
    volume_in?: DecimalNullableFilter<"distillations"> | Decimal | DecimalJsLike | number | string | null
    transporter?: StringNullableFilter<"distillations"> | string | null
    loader?: StringNullableFilter<"distillations"> | string | null
    operator?: StringNullableFilter<"distillations"> | string | null
    completion_date?: DateTimeNullableFilter<"distillations"> | Date | string | null
    volume_in_spec?: DecimalNullableFilter<"distillations"> | Decimal | DecimalJsLike | number | string | null
    volume_repro?: DecimalNullableFilter<"distillations"> | Decimal | DecimalJsLike | number | string | null
    created_at?: DateTimeNullableFilter<"distillations"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"distillations"> | Date | string | null
    batches?: BatchesListRelationFilter
    drum_distillations?: Drum_distillationsListRelationFilter
    repro_additions?: Repro_additionsListRelationFilter
  }, "distillation_id">

  export type distillationsOrderByWithAggregationInput = {
    distillation_id?: SortOrder
    loading_date?: SortOrderInput | SortOrder
    start_date?: SortOrderInput | SortOrder
    still_code?: SortOrderInput | SortOrder
    volume_in?: SortOrderInput | SortOrder
    transporter?: SortOrderInput | SortOrder
    loader?: SortOrderInput | SortOrder
    operator?: SortOrderInput | SortOrder
    completion_date?: SortOrderInput | SortOrder
    volume_in_spec?: SortOrderInput | SortOrder
    volume_repro?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: distillationsCountOrderByAggregateInput
    _avg?: distillationsAvgOrderByAggregateInput
    _max?: distillationsMaxOrderByAggregateInput
    _min?: distillationsMinOrderByAggregateInput
    _sum?: distillationsSumOrderByAggregateInput
  }

  export type distillationsScalarWhereWithAggregatesInput = {
    AND?: distillationsScalarWhereWithAggregatesInput | distillationsScalarWhereWithAggregatesInput[]
    OR?: distillationsScalarWhereWithAggregatesInput[]
    NOT?: distillationsScalarWhereWithAggregatesInput | distillationsScalarWhereWithAggregatesInput[]
    distillation_id?: IntWithAggregatesFilter<"distillations"> | number
    loading_date?: DateTimeNullableWithAggregatesFilter<"distillations"> | Date | string | null
    start_date?: DateTimeNullableWithAggregatesFilter<"distillations"> | Date | string | null
    still_code?: StringNullableWithAggregatesFilter<"distillations"> | string | null
    volume_in?: DecimalNullableWithAggregatesFilter<"distillations"> | Decimal | DecimalJsLike | number | string | null
    transporter?: StringNullableWithAggregatesFilter<"distillations"> | string | null
    loader?: StringNullableWithAggregatesFilter<"distillations"> | string | null
    operator?: StringNullableWithAggregatesFilter<"distillations"> | string | null
    completion_date?: DateTimeNullableWithAggregatesFilter<"distillations"> | Date | string | null
    volume_in_spec?: DecimalNullableWithAggregatesFilter<"distillations"> | Decimal | DecimalJsLike | number | string | null
    volume_repro?: DecimalNullableWithAggregatesFilter<"distillations"> | Decimal | DecimalJsLike | number | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"distillations"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"distillations"> | Date | string | null
  }

  export type drum_distillationsWhereInput = {
    AND?: drum_distillationsWhereInput | drum_distillationsWhereInput[]
    OR?: drum_distillationsWhereInput[]
    NOT?: drum_distillationsWhereInput | drum_distillationsWhereInput[]
    drum_id?: IntFilter<"drum_distillations"> | number
    distillation_id?: IntFilter<"drum_distillations"> | number
    fraction_used?: DecimalFilter<"drum_distillations"> | Decimal | DecimalJsLike | number | string
    distillations?: XOR<DistillationsScalarRelationFilter, distillationsWhereInput>
    new_drums?: XOR<New_drumsScalarRelationFilter, new_drumsWhereInput>
  }

  export type drum_distillationsOrderByWithRelationInput = {
    drum_id?: SortOrder
    distillation_id?: SortOrder
    fraction_used?: SortOrder
    distillations?: distillationsOrderByWithRelationInput
    new_drums?: new_drumsOrderByWithRelationInput
  }

  export type drum_distillationsWhereUniqueInput = Prisma.AtLeast<{
    drum_id_distillation_id?: drum_distillationsDrum_idDistillation_idCompoundUniqueInput
    AND?: drum_distillationsWhereInput | drum_distillationsWhereInput[]
    OR?: drum_distillationsWhereInput[]
    NOT?: drum_distillationsWhereInput | drum_distillationsWhereInput[]
    drum_id?: IntFilter<"drum_distillations"> | number
    distillation_id?: IntFilter<"drum_distillations"> | number
    fraction_used?: DecimalFilter<"drum_distillations"> | Decimal | DecimalJsLike | number | string
    distillations?: XOR<DistillationsScalarRelationFilter, distillationsWhereInput>
    new_drums?: XOR<New_drumsScalarRelationFilter, new_drumsWhereInput>
  }, "drum_id_distillation_id">

  export type drum_distillationsOrderByWithAggregationInput = {
    drum_id?: SortOrder
    distillation_id?: SortOrder
    fraction_used?: SortOrder
    _count?: drum_distillationsCountOrderByAggregateInput
    _avg?: drum_distillationsAvgOrderByAggregateInput
    _max?: drum_distillationsMaxOrderByAggregateInput
    _min?: drum_distillationsMinOrderByAggregateInput
    _sum?: drum_distillationsSumOrderByAggregateInput
  }

  export type drum_distillationsScalarWhereWithAggregatesInput = {
    AND?: drum_distillationsScalarWhereWithAggregatesInput | drum_distillationsScalarWhereWithAggregatesInput[]
    OR?: drum_distillationsScalarWhereWithAggregatesInput[]
    NOT?: drum_distillationsScalarWhereWithAggregatesInput | drum_distillationsScalarWhereWithAggregatesInput[]
    drum_id?: IntWithAggregatesFilter<"drum_distillations"> | number
    distillation_id?: IntWithAggregatesFilter<"drum_distillations"> | number
    fraction_used?: DecimalWithAggregatesFilter<"drum_distillations"> | Decimal | DecimalJsLike | number | string
  }

  export type importsWhereInput = {
    AND?: importsWhereInput | importsWhereInput[]
    OR?: importsWhereInput[]
    NOT?: importsWhereInput | importsWhereInput[]
    import_id?: IntFilter<"imports"> | number
    supplier_name?: StringFilter<"imports"> | string
    material_type?: StringFilter<"imports"> | string
    quantity?: IntFilter<"imports"> | number
    supplier_batch_code?: StringNullableFilter<"imports"> | string | null
    date_ordered?: DateTimeNullableFilter<"imports"> | Date | string | null
    date_received?: DateTimeFilter<"imports"> | Date | string
    created_at?: DateTimeNullableFilter<"imports"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"imports"> | Date | string | null
    notes?: StringNullableFilter<"imports"> | string | null
    location?: StringNullableFilter<"imports"> | string | null
  }

  export type importsOrderByWithRelationInput = {
    import_id?: SortOrder
    supplier_name?: SortOrder
    material_type?: SortOrder
    quantity?: SortOrder
    supplier_batch_code?: SortOrderInput | SortOrder
    date_ordered?: SortOrderInput | SortOrder
    date_received?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
  }

  export type importsWhereUniqueInput = Prisma.AtLeast<{
    import_id?: number
    supplier_batch_code?: string
    AND?: importsWhereInput | importsWhereInput[]
    OR?: importsWhereInput[]
    NOT?: importsWhereInput | importsWhereInput[]
    supplier_name?: StringFilter<"imports"> | string
    material_type?: StringFilter<"imports"> | string
    quantity?: IntFilter<"imports"> | number
    date_ordered?: DateTimeNullableFilter<"imports"> | Date | string | null
    date_received?: DateTimeFilter<"imports"> | Date | string
    created_at?: DateTimeNullableFilter<"imports"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"imports"> | Date | string | null
    notes?: StringNullableFilter<"imports"> | string | null
    location?: StringNullableFilter<"imports"> | string | null
  }, "import_id" | "supplier_batch_code">

  export type importsOrderByWithAggregationInput = {
    import_id?: SortOrder
    supplier_name?: SortOrder
    material_type?: SortOrder
    quantity?: SortOrder
    supplier_batch_code?: SortOrderInput | SortOrder
    date_ordered?: SortOrderInput | SortOrder
    date_received?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    _count?: importsCountOrderByAggregateInput
    _avg?: importsAvgOrderByAggregateInput
    _max?: importsMaxOrderByAggregateInput
    _min?: importsMinOrderByAggregateInput
    _sum?: importsSumOrderByAggregateInput
  }

  export type importsScalarWhereWithAggregatesInput = {
    AND?: importsScalarWhereWithAggregatesInput | importsScalarWhereWithAggregatesInput[]
    OR?: importsScalarWhereWithAggregatesInput[]
    NOT?: importsScalarWhereWithAggregatesInput | importsScalarWhereWithAggregatesInput[]
    import_id?: IntWithAggregatesFilter<"imports"> | number
    supplier_name?: StringWithAggregatesFilter<"imports"> | string
    material_type?: StringWithAggregatesFilter<"imports"> | string
    quantity?: IntWithAggregatesFilter<"imports"> | number
    supplier_batch_code?: StringNullableWithAggregatesFilter<"imports"> | string | null
    date_ordered?: DateTimeNullableWithAggregatesFilter<"imports"> | Date | string | null
    date_received?: DateTimeWithAggregatesFilter<"imports"> | Date | string
    created_at?: DateTimeNullableWithAggregatesFilter<"imports"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"imports"> | Date | string | null
    notes?: StringNullableWithAggregatesFilter<"imports"> | string | null
    location?: StringNullableWithAggregatesFilter<"imports"> | string | null
  }

  export type new_drumsWhereInput = {
    AND?: new_drumsWhereInput | new_drumsWhereInput[]
    OR?: new_drumsWhereInput[]
    NOT?: new_drumsWhereInput | new_drumsWhereInput[]
    drum_id?: IntFilter<"new_drums"> | number
    import_id?: IntNullableFilter<"new_drums"> | number | null
    material?: StringFilter<"new_drums"> | string
    date_processed?: DateTimeNullableFilter<"new_drums"> | Date | string | null
    status?: StringFilter<"new_drums"> | string
    location?: StringNullableFilter<"new_drums"> | string | null
    created_at?: DateTimeNullableFilter<"new_drums"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"new_drums"> | Date | string | null
    order_id?: IntNullableFilter<"new_drums"> | number | null
    drum_distillations?: Drum_distillationsListRelationFilter
    orders?: XOR<OrdersNullableScalarRelationFilter, ordersWhereInput> | null
    processes?: ProcessesListRelationFilter
    transactions?: TransactionsListRelationFilter
  }

  export type new_drumsOrderByWithRelationInput = {
    drum_id?: SortOrder
    import_id?: SortOrderInput | SortOrder
    material?: SortOrder
    date_processed?: SortOrderInput | SortOrder
    status?: SortOrder
    location?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    order_id?: SortOrderInput | SortOrder
    drum_distillations?: drum_distillationsOrderByRelationAggregateInput
    orders?: ordersOrderByWithRelationInput
    processes?: processesOrderByRelationAggregateInput
    transactions?: transactionsOrderByRelationAggregateInput
  }

  export type new_drumsWhereUniqueInput = Prisma.AtLeast<{
    drum_id?: number
    AND?: new_drumsWhereInput | new_drumsWhereInput[]
    OR?: new_drumsWhereInput[]
    NOT?: new_drumsWhereInput | new_drumsWhereInput[]
    import_id?: IntNullableFilter<"new_drums"> | number | null
    material?: StringFilter<"new_drums"> | string
    date_processed?: DateTimeNullableFilter<"new_drums"> | Date | string | null
    status?: StringFilter<"new_drums"> | string
    location?: StringNullableFilter<"new_drums"> | string | null
    created_at?: DateTimeNullableFilter<"new_drums"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"new_drums"> | Date | string | null
    order_id?: IntNullableFilter<"new_drums"> | number | null
    drum_distillations?: Drum_distillationsListRelationFilter
    orders?: XOR<OrdersNullableScalarRelationFilter, ordersWhereInput> | null
    processes?: ProcessesListRelationFilter
    transactions?: TransactionsListRelationFilter
  }, "drum_id">

  export type new_drumsOrderByWithAggregationInput = {
    drum_id?: SortOrder
    import_id?: SortOrderInput | SortOrder
    material?: SortOrder
    date_processed?: SortOrderInput | SortOrder
    status?: SortOrder
    location?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    order_id?: SortOrderInput | SortOrder
    _count?: new_drumsCountOrderByAggregateInput
    _avg?: new_drumsAvgOrderByAggregateInput
    _max?: new_drumsMaxOrderByAggregateInput
    _min?: new_drumsMinOrderByAggregateInput
    _sum?: new_drumsSumOrderByAggregateInput
  }

  export type new_drumsScalarWhereWithAggregatesInput = {
    AND?: new_drumsScalarWhereWithAggregatesInput | new_drumsScalarWhereWithAggregatesInput[]
    OR?: new_drumsScalarWhereWithAggregatesInput[]
    NOT?: new_drumsScalarWhereWithAggregatesInput | new_drumsScalarWhereWithAggregatesInput[]
    drum_id?: IntWithAggregatesFilter<"new_drums"> | number
    import_id?: IntNullableWithAggregatesFilter<"new_drums"> | number | null
    material?: StringWithAggregatesFilter<"new_drums"> | string
    date_processed?: DateTimeNullableWithAggregatesFilter<"new_drums"> | Date | string | null
    status?: StringWithAggregatesFilter<"new_drums"> | string
    location?: StringNullableWithAggregatesFilter<"new_drums"> | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"new_drums"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"new_drums"> | Date | string | null
    order_id?: IntNullableWithAggregatesFilter<"new_drums"> | number | null
  }

  export type ordersWhereInput = {
    AND?: ordersWhereInput | ordersWhereInput[]
    OR?: ordersWhereInput[]
    NOT?: ordersWhereInput | ordersWhereInput[]
    order_id?: IntFilter<"orders"> | number
    supplier?: StringFilter<"orders"> | string
    material?: StringFilter<"orders"> | string
    quantity?: IntFilter<"orders"> | number
    date_ordered?: DateTimeNullableFilter<"orders"> | Date | string | null
    notes?: StringNullableFilter<"orders"> | string | null
    created_at?: DateTimeNullableFilter<"orders"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"orders"> | Date | string | null
    quantity_received?: IntFilter<"orders"> | number
    delivery_status?: StringFilter<"orders"> | string
    deliveries?: DeliveriesListRelationFilter
    new_drums?: New_drumsListRelationFilter
  }

  export type ordersOrderByWithRelationInput = {
    order_id?: SortOrder
    supplier?: SortOrder
    material?: SortOrder
    quantity?: SortOrder
    date_ordered?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    quantity_received?: SortOrder
    delivery_status?: SortOrder
    deliveries?: deliveriesOrderByRelationAggregateInput
    new_drums?: new_drumsOrderByRelationAggregateInput
  }

  export type ordersWhereUniqueInput = Prisma.AtLeast<{
    order_id?: number
    AND?: ordersWhereInput | ordersWhereInput[]
    OR?: ordersWhereInput[]
    NOT?: ordersWhereInput | ordersWhereInput[]
    supplier?: StringFilter<"orders"> | string
    material?: StringFilter<"orders"> | string
    quantity?: IntFilter<"orders"> | number
    date_ordered?: DateTimeNullableFilter<"orders"> | Date | string | null
    notes?: StringNullableFilter<"orders"> | string | null
    created_at?: DateTimeNullableFilter<"orders"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"orders"> | Date | string | null
    quantity_received?: IntFilter<"orders"> | number
    delivery_status?: StringFilter<"orders"> | string
    deliveries?: DeliveriesListRelationFilter
    new_drums?: New_drumsListRelationFilter
  }, "order_id">

  export type ordersOrderByWithAggregationInput = {
    order_id?: SortOrder
    supplier?: SortOrder
    material?: SortOrder
    quantity?: SortOrder
    date_ordered?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    quantity_received?: SortOrder
    delivery_status?: SortOrder
    _count?: ordersCountOrderByAggregateInput
    _avg?: ordersAvgOrderByAggregateInput
    _max?: ordersMaxOrderByAggregateInput
    _min?: ordersMinOrderByAggregateInput
    _sum?: ordersSumOrderByAggregateInput
  }

  export type ordersScalarWhereWithAggregatesInput = {
    AND?: ordersScalarWhereWithAggregatesInput | ordersScalarWhereWithAggregatesInput[]
    OR?: ordersScalarWhereWithAggregatesInput[]
    NOT?: ordersScalarWhereWithAggregatesInput | ordersScalarWhereWithAggregatesInput[]
    order_id?: IntWithAggregatesFilter<"orders"> | number
    supplier?: StringWithAggregatesFilter<"orders"> | string
    material?: StringWithAggregatesFilter<"orders"> | string
    quantity?: IntWithAggregatesFilter<"orders"> | number
    date_ordered?: DateTimeNullableWithAggregatesFilter<"orders"> | Date | string | null
    notes?: StringNullableWithAggregatesFilter<"orders"> | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"orders"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"orders"> | Date | string | null
    quantity_received?: IntWithAggregatesFilter<"orders"> | number
    delivery_status?: StringWithAggregatesFilter<"orders"> | string
  }

  export type processesWhereInput = {
    AND?: processesWhereInput | processesWhereInput[]
    OR?: processesWhereInput[]
    NOT?: processesWhereInput | processesWhereInput[]
    process_id?: IntFilter<"processes"> | number
    material?: StringNullableFilter<"processes"> | string | null
    drum_id?: IntNullableFilter<"processes"> | number | null
    supplier?: StringNullableFilter<"processes"> | string | null
    still_code?: StringFilter<"processes"> | string
    operator?: StringNullableFilter<"processes"> | string | null
    loader?: StringNullableFilter<"processes"> | string | null
    transporter?: StringNullableFilter<"processes"> | string | null
    date_processed?: DateTimeNullableFilter<"processes"> | Date | string | null
    new_drums?: XOR<New_drumsNullableScalarRelationFilter, new_drumsWhereInput> | null
    stills?: XOR<StillsScalarRelationFilter, stillsWhereInput>
    transactions?: TransactionsListRelationFilter
  }

  export type processesOrderByWithRelationInput = {
    process_id?: SortOrder
    material?: SortOrderInput | SortOrder
    drum_id?: SortOrderInput | SortOrder
    supplier?: SortOrderInput | SortOrder
    still_code?: SortOrder
    operator?: SortOrderInput | SortOrder
    loader?: SortOrderInput | SortOrder
    transporter?: SortOrderInput | SortOrder
    date_processed?: SortOrderInput | SortOrder
    new_drums?: new_drumsOrderByWithRelationInput
    stills?: stillsOrderByWithRelationInput
    transactions?: transactionsOrderByRelationAggregateInput
  }

  export type processesWhereUniqueInput = Prisma.AtLeast<{
    process_id?: number
    AND?: processesWhereInput | processesWhereInput[]
    OR?: processesWhereInput[]
    NOT?: processesWhereInput | processesWhereInput[]
    material?: StringNullableFilter<"processes"> | string | null
    drum_id?: IntNullableFilter<"processes"> | number | null
    supplier?: StringNullableFilter<"processes"> | string | null
    still_code?: StringFilter<"processes"> | string
    operator?: StringNullableFilter<"processes"> | string | null
    loader?: StringNullableFilter<"processes"> | string | null
    transporter?: StringNullableFilter<"processes"> | string | null
    date_processed?: DateTimeNullableFilter<"processes"> | Date | string | null
    new_drums?: XOR<New_drumsNullableScalarRelationFilter, new_drumsWhereInput> | null
    stills?: XOR<StillsScalarRelationFilter, stillsWhereInput>
    transactions?: TransactionsListRelationFilter
  }, "process_id">

  export type processesOrderByWithAggregationInput = {
    process_id?: SortOrder
    material?: SortOrderInput | SortOrder
    drum_id?: SortOrderInput | SortOrder
    supplier?: SortOrderInput | SortOrder
    still_code?: SortOrder
    operator?: SortOrderInput | SortOrder
    loader?: SortOrderInput | SortOrder
    transporter?: SortOrderInput | SortOrder
    date_processed?: SortOrderInput | SortOrder
    _count?: processesCountOrderByAggregateInput
    _avg?: processesAvgOrderByAggregateInput
    _max?: processesMaxOrderByAggregateInput
    _min?: processesMinOrderByAggregateInput
    _sum?: processesSumOrderByAggregateInput
  }

  export type processesScalarWhereWithAggregatesInput = {
    AND?: processesScalarWhereWithAggregatesInput | processesScalarWhereWithAggregatesInput[]
    OR?: processesScalarWhereWithAggregatesInput[]
    NOT?: processesScalarWhereWithAggregatesInput | processesScalarWhereWithAggregatesInput[]
    process_id?: IntWithAggregatesFilter<"processes"> | number
    material?: StringNullableWithAggregatesFilter<"processes"> | string | null
    drum_id?: IntNullableWithAggregatesFilter<"processes"> | number | null
    supplier?: StringNullableWithAggregatesFilter<"processes"> | string | null
    still_code?: StringWithAggregatesFilter<"processes"> | string
    operator?: StringNullableWithAggregatesFilter<"processes"> | string | null
    loader?: StringNullableWithAggregatesFilter<"processes"> | string | null
    transporter?: StringNullableWithAggregatesFilter<"processes"> | string | null
    date_processed?: DateTimeNullableWithAggregatesFilter<"processes"> | Date | string | null
  }

  export type repro_additionsWhereInput = {
    AND?: repro_additionsWhereInput | repro_additionsWhereInput[]
    OR?: repro_additionsWhereInput[]
    NOT?: repro_additionsWhereInput | repro_additionsWhereInput[]
    addition_id?: IntFilter<"repro_additions"> | number
    repro_drum_id?: IntNullableFilter<"repro_additions"> | number | null
    distillation_id?: IntNullableFilter<"repro_additions"> | number | null
    date_added?: DateTimeNullableFilter<"repro_additions"> | Date | string | null
    volume_added?: IntFilter<"repro_additions"> | number
    volume_in_drum?: IntFilter<"repro_additions"> | number
    created_at?: DateTimeNullableFilter<"repro_additions"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"repro_additions"> | Date | string | null
    distillations?: XOR<DistillationsNullableScalarRelationFilter, distillationsWhereInput> | null
    repro_drums?: XOR<Repro_drumsNullableScalarRelationFilter, repro_drumsWhereInput> | null
  }

  export type repro_additionsOrderByWithRelationInput = {
    addition_id?: SortOrder
    repro_drum_id?: SortOrderInput | SortOrder
    distillation_id?: SortOrderInput | SortOrder
    date_added?: SortOrderInput | SortOrder
    volume_added?: SortOrder
    volume_in_drum?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    distillations?: distillationsOrderByWithRelationInput
    repro_drums?: repro_drumsOrderByWithRelationInput
  }

  export type repro_additionsWhereUniqueInput = Prisma.AtLeast<{
    addition_id?: number
    AND?: repro_additionsWhereInput | repro_additionsWhereInput[]
    OR?: repro_additionsWhereInput[]
    NOT?: repro_additionsWhereInput | repro_additionsWhereInput[]
    repro_drum_id?: IntNullableFilter<"repro_additions"> | number | null
    distillation_id?: IntNullableFilter<"repro_additions"> | number | null
    date_added?: DateTimeNullableFilter<"repro_additions"> | Date | string | null
    volume_added?: IntFilter<"repro_additions"> | number
    volume_in_drum?: IntFilter<"repro_additions"> | number
    created_at?: DateTimeNullableFilter<"repro_additions"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"repro_additions"> | Date | string | null
    distillations?: XOR<DistillationsNullableScalarRelationFilter, distillationsWhereInput> | null
    repro_drums?: XOR<Repro_drumsNullableScalarRelationFilter, repro_drumsWhereInput> | null
  }, "addition_id">

  export type repro_additionsOrderByWithAggregationInput = {
    addition_id?: SortOrder
    repro_drum_id?: SortOrderInput | SortOrder
    distillation_id?: SortOrderInput | SortOrder
    date_added?: SortOrderInput | SortOrder
    volume_added?: SortOrder
    volume_in_drum?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: repro_additionsCountOrderByAggregateInput
    _avg?: repro_additionsAvgOrderByAggregateInput
    _max?: repro_additionsMaxOrderByAggregateInput
    _min?: repro_additionsMinOrderByAggregateInput
    _sum?: repro_additionsSumOrderByAggregateInput
  }

  export type repro_additionsScalarWhereWithAggregatesInput = {
    AND?: repro_additionsScalarWhereWithAggregatesInput | repro_additionsScalarWhereWithAggregatesInput[]
    OR?: repro_additionsScalarWhereWithAggregatesInput[]
    NOT?: repro_additionsScalarWhereWithAggregatesInput | repro_additionsScalarWhereWithAggregatesInput[]
    addition_id?: IntWithAggregatesFilter<"repro_additions"> | number
    repro_drum_id?: IntNullableWithAggregatesFilter<"repro_additions"> | number | null
    distillation_id?: IntNullableWithAggregatesFilter<"repro_additions"> | number | null
    date_added?: DateTimeNullableWithAggregatesFilter<"repro_additions"> | Date | string | null
    volume_added?: IntWithAggregatesFilter<"repro_additions"> | number
    volume_in_drum?: IntWithAggregatesFilter<"repro_additions"> | number
    created_at?: DateTimeNullableWithAggregatesFilter<"repro_additions"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"repro_additions"> | Date | string | null
  }

  export type repro_drumsWhereInput = {
    AND?: repro_drumsWhereInput | repro_drumsWhereInput[]
    OR?: repro_drumsWhereInput[]
    NOT?: repro_drumsWhereInput | repro_drumsWhereInput[]
    repro_drum_id?: IntFilter<"repro_drums"> | number
    date_created?: DateTimeFilter<"repro_drums"> | Date | string
    material?: StringFilter<"repro_drums"> | string
    capacity?: IntFilter<"repro_drums"> | number
    current_volume?: IntFilter<"repro_drums"> | number
    created_at?: DateTimeNullableFilter<"repro_drums"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"repro_drums"> | Date | string | null
    status?: StringFilter<"repro_drums"> | string
    volume_status?: StringFilter<"repro_drums"> | string
    notes?: StringNullableFilter<"repro_drums"> | string | null
    location?: StringNullableFilter<"repro_drums"> | string | null
    repro_additions?: Repro_additionsListRelationFilter
    transactions?: TransactionsListRelationFilter
  }

  export type repro_drumsOrderByWithRelationInput = {
    repro_drum_id?: SortOrder
    date_created?: SortOrder
    material?: SortOrder
    capacity?: SortOrder
    current_volume?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    status?: SortOrder
    volume_status?: SortOrder
    notes?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    repro_additions?: repro_additionsOrderByRelationAggregateInput
    transactions?: transactionsOrderByRelationAggregateInput
  }

  export type repro_drumsWhereUniqueInput = Prisma.AtLeast<{
    repro_drum_id?: number
    AND?: repro_drumsWhereInput | repro_drumsWhereInput[]
    OR?: repro_drumsWhereInput[]
    NOT?: repro_drumsWhereInput | repro_drumsWhereInput[]
    date_created?: DateTimeFilter<"repro_drums"> | Date | string
    material?: StringFilter<"repro_drums"> | string
    capacity?: IntFilter<"repro_drums"> | number
    current_volume?: IntFilter<"repro_drums"> | number
    created_at?: DateTimeNullableFilter<"repro_drums"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"repro_drums"> | Date | string | null
    status?: StringFilter<"repro_drums"> | string
    volume_status?: StringFilter<"repro_drums"> | string
    notes?: StringNullableFilter<"repro_drums"> | string | null
    location?: StringNullableFilter<"repro_drums"> | string | null
    repro_additions?: Repro_additionsListRelationFilter
    transactions?: TransactionsListRelationFilter
  }, "repro_drum_id">

  export type repro_drumsOrderByWithAggregationInput = {
    repro_drum_id?: SortOrder
    date_created?: SortOrder
    material?: SortOrder
    capacity?: SortOrder
    current_volume?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    status?: SortOrder
    volume_status?: SortOrder
    notes?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    _count?: repro_drumsCountOrderByAggregateInput
    _avg?: repro_drumsAvgOrderByAggregateInput
    _max?: repro_drumsMaxOrderByAggregateInput
    _min?: repro_drumsMinOrderByAggregateInput
    _sum?: repro_drumsSumOrderByAggregateInput
  }

  export type repro_drumsScalarWhereWithAggregatesInput = {
    AND?: repro_drumsScalarWhereWithAggregatesInput | repro_drumsScalarWhereWithAggregatesInput[]
    OR?: repro_drumsScalarWhereWithAggregatesInput[]
    NOT?: repro_drumsScalarWhereWithAggregatesInput | repro_drumsScalarWhereWithAggregatesInput[]
    repro_drum_id?: IntWithAggregatesFilter<"repro_drums"> | number
    date_created?: DateTimeWithAggregatesFilter<"repro_drums"> | Date | string
    material?: StringWithAggregatesFilter<"repro_drums"> | string
    capacity?: IntWithAggregatesFilter<"repro_drums"> | number
    current_volume?: IntWithAggregatesFilter<"repro_drums"> | number
    created_at?: DateTimeNullableWithAggregatesFilter<"repro_drums"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"repro_drums"> | Date | string | null
    status?: StringWithAggregatesFilter<"repro_drums"> | string
    volume_status?: StringWithAggregatesFilter<"repro_drums"> | string
    notes?: StringNullableWithAggregatesFilter<"repro_drums"> | string | null
    location?: StringNullableWithAggregatesFilter<"repro_drums"> | string | null
  }

  export type transactionsWhereInput = {
    AND?: transactionsWhereInput | transactionsWhereInput[]
    OR?: transactionsWhereInput[]
    NOT?: transactionsWhereInput | transactionsWhereInput[]
    tx_id?: IntFilter<"transactions"> | number
    tx_type?: StringFilter<"transactions"> | string
    tx_date?: DateTimeFilter<"transactions"> | Date | string
    material?: StringNullableFilter<"transactions"> | string | null
    drum_id?: IntNullableFilter<"transactions"> | number | null
    repro_id?: IntNullableFilter<"transactions"> | number | null
    tx_notes?: StringNullableFilter<"transactions"> | string | null
    created_at?: DateTimeNullableFilter<"transactions"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"transactions"> | Date | string | null
    process_id?: IntNullableFilter<"transactions"> | number | null
    direction?: StringNullableFilter<"transactions"> | string | null
    delivery_id?: IntNullableFilter<"transactions"> | number | null
    batch_code?: StringNullableFilter<"transactions"> | string | null
    deliveries?: XOR<DeliveriesNullableScalarRelationFilter, deliveriesWhereInput> | null
    new_drums?: XOR<New_drumsNullableScalarRelationFilter, new_drumsWhereInput> | null
    processes?: XOR<ProcessesNullableScalarRelationFilter, processesWhereInput> | null
    repro_drums?: XOR<Repro_drumsNullableScalarRelationFilter, repro_drumsWhereInput> | null
  }

  export type transactionsOrderByWithRelationInput = {
    tx_id?: SortOrder
    tx_type?: SortOrder
    tx_date?: SortOrder
    material?: SortOrderInput | SortOrder
    drum_id?: SortOrderInput | SortOrder
    repro_id?: SortOrderInput | SortOrder
    tx_notes?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    process_id?: SortOrderInput | SortOrder
    direction?: SortOrderInput | SortOrder
    delivery_id?: SortOrderInput | SortOrder
    batch_code?: SortOrderInput | SortOrder
    deliveries?: deliveriesOrderByWithRelationInput
    new_drums?: new_drumsOrderByWithRelationInput
    processes?: processesOrderByWithRelationInput
    repro_drums?: repro_drumsOrderByWithRelationInput
  }

  export type transactionsWhereUniqueInput = Prisma.AtLeast<{
    tx_id?: number
    AND?: transactionsWhereInput | transactionsWhereInput[]
    OR?: transactionsWhereInput[]
    NOT?: transactionsWhereInput | transactionsWhereInput[]
    tx_type?: StringFilter<"transactions"> | string
    tx_date?: DateTimeFilter<"transactions"> | Date | string
    material?: StringNullableFilter<"transactions"> | string | null
    drum_id?: IntNullableFilter<"transactions"> | number | null
    repro_id?: IntNullableFilter<"transactions"> | number | null
    tx_notes?: StringNullableFilter<"transactions"> | string | null
    created_at?: DateTimeNullableFilter<"transactions"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"transactions"> | Date | string | null
    process_id?: IntNullableFilter<"transactions"> | number | null
    direction?: StringNullableFilter<"transactions"> | string | null
    delivery_id?: IntNullableFilter<"transactions"> | number | null
    batch_code?: StringNullableFilter<"transactions"> | string | null
    deliveries?: XOR<DeliveriesNullableScalarRelationFilter, deliveriesWhereInput> | null
    new_drums?: XOR<New_drumsNullableScalarRelationFilter, new_drumsWhereInput> | null
    processes?: XOR<ProcessesNullableScalarRelationFilter, processesWhereInput> | null
    repro_drums?: XOR<Repro_drumsNullableScalarRelationFilter, repro_drumsWhereInput> | null
  }, "tx_id">

  export type transactionsOrderByWithAggregationInput = {
    tx_id?: SortOrder
    tx_type?: SortOrder
    tx_date?: SortOrder
    material?: SortOrderInput | SortOrder
    drum_id?: SortOrderInput | SortOrder
    repro_id?: SortOrderInput | SortOrder
    tx_notes?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    process_id?: SortOrderInput | SortOrder
    direction?: SortOrderInput | SortOrder
    delivery_id?: SortOrderInput | SortOrder
    batch_code?: SortOrderInput | SortOrder
    _count?: transactionsCountOrderByAggregateInput
    _avg?: transactionsAvgOrderByAggregateInput
    _max?: transactionsMaxOrderByAggregateInput
    _min?: transactionsMinOrderByAggregateInput
    _sum?: transactionsSumOrderByAggregateInput
  }

  export type transactionsScalarWhereWithAggregatesInput = {
    AND?: transactionsScalarWhereWithAggregatesInput | transactionsScalarWhereWithAggregatesInput[]
    OR?: transactionsScalarWhereWithAggregatesInput[]
    NOT?: transactionsScalarWhereWithAggregatesInput | transactionsScalarWhereWithAggregatesInput[]
    tx_id?: IntWithAggregatesFilter<"transactions"> | number
    tx_type?: StringWithAggregatesFilter<"transactions"> | string
    tx_date?: DateTimeWithAggregatesFilter<"transactions"> | Date | string
    material?: StringNullableWithAggregatesFilter<"transactions"> | string | null
    drum_id?: IntNullableWithAggregatesFilter<"transactions"> | number | null
    repro_id?: IntNullableWithAggregatesFilter<"transactions"> | number | null
    tx_notes?: StringNullableWithAggregatesFilter<"transactions"> | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"transactions"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"transactions"> | Date | string | null
    process_id?: IntNullableWithAggregatesFilter<"transactions"> | number | null
    direction?: StringNullableWithAggregatesFilter<"transactions"> | string | null
    delivery_id?: IntNullableWithAggregatesFilter<"transactions"> | number | null
    batch_code?: StringNullableWithAggregatesFilter<"transactions"> | string | null
  }

  export type stillsWhereInput = {
    AND?: stillsWhereInput | stillsWhereInput[]
    OR?: stillsWhereInput[]
    NOT?: stillsWhereInput | stillsWhereInput[]
    code?: StringFilter<"stills"> | string
    site?: StringFilter<"stills"> | string
    power?: IntFilter<"stills"> | number
    capacity?: IntFilter<"stills"> | number
    is_vacuum?: BoolNullableFilter<"stills"> | boolean | null
    is_operational?: BoolNullableFilter<"stills"> | boolean | null
    processes?: ProcessesListRelationFilter
  }

  export type stillsOrderByWithRelationInput = {
    code?: SortOrder
    site?: SortOrder
    power?: SortOrder
    capacity?: SortOrder
    is_vacuum?: SortOrderInput | SortOrder
    is_operational?: SortOrderInput | SortOrder
    processes?: processesOrderByRelationAggregateInput
  }

  export type stillsWhereUniqueInput = Prisma.AtLeast<{
    code?: string
    AND?: stillsWhereInput | stillsWhereInput[]
    OR?: stillsWhereInput[]
    NOT?: stillsWhereInput | stillsWhereInput[]
    site?: StringFilter<"stills"> | string
    power?: IntFilter<"stills"> | number
    capacity?: IntFilter<"stills"> | number
    is_vacuum?: BoolNullableFilter<"stills"> | boolean | null
    is_operational?: BoolNullableFilter<"stills"> | boolean | null
    processes?: ProcessesListRelationFilter
  }, "code" | "code">

  export type stillsOrderByWithAggregationInput = {
    code?: SortOrder
    site?: SortOrder
    power?: SortOrder
    capacity?: SortOrder
    is_vacuum?: SortOrderInput | SortOrder
    is_operational?: SortOrderInput | SortOrder
    _count?: stillsCountOrderByAggregateInput
    _avg?: stillsAvgOrderByAggregateInput
    _max?: stillsMaxOrderByAggregateInput
    _min?: stillsMinOrderByAggregateInput
    _sum?: stillsSumOrderByAggregateInput
  }

  export type stillsScalarWhereWithAggregatesInput = {
    AND?: stillsScalarWhereWithAggregatesInput | stillsScalarWhereWithAggregatesInput[]
    OR?: stillsScalarWhereWithAggregatesInput[]
    NOT?: stillsScalarWhereWithAggregatesInput | stillsScalarWhereWithAggregatesInput[]
    code?: StringWithAggregatesFilter<"stills"> | string
    site?: StringWithAggregatesFilter<"stills"> | string
    power?: IntWithAggregatesFilter<"stills"> | number
    capacity?: IntWithAggregatesFilter<"stills"> | number
    is_vacuum?: BoolNullableWithAggregatesFilter<"stills"> | boolean | null
    is_operational?: BoolNullableWithAggregatesFilter<"stills"> | boolean | null
  }

  export type bottle_sizesCreateInput = {
    volume: string
    product_prices?: product_pricesCreateNestedManyWithoutBottle_sizesInput
  }

  export type bottle_sizesUncheckedCreateInput = {
    id?: number
    volume: string
    product_prices?: product_pricesUncheckedCreateNestedManyWithoutBottle_sizesInput
  }

  export type bottle_sizesUpdateInput = {
    volume?: StringFieldUpdateOperationsInput | string
    product_prices?: product_pricesUpdateManyWithoutBottle_sizesNestedInput
  }

  export type bottle_sizesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    volume?: StringFieldUpdateOperationsInput | string
    product_prices?: product_pricesUncheckedUpdateManyWithoutBottle_sizesNestedInput
  }

  export type bottle_sizesCreateManyInput = {
    id?: number
    volume: string
  }

  export type bottle_sizesUpdateManyMutationInput = {
    volume?: StringFieldUpdateOperationsInput | string
  }

  export type bottle_sizesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    volume?: StringFieldUpdateOperationsInput | string
  }

  export type chemical_groupsCreateInput = {
    name: string
  }

  export type chemical_groupsUncheckedCreateInput = {
    group_id?: number
    name: string
  }

  export type chemical_groupsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type chemical_groupsUncheckedUpdateInput = {
    group_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type chemical_groupsCreateManyInput = {
    group_id?: number
    name: string
  }

  export type chemical_groupsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type chemical_groupsUncheckedUpdateManyInput = {
    group_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type product_pricesCreateInput = {
    price: Decimal | DecimalJsLike | number | string
    bottle_sizes: bottle_sizesCreateNestedOneWithoutProduct_pricesInput
    products: productsCreateNestedOneWithoutProduct_pricesInput
  }

  export type product_pricesUncheckedCreateInput = {
    product_id: number
    bottle_size_id: number
    price: Decimal | DecimalJsLike | number | string
  }

  export type product_pricesUpdateInput = {
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bottle_sizes?: bottle_sizesUpdateOneRequiredWithoutProduct_pricesNestedInput
    products?: productsUpdateOneRequiredWithoutProduct_pricesNestedInput
  }

  export type product_pricesUncheckedUpdateInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    bottle_size_id?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type product_pricesCreateManyInput = {
    product_id: number
    bottle_size_id: number
    price: Decimal | DecimalJsLike | number | string
  }

  export type product_pricesUpdateManyMutationInput = {
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type product_pricesUncheckedUpdateManyInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    bottle_size_id?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type productsCreateInput = {
    name: string
    sku: string
    grade: string
    product_prices?: product_pricesCreateNestedManyWithoutProductsInput
    raw_materials?: raw_materialsCreateNestedOneWithoutProductsInput
  }

  export type productsUncheckedCreateInput = {
    product_id?: number
    name: string
    sku: string
    raw_material_id?: number | null
    grade: string
    product_prices?: product_pricesUncheckedCreateNestedManyWithoutProductsInput
  }

  export type productsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    product_prices?: product_pricesUpdateManyWithoutProductsNestedInput
    raw_materials?: raw_materialsUpdateOneWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    raw_material_id?: NullableIntFieldUpdateOperationsInput | number | null
    grade?: StringFieldUpdateOperationsInput | string
    product_prices?: product_pricesUncheckedUpdateManyWithoutProductsNestedInput
  }

  export type productsCreateManyInput = {
    product_id?: number
    name: string
    sku: string
    raw_material_id?: number | null
    grade: string
  }

  export type productsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
  }

  export type productsUncheckedUpdateManyInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    raw_material_id?: NullableIntFieldUpdateOperationsInput | number | null
    grade?: StringFieldUpdateOperationsInput | string
  }

  export type raw_materialsCreateInput = {
    name: string
    cas_number: string
    chemical_group?: string | null
    description?: string | null
    un_code?: string | null
    flash_point?: number | null
    products?: productsCreateNestedManyWithoutRaw_materialsInput
  }

  export type raw_materialsUncheckedCreateInput = {
    raw_material_id?: number
    name: string
    cas_number: string
    chemical_group?: string | null
    description?: string | null
    un_code?: string | null
    flash_point?: number | null
    products?: productsUncheckedCreateNestedManyWithoutRaw_materialsInput
  }

  export type raw_materialsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    cas_number?: StringFieldUpdateOperationsInput | string
    chemical_group?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    un_code?: NullableStringFieldUpdateOperationsInput | string | null
    flash_point?: NullableIntFieldUpdateOperationsInput | number | null
    products?: productsUpdateManyWithoutRaw_materialsNestedInput
  }

  export type raw_materialsUncheckedUpdateInput = {
    raw_material_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cas_number?: StringFieldUpdateOperationsInput | string
    chemical_group?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    un_code?: NullableStringFieldUpdateOperationsInput | string | null
    flash_point?: NullableIntFieldUpdateOperationsInput | number | null
    products?: productsUncheckedUpdateManyWithoutRaw_materialsNestedInput
  }

  export type raw_materialsCreateManyInput = {
    raw_material_id?: number
    name: string
    cas_number: string
    chemical_group?: string | null
    description?: string | null
    un_code?: string | null
    flash_point?: number | null
  }

  export type raw_materialsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    cas_number?: StringFieldUpdateOperationsInput | string
    chemical_group?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    un_code?: NullableStringFieldUpdateOperationsInput | string | null
    flash_point?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type raw_materialsUncheckedUpdateManyInput = {
    raw_material_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cas_number?: StringFieldUpdateOperationsInput | string
    chemical_group?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    un_code?: NullableStringFieldUpdateOperationsInput | string | null
    flash_point?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type batchesCreateInput = {
    creation_date?: Date | string | null
    batch_code?: string | null
    grade?: string | null
    quantity?: Decimal | DecimalJsLike | number | string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    distillations?: distillationsCreateNestedOneWithoutBatchesInput
  }

  export type batchesUncheckedCreateInput = {
    batch_id?: number
    distillation_id?: number | null
    creation_date?: Date | string | null
    batch_code?: string | null
    grade?: string | null
    quantity?: Decimal | DecimalJsLike | number | string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type batchesUpdateInput = {
    creation_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    batch_code?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    distillations?: distillationsUpdateOneWithoutBatchesNestedInput
  }

  export type batchesUncheckedUpdateInput = {
    batch_id?: IntFieldUpdateOperationsInput | number
    distillation_id?: NullableIntFieldUpdateOperationsInput | number | null
    creation_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    batch_code?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type batchesCreateManyInput = {
    batch_id?: number
    distillation_id?: number | null
    creation_date?: Date | string | null
    batch_code?: string | null
    grade?: string | null
    quantity?: Decimal | DecimalJsLike | number | string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type batchesUpdateManyMutationInput = {
    creation_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    batch_code?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type batchesUncheckedUpdateManyInput = {
    batch_id?: IntFieldUpdateOperationsInput | number
    distillation_id?: NullableIntFieldUpdateOperationsInput | number | null
    creation_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    batch_code?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type deliveriesCreateInput = {
    quantity_received: number
    date_received?: Date | string
    batch_code?: string | null
    location?: string | null
    delivery_notes?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    orders?: ordersCreateNestedOneWithoutDeliveriesInput
    transactions?: transactionsCreateNestedManyWithoutDeliveriesInput
  }

  export type deliveriesUncheckedCreateInput = {
    delivery_id?: number
    order_id?: number | null
    quantity_received: number
    date_received?: Date | string
    batch_code?: string | null
    location?: string | null
    delivery_notes?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    transactions?: transactionsUncheckedCreateNestedManyWithoutDeliveriesInput
  }

  export type deliveriesUpdateInput = {
    quantity_received?: IntFieldUpdateOperationsInput | number
    date_received?: DateTimeFieldUpdateOperationsInput | Date | string
    batch_code?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    delivery_notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orders?: ordersUpdateOneWithoutDeliveriesNestedInput
    transactions?: transactionsUpdateManyWithoutDeliveriesNestedInput
  }

  export type deliveriesUncheckedUpdateInput = {
    delivery_id?: IntFieldUpdateOperationsInput | number
    order_id?: NullableIntFieldUpdateOperationsInput | number | null
    quantity_received?: IntFieldUpdateOperationsInput | number
    date_received?: DateTimeFieldUpdateOperationsInput | Date | string
    batch_code?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    delivery_notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transactions?: transactionsUncheckedUpdateManyWithoutDeliveriesNestedInput
  }

  export type deliveriesCreateManyInput = {
    delivery_id?: number
    order_id?: number | null
    quantity_received: number
    date_received?: Date | string
    batch_code?: string | null
    location?: string | null
    delivery_notes?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type deliveriesUpdateManyMutationInput = {
    quantity_received?: IntFieldUpdateOperationsInput | number
    date_received?: DateTimeFieldUpdateOperationsInput | Date | string
    batch_code?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    delivery_notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type deliveriesUncheckedUpdateManyInput = {
    delivery_id?: IntFieldUpdateOperationsInput | number
    order_id?: NullableIntFieldUpdateOperationsInput | number | null
    quantity_received?: IntFieldUpdateOperationsInput | number
    date_received?: DateTimeFieldUpdateOperationsInput | Date | string
    batch_code?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    delivery_notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type distillationsCreateInput = {
    loading_date?: Date | string | null
    start_date?: Date | string | null
    still_code?: string | null
    volume_in?: Decimal | DecimalJsLike | number | string | null
    transporter?: string | null
    loader?: string | null
    operator?: string | null
    completion_date?: Date | string | null
    volume_in_spec?: Decimal | DecimalJsLike | number | string | null
    volume_repro?: Decimal | DecimalJsLike | number | string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    batches?: batchesCreateNestedManyWithoutDistillationsInput
    drum_distillations?: drum_distillationsCreateNestedManyWithoutDistillationsInput
    repro_additions?: repro_additionsCreateNestedManyWithoutDistillationsInput
  }

  export type distillationsUncheckedCreateInput = {
    distillation_id?: number
    loading_date?: Date | string | null
    start_date?: Date | string | null
    still_code?: string | null
    volume_in?: Decimal | DecimalJsLike | number | string | null
    transporter?: string | null
    loader?: string | null
    operator?: string | null
    completion_date?: Date | string | null
    volume_in_spec?: Decimal | DecimalJsLike | number | string | null
    volume_repro?: Decimal | DecimalJsLike | number | string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    batches?: batchesUncheckedCreateNestedManyWithoutDistillationsInput
    drum_distillations?: drum_distillationsUncheckedCreateNestedManyWithoutDistillationsInput
    repro_additions?: repro_additionsUncheckedCreateNestedManyWithoutDistillationsInput
  }

  export type distillationsUpdateInput = {
    loading_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    still_code?: NullableStringFieldUpdateOperationsInput | string | null
    volume_in?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    transporter?: NullableStringFieldUpdateOperationsInput | string | null
    loader?: NullableStringFieldUpdateOperationsInput | string | null
    operator?: NullableStringFieldUpdateOperationsInput | string | null
    completion_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    volume_in_spec?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    volume_repro?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    batches?: batchesUpdateManyWithoutDistillationsNestedInput
    drum_distillations?: drum_distillationsUpdateManyWithoutDistillationsNestedInput
    repro_additions?: repro_additionsUpdateManyWithoutDistillationsNestedInput
  }

  export type distillationsUncheckedUpdateInput = {
    distillation_id?: IntFieldUpdateOperationsInput | number
    loading_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    still_code?: NullableStringFieldUpdateOperationsInput | string | null
    volume_in?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    transporter?: NullableStringFieldUpdateOperationsInput | string | null
    loader?: NullableStringFieldUpdateOperationsInput | string | null
    operator?: NullableStringFieldUpdateOperationsInput | string | null
    completion_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    volume_in_spec?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    volume_repro?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    batches?: batchesUncheckedUpdateManyWithoutDistillationsNestedInput
    drum_distillations?: drum_distillationsUncheckedUpdateManyWithoutDistillationsNestedInput
    repro_additions?: repro_additionsUncheckedUpdateManyWithoutDistillationsNestedInput
  }

  export type distillationsCreateManyInput = {
    distillation_id?: number
    loading_date?: Date | string | null
    start_date?: Date | string | null
    still_code?: string | null
    volume_in?: Decimal | DecimalJsLike | number | string | null
    transporter?: string | null
    loader?: string | null
    operator?: string | null
    completion_date?: Date | string | null
    volume_in_spec?: Decimal | DecimalJsLike | number | string | null
    volume_repro?: Decimal | DecimalJsLike | number | string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type distillationsUpdateManyMutationInput = {
    loading_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    still_code?: NullableStringFieldUpdateOperationsInput | string | null
    volume_in?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    transporter?: NullableStringFieldUpdateOperationsInput | string | null
    loader?: NullableStringFieldUpdateOperationsInput | string | null
    operator?: NullableStringFieldUpdateOperationsInput | string | null
    completion_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    volume_in_spec?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    volume_repro?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type distillationsUncheckedUpdateManyInput = {
    distillation_id?: IntFieldUpdateOperationsInput | number
    loading_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    still_code?: NullableStringFieldUpdateOperationsInput | string | null
    volume_in?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    transporter?: NullableStringFieldUpdateOperationsInput | string | null
    loader?: NullableStringFieldUpdateOperationsInput | string | null
    operator?: NullableStringFieldUpdateOperationsInput | string | null
    completion_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    volume_in_spec?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    volume_repro?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type drum_distillationsCreateInput = {
    fraction_used?: Decimal | DecimalJsLike | number | string
    distillations: distillationsCreateNestedOneWithoutDrum_distillationsInput
    new_drums: new_drumsCreateNestedOneWithoutDrum_distillationsInput
  }

  export type drum_distillationsUncheckedCreateInput = {
    drum_id: number
    distillation_id: number
    fraction_used?: Decimal | DecimalJsLike | number | string
  }

  export type drum_distillationsUpdateInput = {
    fraction_used?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    distillations?: distillationsUpdateOneRequiredWithoutDrum_distillationsNestedInput
    new_drums?: new_drumsUpdateOneRequiredWithoutDrum_distillationsNestedInput
  }

  export type drum_distillationsUncheckedUpdateInput = {
    drum_id?: IntFieldUpdateOperationsInput | number
    distillation_id?: IntFieldUpdateOperationsInput | number
    fraction_used?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type drum_distillationsCreateManyInput = {
    drum_id: number
    distillation_id: number
    fraction_used?: Decimal | DecimalJsLike | number | string
  }

  export type drum_distillationsUpdateManyMutationInput = {
    fraction_used?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type drum_distillationsUncheckedUpdateManyInput = {
    drum_id?: IntFieldUpdateOperationsInput | number
    distillation_id?: IntFieldUpdateOperationsInput | number
    fraction_used?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type importsCreateInput = {
    supplier_name: string
    material_type: string
    quantity: number
    supplier_batch_code?: string | null
    date_ordered?: Date | string | null
    date_received: Date | string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    notes?: string | null
    location?: string | null
  }

  export type importsUncheckedCreateInput = {
    import_id?: number
    supplier_name: string
    material_type: string
    quantity: number
    supplier_batch_code?: string | null
    date_ordered?: Date | string | null
    date_received: Date | string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    notes?: string | null
    location?: string | null
  }

  export type importsUpdateInput = {
    supplier_name?: StringFieldUpdateOperationsInput | string
    material_type?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    supplier_batch_code?: NullableStringFieldUpdateOperationsInput | string | null
    date_ordered?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    date_received?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type importsUncheckedUpdateInput = {
    import_id?: IntFieldUpdateOperationsInput | number
    supplier_name?: StringFieldUpdateOperationsInput | string
    material_type?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    supplier_batch_code?: NullableStringFieldUpdateOperationsInput | string | null
    date_ordered?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    date_received?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type importsCreateManyInput = {
    import_id?: number
    supplier_name: string
    material_type: string
    quantity: number
    supplier_batch_code?: string | null
    date_ordered?: Date | string | null
    date_received: Date | string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    notes?: string | null
    location?: string | null
  }

  export type importsUpdateManyMutationInput = {
    supplier_name?: StringFieldUpdateOperationsInput | string
    material_type?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    supplier_batch_code?: NullableStringFieldUpdateOperationsInput | string | null
    date_ordered?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    date_received?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type importsUncheckedUpdateManyInput = {
    import_id?: IntFieldUpdateOperationsInput | number
    supplier_name?: StringFieldUpdateOperationsInput | string
    material_type?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    supplier_batch_code?: NullableStringFieldUpdateOperationsInput | string | null
    date_ordered?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    date_received?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type new_drumsCreateInput = {
    import_id?: number | null
    material: string
    date_processed?: Date | string | null
    status?: string
    location?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    drum_distillations?: drum_distillationsCreateNestedManyWithoutNew_drumsInput
    orders?: ordersCreateNestedOneWithoutNew_drumsInput
    processes?: processesCreateNestedManyWithoutNew_drumsInput
    transactions?: transactionsCreateNestedManyWithoutNew_drumsInput
  }

  export type new_drumsUncheckedCreateInput = {
    drum_id?: number
    import_id?: number | null
    material: string
    date_processed?: Date | string | null
    status?: string
    location?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    order_id?: number | null
    drum_distillations?: drum_distillationsUncheckedCreateNestedManyWithoutNew_drumsInput
    processes?: processesUncheckedCreateNestedManyWithoutNew_drumsInput
    transactions?: transactionsUncheckedCreateNestedManyWithoutNew_drumsInput
  }

  export type new_drumsUpdateInput = {
    import_id?: NullableIntFieldUpdateOperationsInput | number | null
    material?: StringFieldUpdateOperationsInput | string
    date_processed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    drum_distillations?: drum_distillationsUpdateManyWithoutNew_drumsNestedInput
    orders?: ordersUpdateOneWithoutNew_drumsNestedInput
    processes?: processesUpdateManyWithoutNew_drumsNestedInput
    transactions?: transactionsUpdateManyWithoutNew_drumsNestedInput
  }

  export type new_drumsUncheckedUpdateInput = {
    drum_id?: IntFieldUpdateOperationsInput | number
    import_id?: NullableIntFieldUpdateOperationsInput | number | null
    material?: StringFieldUpdateOperationsInput | string
    date_processed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order_id?: NullableIntFieldUpdateOperationsInput | number | null
    drum_distillations?: drum_distillationsUncheckedUpdateManyWithoutNew_drumsNestedInput
    processes?: processesUncheckedUpdateManyWithoutNew_drumsNestedInput
    transactions?: transactionsUncheckedUpdateManyWithoutNew_drumsNestedInput
  }

  export type new_drumsCreateManyInput = {
    drum_id?: number
    import_id?: number | null
    material: string
    date_processed?: Date | string | null
    status?: string
    location?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    order_id?: number | null
  }

  export type new_drumsUpdateManyMutationInput = {
    import_id?: NullableIntFieldUpdateOperationsInput | number | null
    material?: StringFieldUpdateOperationsInput | string
    date_processed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type new_drumsUncheckedUpdateManyInput = {
    drum_id?: IntFieldUpdateOperationsInput | number
    import_id?: NullableIntFieldUpdateOperationsInput | number | null
    material?: StringFieldUpdateOperationsInput | string
    date_processed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ordersCreateInput = {
    supplier: string
    material: string
    quantity: number
    date_ordered?: Date | string | null
    notes?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    quantity_received?: number
    delivery_status?: string
    deliveries?: deliveriesCreateNestedManyWithoutOrdersInput
    new_drums?: new_drumsCreateNestedManyWithoutOrdersInput
  }

  export type ordersUncheckedCreateInput = {
    order_id?: number
    supplier: string
    material: string
    quantity: number
    date_ordered?: Date | string | null
    notes?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    quantity_received?: number
    delivery_status?: string
    deliveries?: deliveriesUncheckedCreateNestedManyWithoutOrdersInput
    new_drums?: new_drumsUncheckedCreateNestedManyWithoutOrdersInput
  }

  export type ordersUpdateInput = {
    supplier?: StringFieldUpdateOperationsInput | string
    material?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    date_ordered?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantity_received?: IntFieldUpdateOperationsInput | number
    delivery_status?: StringFieldUpdateOperationsInput | string
    deliveries?: deliveriesUpdateManyWithoutOrdersNestedInput
    new_drums?: new_drumsUpdateManyWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    supplier?: StringFieldUpdateOperationsInput | string
    material?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    date_ordered?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantity_received?: IntFieldUpdateOperationsInput | number
    delivery_status?: StringFieldUpdateOperationsInput | string
    deliveries?: deliveriesUncheckedUpdateManyWithoutOrdersNestedInput
    new_drums?: new_drumsUncheckedUpdateManyWithoutOrdersNestedInput
  }

  export type ordersCreateManyInput = {
    order_id?: number
    supplier: string
    material: string
    quantity: number
    date_ordered?: Date | string | null
    notes?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    quantity_received?: number
    delivery_status?: string
  }

  export type ordersUpdateManyMutationInput = {
    supplier?: StringFieldUpdateOperationsInput | string
    material?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    date_ordered?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantity_received?: IntFieldUpdateOperationsInput | number
    delivery_status?: StringFieldUpdateOperationsInput | string
  }

  export type ordersUncheckedUpdateManyInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    supplier?: StringFieldUpdateOperationsInput | string
    material?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    date_ordered?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantity_received?: IntFieldUpdateOperationsInput | number
    delivery_status?: StringFieldUpdateOperationsInput | string
  }

  export type processesCreateInput = {
    material?: string | null
    supplier?: string | null
    operator?: string | null
    loader?: string | null
    transporter?: string | null
    date_processed?: Date | string | null
    new_drums?: new_drumsCreateNestedOneWithoutProcessesInput
    stills: stillsCreateNestedOneWithoutProcessesInput
    transactions?: transactionsCreateNestedManyWithoutProcessesInput
  }

  export type processesUncheckedCreateInput = {
    process_id?: number
    material?: string | null
    drum_id?: number | null
    supplier?: string | null
    still_code: string
    operator?: string | null
    loader?: string | null
    transporter?: string | null
    date_processed?: Date | string | null
    transactions?: transactionsUncheckedCreateNestedManyWithoutProcessesInput
  }

  export type processesUpdateInput = {
    material?: NullableStringFieldUpdateOperationsInput | string | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    operator?: NullableStringFieldUpdateOperationsInput | string | null
    loader?: NullableStringFieldUpdateOperationsInput | string | null
    transporter?: NullableStringFieldUpdateOperationsInput | string | null
    date_processed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    new_drums?: new_drumsUpdateOneWithoutProcessesNestedInput
    stills?: stillsUpdateOneRequiredWithoutProcessesNestedInput
    transactions?: transactionsUpdateManyWithoutProcessesNestedInput
  }

  export type processesUncheckedUpdateInput = {
    process_id?: IntFieldUpdateOperationsInput | number
    material?: NullableStringFieldUpdateOperationsInput | string | null
    drum_id?: NullableIntFieldUpdateOperationsInput | number | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    still_code?: StringFieldUpdateOperationsInput | string
    operator?: NullableStringFieldUpdateOperationsInput | string | null
    loader?: NullableStringFieldUpdateOperationsInput | string | null
    transporter?: NullableStringFieldUpdateOperationsInput | string | null
    date_processed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transactions?: transactionsUncheckedUpdateManyWithoutProcessesNestedInput
  }

  export type processesCreateManyInput = {
    process_id?: number
    material?: string | null
    drum_id?: number | null
    supplier?: string | null
    still_code: string
    operator?: string | null
    loader?: string | null
    transporter?: string | null
    date_processed?: Date | string | null
  }

  export type processesUpdateManyMutationInput = {
    material?: NullableStringFieldUpdateOperationsInput | string | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    operator?: NullableStringFieldUpdateOperationsInput | string | null
    loader?: NullableStringFieldUpdateOperationsInput | string | null
    transporter?: NullableStringFieldUpdateOperationsInput | string | null
    date_processed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type processesUncheckedUpdateManyInput = {
    process_id?: IntFieldUpdateOperationsInput | number
    material?: NullableStringFieldUpdateOperationsInput | string | null
    drum_id?: NullableIntFieldUpdateOperationsInput | number | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    still_code?: StringFieldUpdateOperationsInput | string
    operator?: NullableStringFieldUpdateOperationsInput | string | null
    loader?: NullableStringFieldUpdateOperationsInput | string | null
    transporter?: NullableStringFieldUpdateOperationsInput | string | null
    date_processed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type repro_additionsCreateInput = {
    date_added?: Date | string | null
    volume_added: number
    volume_in_drum: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    distillations?: distillationsCreateNestedOneWithoutRepro_additionsInput
    repro_drums?: repro_drumsCreateNestedOneWithoutRepro_additionsInput
  }

  export type repro_additionsUncheckedCreateInput = {
    addition_id?: number
    repro_drum_id?: number | null
    distillation_id?: number | null
    date_added?: Date | string | null
    volume_added: number
    volume_in_drum: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type repro_additionsUpdateInput = {
    date_added?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    volume_added?: IntFieldUpdateOperationsInput | number
    volume_in_drum?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    distillations?: distillationsUpdateOneWithoutRepro_additionsNestedInput
    repro_drums?: repro_drumsUpdateOneWithoutRepro_additionsNestedInput
  }

  export type repro_additionsUncheckedUpdateInput = {
    addition_id?: IntFieldUpdateOperationsInput | number
    repro_drum_id?: NullableIntFieldUpdateOperationsInput | number | null
    distillation_id?: NullableIntFieldUpdateOperationsInput | number | null
    date_added?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    volume_added?: IntFieldUpdateOperationsInput | number
    volume_in_drum?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type repro_additionsCreateManyInput = {
    addition_id?: number
    repro_drum_id?: number | null
    distillation_id?: number | null
    date_added?: Date | string | null
    volume_added: number
    volume_in_drum: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type repro_additionsUpdateManyMutationInput = {
    date_added?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    volume_added?: IntFieldUpdateOperationsInput | number
    volume_in_drum?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type repro_additionsUncheckedUpdateManyInput = {
    addition_id?: IntFieldUpdateOperationsInput | number
    repro_drum_id?: NullableIntFieldUpdateOperationsInput | number | null
    distillation_id?: NullableIntFieldUpdateOperationsInput | number | null
    date_added?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    volume_added?: IntFieldUpdateOperationsInput | number
    volume_in_drum?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type repro_drumsCreateInput = {
    date_created?: Date | string
    material: string
    capacity?: number
    current_volume?: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    status?: string
    volume_status?: string
    notes?: string | null
    location?: string | null
    repro_additions?: repro_additionsCreateNestedManyWithoutRepro_drumsInput
    transactions?: transactionsCreateNestedManyWithoutRepro_drumsInput
  }

  export type repro_drumsUncheckedCreateInput = {
    repro_drum_id?: number
    date_created?: Date | string
    material: string
    capacity?: number
    current_volume?: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    status?: string
    volume_status?: string
    notes?: string | null
    location?: string | null
    repro_additions?: repro_additionsUncheckedCreateNestedManyWithoutRepro_drumsInput
    transactions?: transactionsUncheckedCreateNestedManyWithoutRepro_drumsInput
  }

  export type repro_drumsUpdateInput = {
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    material?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    current_volume?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    volume_status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    repro_additions?: repro_additionsUpdateManyWithoutRepro_drumsNestedInput
    transactions?: transactionsUpdateManyWithoutRepro_drumsNestedInput
  }

  export type repro_drumsUncheckedUpdateInput = {
    repro_drum_id?: IntFieldUpdateOperationsInput | number
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    material?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    current_volume?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    volume_status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    repro_additions?: repro_additionsUncheckedUpdateManyWithoutRepro_drumsNestedInput
    transactions?: transactionsUncheckedUpdateManyWithoutRepro_drumsNestedInput
  }

  export type repro_drumsCreateManyInput = {
    repro_drum_id?: number
    date_created?: Date | string
    material: string
    capacity?: number
    current_volume?: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    status?: string
    volume_status?: string
    notes?: string | null
    location?: string | null
  }

  export type repro_drumsUpdateManyMutationInput = {
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    material?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    current_volume?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    volume_status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type repro_drumsUncheckedUpdateManyInput = {
    repro_drum_id?: IntFieldUpdateOperationsInput | number
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    material?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    current_volume?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    volume_status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type transactionsCreateInput = {
    tx_type?: string
    tx_date?: Date | string
    material?: string | null
    tx_notes?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    direction?: string | null
    batch_code?: string | null
    deliveries?: deliveriesCreateNestedOneWithoutTransactionsInput
    new_drums?: new_drumsCreateNestedOneWithoutTransactionsInput
    processes?: processesCreateNestedOneWithoutTransactionsInput
    repro_drums?: repro_drumsCreateNestedOneWithoutTransactionsInput
  }

  export type transactionsUncheckedCreateInput = {
    tx_id?: number
    tx_type?: string
    tx_date?: Date | string
    material?: string | null
    drum_id?: number | null
    repro_id?: number | null
    tx_notes?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    process_id?: number | null
    direction?: string | null
    delivery_id?: number | null
    batch_code?: string | null
  }

  export type transactionsUpdateInput = {
    tx_type?: StringFieldUpdateOperationsInput | string
    tx_date?: DateTimeFieldUpdateOperationsInput | Date | string
    material?: NullableStringFieldUpdateOperationsInput | string | null
    tx_notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    direction?: NullableStringFieldUpdateOperationsInput | string | null
    batch_code?: NullableStringFieldUpdateOperationsInput | string | null
    deliveries?: deliveriesUpdateOneWithoutTransactionsNestedInput
    new_drums?: new_drumsUpdateOneWithoutTransactionsNestedInput
    processes?: processesUpdateOneWithoutTransactionsNestedInput
    repro_drums?: repro_drumsUpdateOneWithoutTransactionsNestedInput
  }

  export type transactionsUncheckedUpdateInput = {
    tx_id?: IntFieldUpdateOperationsInput | number
    tx_type?: StringFieldUpdateOperationsInput | string
    tx_date?: DateTimeFieldUpdateOperationsInput | Date | string
    material?: NullableStringFieldUpdateOperationsInput | string | null
    drum_id?: NullableIntFieldUpdateOperationsInput | number | null
    repro_id?: NullableIntFieldUpdateOperationsInput | number | null
    tx_notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    process_id?: NullableIntFieldUpdateOperationsInput | number | null
    direction?: NullableStringFieldUpdateOperationsInput | string | null
    delivery_id?: NullableIntFieldUpdateOperationsInput | number | null
    batch_code?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type transactionsCreateManyInput = {
    tx_id?: number
    tx_type?: string
    tx_date?: Date | string
    material?: string | null
    drum_id?: number | null
    repro_id?: number | null
    tx_notes?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    process_id?: number | null
    direction?: string | null
    delivery_id?: number | null
    batch_code?: string | null
  }

  export type transactionsUpdateManyMutationInput = {
    tx_type?: StringFieldUpdateOperationsInput | string
    tx_date?: DateTimeFieldUpdateOperationsInput | Date | string
    material?: NullableStringFieldUpdateOperationsInput | string | null
    tx_notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    direction?: NullableStringFieldUpdateOperationsInput | string | null
    batch_code?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type transactionsUncheckedUpdateManyInput = {
    tx_id?: IntFieldUpdateOperationsInput | number
    tx_type?: StringFieldUpdateOperationsInput | string
    tx_date?: DateTimeFieldUpdateOperationsInput | Date | string
    material?: NullableStringFieldUpdateOperationsInput | string | null
    drum_id?: NullableIntFieldUpdateOperationsInput | number | null
    repro_id?: NullableIntFieldUpdateOperationsInput | number | null
    tx_notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    process_id?: NullableIntFieldUpdateOperationsInput | number | null
    direction?: NullableStringFieldUpdateOperationsInput | string | null
    delivery_id?: NullableIntFieldUpdateOperationsInput | number | null
    batch_code?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type stillsCreateInput = {
    code: string
    site: string
    power: number
    capacity: number
    is_vacuum?: boolean | null
    is_operational?: boolean | null
    processes?: processesCreateNestedManyWithoutStillsInput
  }

  export type stillsUncheckedCreateInput = {
    code: string
    site: string
    power: number
    capacity: number
    is_vacuum?: boolean | null
    is_operational?: boolean | null
    processes?: processesUncheckedCreateNestedManyWithoutStillsInput
  }

  export type stillsUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    site?: StringFieldUpdateOperationsInput | string
    power?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    is_vacuum?: NullableBoolFieldUpdateOperationsInput | boolean | null
    is_operational?: NullableBoolFieldUpdateOperationsInput | boolean | null
    processes?: processesUpdateManyWithoutStillsNestedInput
  }

  export type stillsUncheckedUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    site?: StringFieldUpdateOperationsInput | string
    power?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    is_vacuum?: NullableBoolFieldUpdateOperationsInput | boolean | null
    is_operational?: NullableBoolFieldUpdateOperationsInput | boolean | null
    processes?: processesUncheckedUpdateManyWithoutStillsNestedInput
  }

  export type stillsCreateManyInput = {
    code: string
    site: string
    power: number
    capacity: number
    is_vacuum?: boolean | null
    is_operational?: boolean | null
  }

  export type stillsUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    site?: StringFieldUpdateOperationsInput | string
    power?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    is_vacuum?: NullableBoolFieldUpdateOperationsInput | boolean | null
    is_operational?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type stillsUncheckedUpdateManyInput = {
    code?: StringFieldUpdateOperationsInput | string
    site?: StringFieldUpdateOperationsInput | string
    power?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    is_vacuum?: NullableBoolFieldUpdateOperationsInput | boolean | null
    is_operational?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type Product_pricesListRelationFilter = {
    every?: product_pricesWhereInput
    some?: product_pricesWhereInput
    none?: product_pricesWhereInput
  }

  export type product_pricesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type bottle_sizesCountOrderByAggregateInput = {
    id?: SortOrder
    volume?: SortOrder
  }

  export type bottle_sizesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type bottle_sizesMaxOrderByAggregateInput = {
    id?: SortOrder
    volume?: SortOrder
  }

  export type bottle_sizesMinOrderByAggregateInput = {
    id?: SortOrder
    volume?: SortOrder
  }

  export type bottle_sizesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type chemical_groupsCountOrderByAggregateInput = {
    group_id?: SortOrder
    name?: SortOrder
  }

  export type chemical_groupsAvgOrderByAggregateInput = {
    group_id?: SortOrder
  }

  export type chemical_groupsMaxOrderByAggregateInput = {
    group_id?: SortOrder
    name?: SortOrder
  }

  export type chemical_groupsMinOrderByAggregateInput = {
    group_id?: SortOrder
    name?: SortOrder
  }

  export type chemical_groupsSumOrderByAggregateInput = {
    group_id?: SortOrder
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type Bottle_sizesScalarRelationFilter = {
    is?: bottle_sizesWhereInput
    isNot?: bottle_sizesWhereInput
  }

  export type ProductsScalarRelationFilter = {
    is?: productsWhereInput
    isNot?: productsWhereInput
  }

  export type product_pricesProduct_idBottle_size_idCompoundUniqueInput = {
    product_id: number
    bottle_size_id: number
  }

  export type product_pricesCountOrderByAggregateInput = {
    product_id?: SortOrder
    bottle_size_id?: SortOrder
    price?: SortOrder
  }

  export type product_pricesAvgOrderByAggregateInput = {
    product_id?: SortOrder
    bottle_size_id?: SortOrder
    price?: SortOrder
  }

  export type product_pricesMaxOrderByAggregateInput = {
    product_id?: SortOrder
    bottle_size_id?: SortOrder
    price?: SortOrder
  }

  export type product_pricesMinOrderByAggregateInput = {
    product_id?: SortOrder
    bottle_size_id?: SortOrder
    price?: SortOrder
  }

  export type product_pricesSumOrderByAggregateInput = {
    product_id?: SortOrder
    bottle_size_id?: SortOrder
    price?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type Raw_materialsNullableScalarRelationFilter = {
    is?: raw_materialsWhereInput | null
    isNot?: raw_materialsWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type productsCountOrderByAggregateInput = {
    product_id?: SortOrder
    name?: SortOrder
    sku?: SortOrder
    raw_material_id?: SortOrder
    grade?: SortOrder
  }

  export type productsAvgOrderByAggregateInput = {
    product_id?: SortOrder
    raw_material_id?: SortOrder
  }

  export type productsMaxOrderByAggregateInput = {
    product_id?: SortOrder
    name?: SortOrder
    sku?: SortOrder
    raw_material_id?: SortOrder
    grade?: SortOrder
  }

  export type productsMinOrderByAggregateInput = {
    product_id?: SortOrder
    name?: SortOrder
    sku?: SortOrder
    raw_material_id?: SortOrder
    grade?: SortOrder
  }

  export type productsSumOrderByAggregateInput = {
    product_id?: SortOrder
    raw_material_id?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type ProductsListRelationFilter = {
    every?: productsWhereInput
    some?: productsWhereInput
    none?: productsWhereInput
  }

  export type productsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type raw_materialsCountOrderByAggregateInput = {
    raw_material_id?: SortOrder
    name?: SortOrder
    cas_number?: SortOrder
    chemical_group?: SortOrder
    description?: SortOrder
    un_code?: SortOrder
    flash_point?: SortOrder
  }

  export type raw_materialsAvgOrderByAggregateInput = {
    raw_material_id?: SortOrder
    flash_point?: SortOrder
  }

  export type raw_materialsMaxOrderByAggregateInput = {
    raw_material_id?: SortOrder
    name?: SortOrder
    cas_number?: SortOrder
    chemical_group?: SortOrder
    description?: SortOrder
    un_code?: SortOrder
    flash_point?: SortOrder
  }

  export type raw_materialsMinOrderByAggregateInput = {
    raw_material_id?: SortOrder
    name?: SortOrder
    cas_number?: SortOrder
    chemical_group?: SortOrder
    description?: SortOrder
    un_code?: SortOrder
    flash_point?: SortOrder
  }

  export type raw_materialsSumOrderByAggregateInput = {
    raw_material_id?: SortOrder
    flash_point?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type DistillationsNullableScalarRelationFilter = {
    is?: distillationsWhereInput | null
    isNot?: distillationsWhereInput | null
  }

  export type batchesCountOrderByAggregateInput = {
    batch_id?: SortOrder
    distillation_id?: SortOrder
    creation_date?: SortOrder
    batch_code?: SortOrder
    grade?: SortOrder
    quantity?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type batchesAvgOrderByAggregateInput = {
    batch_id?: SortOrder
    distillation_id?: SortOrder
    quantity?: SortOrder
  }

  export type batchesMaxOrderByAggregateInput = {
    batch_id?: SortOrder
    distillation_id?: SortOrder
    creation_date?: SortOrder
    batch_code?: SortOrder
    grade?: SortOrder
    quantity?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type batchesMinOrderByAggregateInput = {
    batch_id?: SortOrder
    distillation_id?: SortOrder
    creation_date?: SortOrder
    batch_code?: SortOrder
    grade?: SortOrder
    quantity?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type batchesSumOrderByAggregateInput = {
    batch_id?: SortOrder
    distillation_id?: SortOrder
    quantity?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type OrdersNullableScalarRelationFilter = {
    is?: ordersWhereInput | null
    isNot?: ordersWhereInput | null
  }

  export type TransactionsListRelationFilter = {
    every?: transactionsWhereInput
    some?: transactionsWhereInput
    none?: transactionsWhereInput
  }

  export type transactionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type deliveriesOrder_idBatch_codeCompoundUniqueInput = {
    order_id: number
    batch_code: string
  }

  export type deliveriesCountOrderByAggregateInput = {
    delivery_id?: SortOrder
    order_id?: SortOrder
    quantity_received?: SortOrder
    date_received?: SortOrder
    batch_code?: SortOrder
    location?: SortOrder
    delivery_notes?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type deliveriesAvgOrderByAggregateInput = {
    delivery_id?: SortOrder
    order_id?: SortOrder
    quantity_received?: SortOrder
  }

  export type deliveriesMaxOrderByAggregateInput = {
    delivery_id?: SortOrder
    order_id?: SortOrder
    quantity_received?: SortOrder
    date_received?: SortOrder
    batch_code?: SortOrder
    location?: SortOrder
    delivery_notes?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type deliveriesMinOrderByAggregateInput = {
    delivery_id?: SortOrder
    order_id?: SortOrder
    quantity_received?: SortOrder
    date_received?: SortOrder
    batch_code?: SortOrder
    location?: SortOrder
    delivery_notes?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type deliveriesSumOrderByAggregateInput = {
    delivery_id?: SortOrder
    order_id?: SortOrder
    quantity_received?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BatchesListRelationFilter = {
    every?: batchesWhereInput
    some?: batchesWhereInput
    none?: batchesWhereInput
  }

  export type Drum_distillationsListRelationFilter = {
    every?: drum_distillationsWhereInput
    some?: drum_distillationsWhereInput
    none?: drum_distillationsWhereInput
  }

  export type Repro_additionsListRelationFilter = {
    every?: repro_additionsWhereInput
    some?: repro_additionsWhereInput
    none?: repro_additionsWhereInput
  }

  export type batchesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type drum_distillationsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type repro_additionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type distillationsCountOrderByAggregateInput = {
    distillation_id?: SortOrder
    loading_date?: SortOrder
    start_date?: SortOrder
    still_code?: SortOrder
    volume_in?: SortOrder
    transporter?: SortOrder
    loader?: SortOrder
    operator?: SortOrder
    completion_date?: SortOrder
    volume_in_spec?: SortOrder
    volume_repro?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type distillationsAvgOrderByAggregateInput = {
    distillation_id?: SortOrder
    volume_in?: SortOrder
    volume_in_spec?: SortOrder
    volume_repro?: SortOrder
  }

  export type distillationsMaxOrderByAggregateInput = {
    distillation_id?: SortOrder
    loading_date?: SortOrder
    start_date?: SortOrder
    still_code?: SortOrder
    volume_in?: SortOrder
    transporter?: SortOrder
    loader?: SortOrder
    operator?: SortOrder
    completion_date?: SortOrder
    volume_in_spec?: SortOrder
    volume_repro?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type distillationsMinOrderByAggregateInput = {
    distillation_id?: SortOrder
    loading_date?: SortOrder
    start_date?: SortOrder
    still_code?: SortOrder
    volume_in?: SortOrder
    transporter?: SortOrder
    loader?: SortOrder
    operator?: SortOrder
    completion_date?: SortOrder
    volume_in_spec?: SortOrder
    volume_repro?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type distillationsSumOrderByAggregateInput = {
    distillation_id?: SortOrder
    volume_in?: SortOrder
    volume_in_spec?: SortOrder
    volume_repro?: SortOrder
  }

  export type DistillationsScalarRelationFilter = {
    is?: distillationsWhereInput
    isNot?: distillationsWhereInput
  }

  export type New_drumsScalarRelationFilter = {
    is?: new_drumsWhereInput
    isNot?: new_drumsWhereInput
  }

  export type drum_distillationsDrum_idDistillation_idCompoundUniqueInput = {
    drum_id: number
    distillation_id: number
  }

  export type drum_distillationsCountOrderByAggregateInput = {
    drum_id?: SortOrder
    distillation_id?: SortOrder
    fraction_used?: SortOrder
  }

  export type drum_distillationsAvgOrderByAggregateInput = {
    drum_id?: SortOrder
    distillation_id?: SortOrder
    fraction_used?: SortOrder
  }

  export type drum_distillationsMaxOrderByAggregateInput = {
    drum_id?: SortOrder
    distillation_id?: SortOrder
    fraction_used?: SortOrder
  }

  export type drum_distillationsMinOrderByAggregateInput = {
    drum_id?: SortOrder
    distillation_id?: SortOrder
    fraction_used?: SortOrder
  }

  export type drum_distillationsSumOrderByAggregateInput = {
    drum_id?: SortOrder
    distillation_id?: SortOrder
    fraction_used?: SortOrder
  }

  export type importsCountOrderByAggregateInput = {
    import_id?: SortOrder
    supplier_name?: SortOrder
    material_type?: SortOrder
    quantity?: SortOrder
    supplier_batch_code?: SortOrder
    date_ordered?: SortOrder
    date_received?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    notes?: SortOrder
    location?: SortOrder
  }

  export type importsAvgOrderByAggregateInput = {
    import_id?: SortOrder
    quantity?: SortOrder
  }

  export type importsMaxOrderByAggregateInput = {
    import_id?: SortOrder
    supplier_name?: SortOrder
    material_type?: SortOrder
    quantity?: SortOrder
    supplier_batch_code?: SortOrder
    date_ordered?: SortOrder
    date_received?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    notes?: SortOrder
    location?: SortOrder
  }

  export type importsMinOrderByAggregateInput = {
    import_id?: SortOrder
    supplier_name?: SortOrder
    material_type?: SortOrder
    quantity?: SortOrder
    supplier_batch_code?: SortOrder
    date_ordered?: SortOrder
    date_received?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    notes?: SortOrder
    location?: SortOrder
  }

  export type importsSumOrderByAggregateInput = {
    import_id?: SortOrder
    quantity?: SortOrder
  }

  export type ProcessesListRelationFilter = {
    every?: processesWhereInput
    some?: processesWhereInput
    none?: processesWhereInput
  }

  export type processesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type new_drumsCountOrderByAggregateInput = {
    drum_id?: SortOrder
    import_id?: SortOrder
    material?: SortOrder
    date_processed?: SortOrder
    status?: SortOrder
    location?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    order_id?: SortOrder
  }

  export type new_drumsAvgOrderByAggregateInput = {
    drum_id?: SortOrder
    import_id?: SortOrder
    order_id?: SortOrder
  }

  export type new_drumsMaxOrderByAggregateInput = {
    drum_id?: SortOrder
    import_id?: SortOrder
    material?: SortOrder
    date_processed?: SortOrder
    status?: SortOrder
    location?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    order_id?: SortOrder
  }

  export type new_drumsMinOrderByAggregateInput = {
    drum_id?: SortOrder
    import_id?: SortOrder
    material?: SortOrder
    date_processed?: SortOrder
    status?: SortOrder
    location?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    order_id?: SortOrder
  }

  export type new_drumsSumOrderByAggregateInput = {
    drum_id?: SortOrder
    import_id?: SortOrder
    order_id?: SortOrder
  }

  export type DeliveriesListRelationFilter = {
    every?: deliveriesWhereInput
    some?: deliveriesWhereInput
    none?: deliveriesWhereInput
  }

  export type New_drumsListRelationFilter = {
    every?: new_drumsWhereInput
    some?: new_drumsWhereInput
    none?: new_drumsWhereInput
  }

  export type deliveriesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type new_drumsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ordersCountOrderByAggregateInput = {
    order_id?: SortOrder
    supplier?: SortOrder
    material?: SortOrder
    quantity?: SortOrder
    date_ordered?: SortOrder
    notes?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    quantity_received?: SortOrder
    delivery_status?: SortOrder
  }

  export type ordersAvgOrderByAggregateInput = {
    order_id?: SortOrder
    quantity?: SortOrder
    quantity_received?: SortOrder
  }

  export type ordersMaxOrderByAggregateInput = {
    order_id?: SortOrder
    supplier?: SortOrder
    material?: SortOrder
    quantity?: SortOrder
    date_ordered?: SortOrder
    notes?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    quantity_received?: SortOrder
    delivery_status?: SortOrder
  }

  export type ordersMinOrderByAggregateInput = {
    order_id?: SortOrder
    supplier?: SortOrder
    material?: SortOrder
    quantity?: SortOrder
    date_ordered?: SortOrder
    notes?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    quantity_received?: SortOrder
    delivery_status?: SortOrder
  }

  export type ordersSumOrderByAggregateInput = {
    order_id?: SortOrder
    quantity?: SortOrder
    quantity_received?: SortOrder
  }

  export type New_drumsNullableScalarRelationFilter = {
    is?: new_drumsWhereInput | null
    isNot?: new_drumsWhereInput | null
  }

  export type StillsScalarRelationFilter = {
    is?: stillsWhereInput
    isNot?: stillsWhereInput
  }

  export type processesCountOrderByAggregateInput = {
    process_id?: SortOrder
    material?: SortOrder
    drum_id?: SortOrder
    supplier?: SortOrder
    still_code?: SortOrder
    operator?: SortOrder
    loader?: SortOrder
    transporter?: SortOrder
    date_processed?: SortOrder
  }

  export type processesAvgOrderByAggregateInput = {
    process_id?: SortOrder
    drum_id?: SortOrder
  }

  export type processesMaxOrderByAggregateInput = {
    process_id?: SortOrder
    material?: SortOrder
    drum_id?: SortOrder
    supplier?: SortOrder
    still_code?: SortOrder
    operator?: SortOrder
    loader?: SortOrder
    transporter?: SortOrder
    date_processed?: SortOrder
  }

  export type processesMinOrderByAggregateInput = {
    process_id?: SortOrder
    material?: SortOrder
    drum_id?: SortOrder
    supplier?: SortOrder
    still_code?: SortOrder
    operator?: SortOrder
    loader?: SortOrder
    transporter?: SortOrder
    date_processed?: SortOrder
  }

  export type processesSumOrderByAggregateInput = {
    process_id?: SortOrder
    drum_id?: SortOrder
  }

  export type Repro_drumsNullableScalarRelationFilter = {
    is?: repro_drumsWhereInput | null
    isNot?: repro_drumsWhereInput | null
  }

  export type repro_additionsCountOrderByAggregateInput = {
    addition_id?: SortOrder
    repro_drum_id?: SortOrder
    distillation_id?: SortOrder
    date_added?: SortOrder
    volume_added?: SortOrder
    volume_in_drum?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type repro_additionsAvgOrderByAggregateInput = {
    addition_id?: SortOrder
    repro_drum_id?: SortOrder
    distillation_id?: SortOrder
    volume_added?: SortOrder
    volume_in_drum?: SortOrder
  }

  export type repro_additionsMaxOrderByAggregateInput = {
    addition_id?: SortOrder
    repro_drum_id?: SortOrder
    distillation_id?: SortOrder
    date_added?: SortOrder
    volume_added?: SortOrder
    volume_in_drum?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type repro_additionsMinOrderByAggregateInput = {
    addition_id?: SortOrder
    repro_drum_id?: SortOrder
    distillation_id?: SortOrder
    date_added?: SortOrder
    volume_added?: SortOrder
    volume_in_drum?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type repro_additionsSumOrderByAggregateInput = {
    addition_id?: SortOrder
    repro_drum_id?: SortOrder
    distillation_id?: SortOrder
    volume_added?: SortOrder
    volume_in_drum?: SortOrder
  }

  export type repro_drumsCountOrderByAggregateInput = {
    repro_drum_id?: SortOrder
    date_created?: SortOrder
    material?: SortOrder
    capacity?: SortOrder
    current_volume?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    status?: SortOrder
    volume_status?: SortOrder
    notes?: SortOrder
    location?: SortOrder
  }

  export type repro_drumsAvgOrderByAggregateInput = {
    repro_drum_id?: SortOrder
    capacity?: SortOrder
    current_volume?: SortOrder
  }

  export type repro_drumsMaxOrderByAggregateInput = {
    repro_drum_id?: SortOrder
    date_created?: SortOrder
    material?: SortOrder
    capacity?: SortOrder
    current_volume?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    status?: SortOrder
    volume_status?: SortOrder
    notes?: SortOrder
    location?: SortOrder
  }

  export type repro_drumsMinOrderByAggregateInput = {
    repro_drum_id?: SortOrder
    date_created?: SortOrder
    material?: SortOrder
    capacity?: SortOrder
    current_volume?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    status?: SortOrder
    volume_status?: SortOrder
    notes?: SortOrder
    location?: SortOrder
  }

  export type repro_drumsSumOrderByAggregateInput = {
    repro_drum_id?: SortOrder
    capacity?: SortOrder
    current_volume?: SortOrder
  }

  export type DeliveriesNullableScalarRelationFilter = {
    is?: deliveriesWhereInput | null
    isNot?: deliveriesWhereInput | null
  }

  export type ProcessesNullableScalarRelationFilter = {
    is?: processesWhereInput | null
    isNot?: processesWhereInput | null
  }

  export type transactionsCountOrderByAggregateInput = {
    tx_id?: SortOrder
    tx_type?: SortOrder
    tx_date?: SortOrder
    material?: SortOrder
    drum_id?: SortOrder
    repro_id?: SortOrder
    tx_notes?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    process_id?: SortOrder
    direction?: SortOrder
    delivery_id?: SortOrder
    batch_code?: SortOrder
  }

  export type transactionsAvgOrderByAggregateInput = {
    tx_id?: SortOrder
    drum_id?: SortOrder
    repro_id?: SortOrder
    process_id?: SortOrder
    delivery_id?: SortOrder
  }

  export type transactionsMaxOrderByAggregateInput = {
    tx_id?: SortOrder
    tx_type?: SortOrder
    tx_date?: SortOrder
    material?: SortOrder
    drum_id?: SortOrder
    repro_id?: SortOrder
    tx_notes?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    process_id?: SortOrder
    direction?: SortOrder
    delivery_id?: SortOrder
    batch_code?: SortOrder
  }

  export type transactionsMinOrderByAggregateInput = {
    tx_id?: SortOrder
    tx_type?: SortOrder
    tx_date?: SortOrder
    material?: SortOrder
    drum_id?: SortOrder
    repro_id?: SortOrder
    tx_notes?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    process_id?: SortOrder
    direction?: SortOrder
    delivery_id?: SortOrder
    batch_code?: SortOrder
  }

  export type transactionsSumOrderByAggregateInput = {
    tx_id?: SortOrder
    drum_id?: SortOrder
    repro_id?: SortOrder
    process_id?: SortOrder
    delivery_id?: SortOrder
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type stillsCountOrderByAggregateInput = {
    code?: SortOrder
    site?: SortOrder
    power?: SortOrder
    capacity?: SortOrder
    is_vacuum?: SortOrder
    is_operational?: SortOrder
  }

  export type stillsAvgOrderByAggregateInput = {
    power?: SortOrder
    capacity?: SortOrder
  }

  export type stillsMaxOrderByAggregateInput = {
    code?: SortOrder
    site?: SortOrder
    power?: SortOrder
    capacity?: SortOrder
    is_vacuum?: SortOrder
    is_operational?: SortOrder
  }

  export type stillsMinOrderByAggregateInput = {
    code?: SortOrder
    site?: SortOrder
    power?: SortOrder
    capacity?: SortOrder
    is_vacuum?: SortOrder
    is_operational?: SortOrder
  }

  export type stillsSumOrderByAggregateInput = {
    power?: SortOrder
    capacity?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type product_pricesCreateNestedManyWithoutBottle_sizesInput = {
    create?: XOR<product_pricesCreateWithoutBottle_sizesInput, product_pricesUncheckedCreateWithoutBottle_sizesInput> | product_pricesCreateWithoutBottle_sizesInput[] | product_pricesUncheckedCreateWithoutBottle_sizesInput[]
    connectOrCreate?: product_pricesCreateOrConnectWithoutBottle_sizesInput | product_pricesCreateOrConnectWithoutBottle_sizesInput[]
    createMany?: product_pricesCreateManyBottle_sizesInputEnvelope
    connect?: product_pricesWhereUniqueInput | product_pricesWhereUniqueInput[]
  }

  export type product_pricesUncheckedCreateNestedManyWithoutBottle_sizesInput = {
    create?: XOR<product_pricesCreateWithoutBottle_sizesInput, product_pricesUncheckedCreateWithoutBottle_sizesInput> | product_pricesCreateWithoutBottle_sizesInput[] | product_pricesUncheckedCreateWithoutBottle_sizesInput[]
    connectOrCreate?: product_pricesCreateOrConnectWithoutBottle_sizesInput | product_pricesCreateOrConnectWithoutBottle_sizesInput[]
    createMany?: product_pricesCreateManyBottle_sizesInputEnvelope
    connect?: product_pricesWhereUniqueInput | product_pricesWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type product_pricesUpdateManyWithoutBottle_sizesNestedInput = {
    create?: XOR<product_pricesCreateWithoutBottle_sizesInput, product_pricesUncheckedCreateWithoutBottle_sizesInput> | product_pricesCreateWithoutBottle_sizesInput[] | product_pricesUncheckedCreateWithoutBottle_sizesInput[]
    connectOrCreate?: product_pricesCreateOrConnectWithoutBottle_sizesInput | product_pricesCreateOrConnectWithoutBottle_sizesInput[]
    upsert?: product_pricesUpsertWithWhereUniqueWithoutBottle_sizesInput | product_pricesUpsertWithWhereUniqueWithoutBottle_sizesInput[]
    createMany?: product_pricesCreateManyBottle_sizesInputEnvelope
    set?: product_pricesWhereUniqueInput | product_pricesWhereUniqueInput[]
    disconnect?: product_pricesWhereUniqueInput | product_pricesWhereUniqueInput[]
    delete?: product_pricesWhereUniqueInput | product_pricesWhereUniqueInput[]
    connect?: product_pricesWhereUniqueInput | product_pricesWhereUniqueInput[]
    update?: product_pricesUpdateWithWhereUniqueWithoutBottle_sizesInput | product_pricesUpdateWithWhereUniqueWithoutBottle_sizesInput[]
    updateMany?: product_pricesUpdateManyWithWhereWithoutBottle_sizesInput | product_pricesUpdateManyWithWhereWithoutBottle_sizesInput[]
    deleteMany?: product_pricesScalarWhereInput | product_pricesScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type product_pricesUncheckedUpdateManyWithoutBottle_sizesNestedInput = {
    create?: XOR<product_pricesCreateWithoutBottle_sizesInput, product_pricesUncheckedCreateWithoutBottle_sizesInput> | product_pricesCreateWithoutBottle_sizesInput[] | product_pricesUncheckedCreateWithoutBottle_sizesInput[]
    connectOrCreate?: product_pricesCreateOrConnectWithoutBottle_sizesInput | product_pricesCreateOrConnectWithoutBottle_sizesInput[]
    upsert?: product_pricesUpsertWithWhereUniqueWithoutBottle_sizesInput | product_pricesUpsertWithWhereUniqueWithoutBottle_sizesInput[]
    createMany?: product_pricesCreateManyBottle_sizesInputEnvelope
    set?: product_pricesWhereUniqueInput | product_pricesWhereUniqueInput[]
    disconnect?: product_pricesWhereUniqueInput | product_pricesWhereUniqueInput[]
    delete?: product_pricesWhereUniqueInput | product_pricesWhereUniqueInput[]
    connect?: product_pricesWhereUniqueInput | product_pricesWhereUniqueInput[]
    update?: product_pricesUpdateWithWhereUniqueWithoutBottle_sizesInput | product_pricesUpdateWithWhereUniqueWithoutBottle_sizesInput[]
    updateMany?: product_pricesUpdateManyWithWhereWithoutBottle_sizesInput | product_pricesUpdateManyWithWhereWithoutBottle_sizesInput[]
    deleteMany?: product_pricesScalarWhereInput | product_pricesScalarWhereInput[]
  }

  export type bottle_sizesCreateNestedOneWithoutProduct_pricesInput = {
    create?: XOR<bottle_sizesCreateWithoutProduct_pricesInput, bottle_sizesUncheckedCreateWithoutProduct_pricesInput>
    connectOrCreate?: bottle_sizesCreateOrConnectWithoutProduct_pricesInput
    connect?: bottle_sizesWhereUniqueInput
  }

  export type productsCreateNestedOneWithoutProduct_pricesInput = {
    create?: XOR<productsCreateWithoutProduct_pricesInput, productsUncheckedCreateWithoutProduct_pricesInput>
    connectOrCreate?: productsCreateOrConnectWithoutProduct_pricesInput
    connect?: productsWhereUniqueInput
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type bottle_sizesUpdateOneRequiredWithoutProduct_pricesNestedInput = {
    create?: XOR<bottle_sizesCreateWithoutProduct_pricesInput, bottle_sizesUncheckedCreateWithoutProduct_pricesInput>
    connectOrCreate?: bottle_sizesCreateOrConnectWithoutProduct_pricesInput
    upsert?: bottle_sizesUpsertWithoutProduct_pricesInput
    connect?: bottle_sizesWhereUniqueInput
    update?: XOR<XOR<bottle_sizesUpdateToOneWithWhereWithoutProduct_pricesInput, bottle_sizesUpdateWithoutProduct_pricesInput>, bottle_sizesUncheckedUpdateWithoutProduct_pricesInput>
  }

  export type productsUpdateOneRequiredWithoutProduct_pricesNestedInput = {
    create?: XOR<productsCreateWithoutProduct_pricesInput, productsUncheckedCreateWithoutProduct_pricesInput>
    connectOrCreate?: productsCreateOrConnectWithoutProduct_pricesInput
    upsert?: productsUpsertWithoutProduct_pricesInput
    connect?: productsWhereUniqueInput
    update?: XOR<XOR<productsUpdateToOneWithWhereWithoutProduct_pricesInput, productsUpdateWithoutProduct_pricesInput>, productsUncheckedUpdateWithoutProduct_pricesInput>
  }

  export type product_pricesCreateNestedManyWithoutProductsInput = {
    create?: XOR<product_pricesCreateWithoutProductsInput, product_pricesUncheckedCreateWithoutProductsInput> | product_pricesCreateWithoutProductsInput[] | product_pricesUncheckedCreateWithoutProductsInput[]
    connectOrCreate?: product_pricesCreateOrConnectWithoutProductsInput | product_pricesCreateOrConnectWithoutProductsInput[]
    createMany?: product_pricesCreateManyProductsInputEnvelope
    connect?: product_pricesWhereUniqueInput | product_pricesWhereUniqueInput[]
  }

  export type raw_materialsCreateNestedOneWithoutProductsInput = {
    create?: XOR<raw_materialsCreateWithoutProductsInput, raw_materialsUncheckedCreateWithoutProductsInput>
    connectOrCreate?: raw_materialsCreateOrConnectWithoutProductsInput
    connect?: raw_materialsWhereUniqueInput
  }

  export type product_pricesUncheckedCreateNestedManyWithoutProductsInput = {
    create?: XOR<product_pricesCreateWithoutProductsInput, product_pricesUncheckedCreateWithoutProductsInput> | product_pricesCreateWithoutProductsInput[] | product_pricesUncheckedCreateWithoutProductsInput[]
    connectOrCreate?: product_pricesCreateOrConnectWithoutProductsInput | product_pricesCreateOrConnectWithoutProductsInput[]
    createMany?: product_pricesCreateManyProductsInputEnvelope
    connect?: product_pricesWhereUniqueInput | product_pricesWhereUniqueInput[]
  }

  export type product_pricesUpdateManyWithoutProductsNestedInput = {
    create?: XOR<product_pricesCreateWithoutProductsInput, product_pricesUncheckedCreateWithoutProductsInput> | product_pricesCreateWithoutProductsInput[] | product_pricesUncheckedCreateWithoutProductsInput[]
    connectOrCreate?: product_pricesCreateOrConnectWithoutProductsInput | product_pricesCreateOrConnectWithoutProductsInput[]
    upsert?: product_pricesUpsertWithWhereUniqueWithoutProductsInput | product_pricesUpsertWithWhereUniqueWithoutProductsInput[]
    createMany?: product_pricesCreateManyProductsInputEnvelope
    set?: product_pricesWhereUniqueInput | product_pricesWhereUniqueInput[]
    disconnect?: product_pricesWhereUniqueInput | product_pricesWhereUniqueInput[]
    delete?: product_pricesWhereUniqueInput | product_pricesWhereUniqueInput[]
    connect?: product_pricesWhereUniqueInput | product_pricesWhereUniqueInput[]
    update?: product_pricesUpdateWithWhereUniqueWithoutProductsInput | product_pricesUpdateWithWhereUniqueWithoutProductsInput[]
    updateMany?: product_pricesUpdateManyWithWhereWithoutProductsInput | product_pricesUpdateManyWithWhereWithoutProductsInput[]
    deleteMany?: product_pricesScalarWhereInput | product_pricesScalarWhereInput[]
  }

  export type raw_materialsUpdateOneWithoutProductsNestedInput = {
    create?: XOR<raw_materialsCreateWithoutProductsInput, raw_materialsUncheckedCreateWithoutProductsInput>
    connectOrCreate?: raw_materialsCreateOrConnectWithoutProductsInput
    upsert?: raw_materialsUpsertWithoutProductsInput
    disconnect?: raw_materialsWhereInput | boolean
    delete?: raw_materialsWhereInput | boolean
    connect?: raw_materialsWhereUniqueInput
    update?: XOR<XOR<raw_materialsUpdateToOneWithWhereWithoutProductsInput, raw_materialsUpdateWithoutProductsInput>, raw_materialsUncheckedUpdateWithoutProductsInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type product_pricesUncheckedUpdateManyWithoutProductsNestedInput = {
    create?: XOR<product_pricesCreateWithoutProductsInput, product_pricesUncheckedCreateWithoutProductsInput> | product_pricesCreateWithoutProductsInput[] | product_pricesUncheckedCreateWithoutProductsInput[]
    connectOrCreate?: product_pricesCreateOrConnectWithoutProductsInput | product_pricesCreateOrConnectWithoutProductsInput[]
    upsert?: product_pricesUpsertWithWhereUniqueWithoutProductsInput | product_pricesUpsertWithWhereUniqueWithoutProductsInput[]
    createMany?: product_pricesCreateManyProductsInputEnvelope
    set?: product_pricesWhereUniqueInput | product_pricesWhereUniqueInput[]
    disconnect?: product_pricesWhereUniqueInput | product_pricesWhereUniqueInput[]
    delete?: product_pricesWhereUniqueInput | product_pricesWhereUniqueInput[]
    connect?: product_pricesWhereUniqueInput | product_pricesWhereUniqueInput[]
    update?: product_pricesUpdateWithWhereUniqueWithoutProductsInput | product_pricesUpdateWithWhereUniqueWithoutProductsInput[]
    updateMany?: product_pricesUpdateManyWithWhereWithoutProductsInput | product_pricesUpdateManyWithWhereWithoutProductsInput[]
    deleteMany?: product_pricesScalarWhereInput | product_pricesScalarWhereInput[]
  }

  export type productsCreateNestedManyWithoutRaw_materialsInput = {
    create?: XOR<productsCreateWithoutRaw_materialsInput, productsUncheckedCreateWithoutRaw_materialsInput> | productsCreateWithoutRaw_materialsInput[] | productsUncheckedCreateWithoutRaw_materialsInput[]
    connectOrCreate?: productsCreateOrConnectWithoutRaw_materialsInput | productsCreateOrConnectWithoutRaw_materialsInput[]
    createMany?: productsCreateManyRaw_materialsInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type productsUncheckedCreateNestedManyWithoutRaw_materialsInput = {
    create?: XOR<productsCreateWithoutRaw_materialsInput, productsUncheckedCreateWithoutRaw_materialsInput> | productsCreateWithoutRaw_materialsInput[] | productsUncheckedCreateWithoutRaw_materialsInput[]
    connectOrCreate?: productsCreateOrConnectWithoutRaw_materialsInput | productsCreateOrConnectWithoutRaw_materialsInput[]
    createMany?: productsCreateManyRaw_materialsInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type productsUpdateManyWithoutRaw_materialsNestedInput = {
    create?: XOR<productsCreateWithoutRaw_materialsInput, productsUncheckedCreateWithoutRaw_materialsInput> | productsCreateWithoutRaw_materialsInput[] | productsUncheckedCreateWithoutRaw_materialsInput[]
    connectOrCreate?: productsCreateOrConnectWithoutRaw_materialsInput | productsCreateOrConnectWithoutRaw_materialsInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutRaw_materialsInput | productsUpsertWithWhereUniqueWithoutRaw_materialsInput[]
    createMany?: productsCreateManyRaw_materialsInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutRaw_materialsInput | productsUpdateWithWhereUniqueWithoutRaw_materialsInput[]
    updateMany?: productsUpdateManyWithWhereWithoutRaw_materialsInput | productsUpdateManyWithWhereWithoutRaw_materialsInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type productsUncheckedUpdateManyWithoutRaw_materialsNestedInput = {
    create?: XOR<productsCreateWithoutRaw_materialsInput, productsUncheckedCreateWithoutRaw_materialsInput> | productsCreateWithoutRaw_materialsInput[] | productsUncheckedCreateWithoutRaw_materialsInput[]
    connectOrCreate?: productsCreateOrConnectWithoutRaw_materialsInput | productsCreateOrConnectWithoutRaw_materialsInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutRaw_materialsInput | productsUpsertWithWhereUniqueWithoutRaw_materialsInput[]
    createMany?: productsCreateManyRaw_materialsInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutRaw_materialsInput | productsUpdateWithWhereUniqueWithoutRaw_materialsInput[]
    updateMany?: productsUpdateManyWithWhereWithoutRaw_materialsInput | productsUpdateManyWithWhereWithoutRaw_materialsInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type distillationsCreateNestedOneWithoutBatchesInput = {
    create?: XOR<distillationsCreateWithoutBatchesInput, distillationsUncheckedCreateWithoutBatchesInput>
    connectOrCreate?: distillationsCreateOrConnectWithoutBatchesInput
    connect?: distillationsWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type distillationsUpdateOneWithoutBatchesNestedInput = {
    create?: XOR<distillationsCreateWithoutBatchesInput, distillationsUncheckedCreateWithoutBatchesInput>
    connectOrCreate?: distillationsCreateOrConnectWithoutBatchesInput
    upsert?: distillationsUpsertWithoutBatchesInput
    disconnect?: distillationsWhereInput | boolean
    delete?: distillationsWhereInput | boolean
    connect?: distillationsWhereUniqueInput
    update?: XOR<XOR<distillationsUpdateToOneWithWhereWithoutBatchesInput, distillationsUpdateWithoutBatchesInput>, distillationsUncheckedUpdateWithoutBatchesInput>
  }

  export type ordersCreateNestedOneWithoutDeliveriesInput = {
    create?: XOR<ordersCreateWithoutDeliveriesInput, ordersUncheckedCreateWithoutDeliveriesInput>
    connectOrCreate?: ordersCreateOrConnectWithoutDeliveriesInput
    connect?: ordersWhereUniqueInput
  }

  export type transactionsCreateNestedManyWithoutDeliveriesInput = {
    create?: XOR<transactionsCreateWithoutDeliveriesInput, transactionsUncheckedCreateWithoutDeliveriesInput> | transactionsCreateWithoutDeliveriesInput[] | transactionsUncheckedCreateWithoutDeliveriesInput[]
    connectOrCreate?: transactionsCreateOrConnectWithoutDeliveriesInput | transactionsCreateOrConnectWithoutDeliveriesInput[]
    createMany?: transactionsCreateManyDeliveriesInputEnvelope
    connect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
  }

  export type transactionsUncheckedCreateNestedManyWithoutDeliveriesInput = {
    create?: XOR<transactionsCreateWithoutDeliveriesInput, transactionsUncheckedCreateWithoutDeliveriesInput> | transactionsCreateWithoutDeliveriesInput[] | transactionsUncheckedCreateWithoutDeliveriesInput[]
    connectOrCreate?: transactionsCreateOrConnectWithoutDeliveriesInput | transactionsCreateOrConnectWithoutDeliveriesInput[]
    createMany?: transactionsCreateManyDeliveriesInputEnvelope
    connect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ordersUpdateOneWithoutDeliveriesNestedInput = {
    create?: XOR<ordersCreateWithoutDeliveriesInput, ordersUncheckedCreateWithoutDeliveriesInput>
    connectOrCreate?: ordersCreateOrConnectWithoutDeliveriesInput
    upsert?: ordersUpsertWithoutDeliveriesInput
    disconnect?: ordersWhereInput | boolean
    delete?: ordersWhereInput | boolean
    connect?: ordersWhereUniqueInput
    update?: XOR<XOR<ordersUpdateToOneWithWhereWithoutDeliveriesInput, ordersUpdateWithoutDeliveriesInput>, ordersUncheckedUpdateWithoutDeliveriesInput>
  }

  export type transactionsUpdateManyWithoutDeliveriesNestedInput = {
    create?: XOR<transactionsCreateWithoutDeliveriesInput, transactionsUncheckedCreateWithoutDeliveriesInput> | transactionsCreateWithoutDeliveriesInput[] | transactionsUncheckedCreateWithoutDeliveriesInput[]
    connectOrCreate?: transactionsCreateOrConnectWithoutDeliveriesInput | transactionsCreateOrConnectWithoutDeliveriesInput[]
    upsert?: transactionsUpsertWithWhereUniqueWithoutDeliveriesInput | transactionsUpsertWithWhereUniqueWithoutDeliveriesInput[]
    createMany?: transactionsCreateManyDeliveriesInputEnvelope
    set?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    disconnect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    delete?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    connect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    update?: transactionsUpdateWithWhereUniqueWithoutDeliveriesInput | transactionsUpdateWithWhereUniqueWithoutDeliveriesInput[]
    updateMany?: transactionsUpdateManyWithWhereWithoutDeliveriesInput | transactionsUpdateManyWithWhereWithoutDeliveriesInput[]
    deleteMany?: transactionsScalarWhereInput | transactionsScalarWhereInput[]
  }

  export type transactionsUncheckedUpdateManyWithoutDeliveriesNestedInput = {
    create?: XOR<transactionsCreateWithoutDeliveriesInput, transactionsUncheckedCreateWithoutDeliveriesInput> | transactionsCreateWithoutDeliveriesInput[] | transactionsUncheckedCreateWithoutDeliveriesInput[]
    connectOrCreate?: transactionsCreateOrConnectWithoutDeliveriesInput | transactionsCreateOrConnectWithoutDeliveriesInput[]
    upsert?: transactionsUpsertWithWhereUniqueWithoutDeliveriesInput | transactionsUpsertWithWhereUniqueWithoutDeliveriesInput[]
    createMany?: transactionsCreateManyDeliveriesInputEnvelope
    set?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    disconnect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    delete?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    connect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    update?: transactionsUpdateWithWhereUniqueWithoutDeliveriesInput | transactionsUpdateWithWhereUniqueWithoutDeliveriesInput[]
    updateMany?: transactionsUpdateManyWithWhereWithoutDeliveriesInput | transactionsUpdateManyWithWhereWithoutDeliveriesInput[]
    deleteMany?: transactionsScalarWhereInput | transactionsScalarWhereInput[]
  }

  export type batchesCreateNestedManyWithoutDistillationsInput = {
    create?: XOR<batchesCreateWithoutDistillationsInput, batchesUncheckedCreateWithoutDistillationsInput> | batchesCreateWithoutDistillationsInput[] | batchesUncheckedCreateWithoutDistillationsInput[]
    connectOrCreate?: batchesCreateOrConnectWithoutDistillationsInput | batchesCreateOrConnectWithoutDistillationsInput[]
    createMany?: batchesCreateManyDistillationsInputEnvelope
    connect?: batchesWhereUniqueInput | batchesWhereUniqueInput[]
  }

  export type drum_distillationsCreateNestedManyWithoutDistillationsInput = {
    create?: XOR<drum_distillationsCreateWithoutDistillationsInput, drum_distillationsUncheckedCreateWithoutDistillationsInput> | drum_distillationsCreateWithoutDistillationsInput[] | drum_distillationsUncheckedCreateWithoutDistillationsInput[]
    connectOrCreate?: drum_distillationsCreateOrConnectWithoutDistillationsInput | drum_distillationsCreateOrConnectWithoutDistillationsInput[]
    createMany?: drum_distillationsCreateManyDistillationsInputEnvelope
    connect?: drum_distillationsWhereUniqueInput | drum_distillationsWhereUniqueInput[]
  }

  export type repro_additionsCreateNestedManyWithoutDistillationsInput = {
    create?: XOR<repro_additionsCreateWithoutDistillationsInput, repro_additionsUncheckedCreateWithoutDistillationsInput> | repro_additionsCreateWithoutDistillationsInput[] | repro_additionsUncheckedCreateWithoutDistillationsInput[]
    connectOrCreate?: repro_additionsCreateOrConnectWithoutDistillationsInput | repro_additionsCreateOrConnectWithoutDistillationsInput[]
    createMany?: repro_additionsCreateManyDistillationsInputEnvelope
    connect?: repro_additionsWhereUniqueInput | repro_additionsWhereUniqueInput[]
  }

  export type batchesUncheckedCreateNestedManyWithoutDistillationsInput = {
    create?: XOR<batchesCreateWithoutDistillationsInput, batchesUncheckedCreateWithoutDistillationsInput> | batchesCreateWithoutDistillationsInput[] | batchesUncheckedCreateWithoutDistillationsInput[]
    connectOrCreate?: batchesCreateOrConnectWithoutDistillationsInput | batchesCreateOrConnectWithoutDistillationsInput[]
    createMany?: batchesCreateManyDistillationsInputEnvelope
    connect?: batchesWhereUniqueInput | batchesWhereUniqueInput[]
  }

  export type drum_distillationsUncheckedCreateNestedManyWithoutDistillationsInput = {
    create?: XOR<drum_distillationsCreateWithoutDistillationsInput, drum_distillationsUncheckedCreateWithoutDistillationsInput> | drum_distillationsCreateWithoutDistillationsInput[] | drum_distillationsUncheckedCreateWithoutDistillationsInput[]
    connectOrCreate?: drum_distillationsCreateOrConnectWithoutDistillationsInput | drum_distillationsCreateOrConnectWithoutDistillationsInput[]
    createMany?: drum_distillationsCreateManyDistillationsInputEnvelope
    connect?: drum_distillationsWhereUniqueInput | drum_distillationsWhereUniqueInput[]
  }

  export type repro_additionsUncheckedCreateNestedManyWithoutDistillationsInput = {
    create?: XOR<repro_additionsCreateWithoutDistillationsInput, repro_additionsUncheckedCreateWithoutDistillationsInput> | repro_additionsCreateWithoutDistillationsInput[] | repro_additionsUncheckedCreateWithoutDistillationsInput[]
    connectOrCreate?: repro_additionsCreateOrConnectWithoutDistillationsInput | repro_additionsCreateOrConnectWithoutDistillationsInput[]
    createMany?: repro_additionsCreateManyDistillationsInputEnvelope
    connect?: repro_additionsWhereUniqueInput | repro_additionsWhereUniqueInput[]
  }

  export type batchesUpdateManyWithoutDistillationsNestedInput = {
    create?: XOR<batchesCreateWithoutDistillationsInput, batchesUncheckedCreateWithoutDistillationsInput> | batchesCreateWithoutDistillationsInput[] | batchesUncheckedCreateWithoutDistillationsInput[]
    connectOrCreate?: batchesCreateOrConnectWithoutDistillationsInput | batchesCreateOrConnectWithoutDistillationsInput[]
    upsert?: batchesUpsertWithWhereUniqueWithoutDistillationsInput | batchesUpsertWithWhereUniqueWithoutDistillationsInput[]
    createMany?: batchesCreateManyDistillationsInputEnvelope
    set?: batchesWhereUniqueInput | batchesWhereUniqueInput[]
    disconnect?: batchesWhereUniqueInput | batchesWhereUniqueInput[]
    delete?: batchesWhereUniqueInput | batchesWhereUniqueInput[]
    connect?: batchesWhereUniqueInput | batchesWhereUniqueInput[]
    update?: batchesUpdateWithWhereUniqueWithoutDistillationsInput | batchesUpdateWithWhereUniqueWithoutDistillationsInput[]
    updateMany?: batchesUpdateManyWithWhereWithoutDistillationsInput | batchesUpdateManyWithWhereWithoutDistillationsInput[]
    deleteMany?: batchesScalarWhereInput | batchesScalarWhereInput[]
  }

  export type drum_distillationsUpdateManyWithoutDistillationsNestedInput = {
    create?: XOR<drum_distillationsCreateWithoutDistillationsInput, drum_distillationsUncheckedCreateWithoutDistillationsInput> | drum_distillationsCreateWithoutDistillationsInput[] | drum_distillationsUncheckedCreateWithoutDistillationsInput[]
    connectOrCreate?: drum_distillationsCreateOrConnectWithoutDistillationsInput | drum_distillationsCreateOrConnectWithoutDistillationsInput[]
    upsert?: drum_distillationsUpsertWithWhereUniqueWithoutDistillationsInput | drum_distillationsUpsertWithWhereUniqueWithoutDistillationsInput[]
    createMany?: drum_distillationsCreateManyDistillationsInputEnvelope
    set?: drum_distillationsWhereUniqueInput | drum_distillationsWhereUniqueInput[]
    disconnect?: drum_distillationsWhereUniqueInput | drum_distillationsWhereUniqueInput[]
    delete?: drum_distillationsWhereUniqueInput | drum_distillationsWhereUniqueInput[]
    connect?: drum_distillationsWhereUniqueInput | drum_distillationsWhereUniqueInput[]
    update?: drum_distillationsUpdateWithWhereUniqueWithoutDistillationsInput | drum_distillationsUpdateWithWhereUniqueWithoutDistillationsInput[]
    updateMany?: drum_distillationsUpdateManyWithWhereWithoutDistillationsInput | drum_distillationsUpdateManyWithWhereWithoutDistillationsInput[]
    deleteMany?: drum_distillationsScalarWhereInput | drum_distillationsScalarWhereInput[]
  }

  export type repro_additionsUpdateManyWithoutDistillationsNestedInput = {
    create?: XOR<repro_additionsCreateWithoutDistillationsInput, repro_additionsUncheckedCreateWithoutDistillationsInput> | repro_additionsCreateWithoutDistillationsInput[] | repro_additionsUncheckedCreateWithoutDistillationsInput[]
    connectOrCreate?: repro_additionsCreateOrConnectWithoutDistillationsInput | repro_additionsCreateOrConnectWithoutDistillationsInput[]
    upsert?: repro_additionsUpsertWithWhereUniqueWithoutDistillationsInput | repro_additionsUpsertWithWhereUniqueWithoutDistillationsInput[]
    createMany?: repro_additionsCreateManyDistillationsInputEnvelope
    set?: repro_additionsWhereUniqueInput | repro_additionsWhereUniqueInput[]
    disconnect?: repro_additionsWhereUniqueInput | repro_additionsWhereUniqueInput[]
    delete?: repro_additionsWhereUniqueInput | repro_additionsWhereUniqueInput[]
    connect?: repro_additionsWhereUniqueInput | repro_additionsWhereUniqueInput[]
    update?: repro_additionsUpdateWithWhereUniqueWithoutDistillationsInput | repro_additionsUpdateWithWhereUniqueWithoutDistillationsInput[]
    updateMany?: repro_additionsUpdateManyWithWhereWithoutDistillationsInput | repro_additionsUpdateManyWithWhereWithoutDistillationsInput[]
    deleteMany?: repro_additionsScalarWhereInput | repro_additionsScalarWhereInput[]
  }

  export type batchesUncheckedUpdateManyWithoutDistillationsNestedInput = {
    create?: XOR<batchesCreateWithoutDistillationsInput, batchesUncheckedCreateWithoutDistillationsInput> | batchesCreateWithoutDistillationsInput[] | batchesUncheckedCreateWithoutDistillationsInput[]
    connectOrCreate?: batchesCreateOrConnectWithoutDistillationsInput | batchesCreateOrConnectWithoutDistillationsInput[]
    upsert?: batchesUpsertWithWhereUniqueWithoutDistillationsInput | batchesUpsertWithWhereUniqueWithoutDistillationsInput[]
    createMany?: batchesCreateManyDistillationsInputEnvelope
    set?: batchesWhereUniqueInput | batchesWhereUniqueInput[]
    disconnect?: batchesWhereUniqueInput | batchesWhereUniqueInput[]
    delete?: batchesWhereUniqueInput | batchesWhereUniqueInput[]
    connect?: batchesWhereUniqueInput | batchesWhereUniqueInput[]
    update?: batchesUpdateWithWhereUniqueWithoutDistillationsInput | batchesUpdateWithWhereUniqueWithoutDistillationsInput[]
    updateMany?: batchesUpdateManyWithWhereWithoutDistillationsInput | batchesUpdateManyWithWhereWithoutDistillationsInput[]
    deleteMany?: batchesScalarWhereInput | batchesScalarWhereInput[]
  }

  export type drum_distillationsUncheckedUpdateManyWithoutDistillationsNestedInput = {
    create?: XOR<drum_distillationsCreateWithoutDistillationsInput, drum_distillationsUncheckedCreateWithoutDistillationsInput> | drum_distillationsCreateWithoutDistillationsInput[] | drum_distillationsUncheckedCreateWithoutDistillationsInput[]
    connectOrCreate?: drum_distillationsCreateOrConnectWithoutDistillationsInput | drum_distillationsCreateOrConnectWithoutDistillationsInput[]
    upsert?: drum_distillationsUpsertWithWhereUniqueWithoutDistillationsInput | drum_distillationsUpsertWithWhereUniqueWithoutDistillationsInput[]
    createMany?: drum_distillationsCreateManyDistillationsInputEnvelope
    set?: drum_distillationsWhereUniqueInput | drum_distillationsWhereUniqueInput[]
    disconnect?: drum_distillationsWhereUniqueInput | drum_distillationsWhereUniqueInput[]
    delete?: drum_distillationsWhereUniqueInput | drum_distillationsWhereUniqueInput[]
    connect?: drum_distillationsWhereUniqueInput | drum_distillationsWhereUniqueInput[]
    update?: drum_distillationsUpdateWithWhereUniqueWithoutDistillationsInput | drum_distillationsUpdateWithWhereUniqueWithoutDistillationsInput[]
    updateMany?: drum_distillationsUpdateManyWithWhereWithoutDistillationsInput | drum_distillationsUpdateManyWithWhereWithoutDistillationsInput[]
    deleteMany?: drum_distillationsScalarWhereInput | drum_distillationsScalarWhereInput[]
  }

  export type repro_additionsUncheckedUpdateManyWithoutDistillationsNestedInput = {
    create?: XOR<repro_additionsCreateWithoutDistillationsInput, repro_additionsUncheckedCreateWithoutDistillationsInput> | repro_additionsCreateWithoutDistillationsInput[] | repro_additionsUncheckedCreateWithoutDistillationsInput[]
    connectOrCreate?: repro_additionsCreateOrConnectWithoutDistillationsInput | repro_additionsCreateOrConnectWithoutDistillationsInput[]
    upsert?: repro_additionsUpsertWithWhereUniqueWithoutDistillationsInput | repro_additionsUpsertWithWhereUniqueWithoutDistillationsInput[]
    createMany?: repro_additionsCreateManyDistillationsInputEnvelope
    set?: repro_additionsWhereUniqueInput | repro_additionsWhereUniqueInput[]
    disconnect?: repro_additionsWhereUniqueInput | repro_additionsWhereUniqueInput[]
    delete?: repro_additionsWhereUniqueInput | repro_additionsWhereUniqueInput[]
    connect?: repro_additionsWhereUniqueInput | repro_additionsWhereUniqueInput[]
    update?: repro_additionsUpdateWithWhereUniqueWithoutDistillationsInput | repro_additionsUpdateWithWhereUniqueWithoutDistillationsInput[]
    updateMany?: repro_additionsUpdateManyWithWhereWithoutDistillationsInput | repro_additionsUpdateManyWithWhereWithoutDistillationsInput[]
    deleteMany?: repro_additionsScalarWhereInput | repro_additionsScalarWhereInput[]
  }

  export type distillationsCreateNestedOneWithoutDrum_distillationsInput = {
    create?: XOR<distillationsCreateWithoutDrum_distillationsInput, distillationsUncheckedCreateWithoutDrum_distillationsInput>
    connectOrCreate?: distillationsCreateOrConnectWithoutDrum_distillationsInput
    connect?: distillationsWhereUniqueInput
  }

  export type new_drumsCreateNestedOneWithoutDrum_distillationsInput = {
    create?: XOR<new_drumsCreateWithoutDrum_distillationsInput, new_drumsUncheckedCreateWithoutDrum_distillationsInput>
    connectOrCreate?: new_drumsCreateOrConnectWithoutDrum_distillationsInput
    connect?: new_drumsWhereUniqueInput
  }

  export type distillationsUpdateOneRequiredWithoutDrum_distillationsNestedInput = {
    create?: XOR<distillationsCreateWithoutDrum_distillationsInput, distillationsUncheckedCreateWithoutDrum_distillationsInput>
    connectOrCreate?: distillationsCreateOrConnectWithoutDrum_distillationsInput
    upsert?: distillationsUpsertWithoutDrum_distillationsInput
    connect?: distillationsWhereUniqueInput
    update?: XOR<XOR<distillationsUpdateToOneWithWhereWithoutDrum_distillationsInput, distillationsUpdateWithoutDrum_distillationsInput>, distillationsUncheckedUpdateWithoutDrum_distillationsInput>
  }

  export type new_drumsUpdateOneRequiredWithoutDrum_distillationsNestedInput = {
    create?: XOR<new_drumsCreateWithoutDrum_distillationsInput, new_drumsUncheckedCreateWithoutDrum_distillationsInput>
    connectOrCreate?: new_drumsCreateOrConnectWithoutDrum_distillationsInput
    upsert?: new_drumsUpsertWithoutDrum_distillationsInput
    connect?: new_drumsWhereUniqueInput
    update?: XOR<XOR<new_drumsUpdateToOneWithWhereWithoutDrum_distillationsInput, new_drumsUpdateWithoutDrum_distillationsInput>, new_drumsUncheckedUpdateWithoutDrum_distillationsInput>
  }

  export type drum_distillationsCreateNestedManyWithoutNew_drumsInput = {
    create?: XOR<drum_distillationsCreateWithoutNew_drumsInput, drum_distillationsUncheckedCreateWithoutNew_drumsInput> | drum_distillationsCreateWithoutNew_drumsInput[] | drum_distillationsUncheckedCreateWithoutNew_drumsInput[]
    connectOrCreate?: drum_distillationsCreateOrConnectWithoutNew_drumsInput | drum_distillationsCreateOrConnectWithoutNew_drumsInput[]
    createMany?: drum_distillationsCreateManyNew_drumsInputEnvelope
    connect?: drum_distillationsWhereUniqueInput | drum_distillationsWhereUniqueInput[]
  }

  export type ordersCreateNestedOneWithoutNew_drumsInput = {
    create?: XOR<ordersCreateWithoutNew_drumsInput, ordersUncheckedCreateWithoutNew_drumsInput>
    connectOrCreate?: ordersCreateOrConnectWithoutNew_drumsInput
    connect?: ordersWhereUniqueInput
  }

  export type processesCreateNestedManyWithoutNew_drumsInput = {
    create?: XOR<processesCreateWithoutNew_drumsInput, processesUncheckedCreateWithoutNew_drumsInput> | processesCreateWithoutNew_drumsInput[] | processesUncheckedCreateWithoutNew_drumsInput[]
    connectOrCreate?: processesCreateOrConnectWithoutNew_drumsInput | processesCreateOrConnectWithoutNew_drumsInput[]
    createMany?: processesCreateManyNew_drumsInputEnvelope
    connect?: processesWhereUniqueInput | processesWhereUniqueInput[]
  }

  export type transactionsCreateNestedManyWithoutNew_drumsInput = {
    create?: XOR<transactionsCreateWithoutNew_drumsInput, transactionsUncheckedCreateWithoutNew_drumsInput> | transactionsCreateWithoutNew_drumsInput[] | transactionsUncheckedCreateWithoutNew_drumsInput[]
    connectOrCreate?: transactionsCreateOrConnectWithoutNew_drumsInput | transactionsCreateOrConnectWithoutNew_drumsInput[]
    createMany?: transactionsCreateManyNew_drumsInputEnvelope
    connect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
  }

  export type drum_distillationsUncheckedCreateNestedManyWithoutNew_drumsInput = {
    create?: XOR<drum_distillationsCreateWithoutNew_drumsInput, drum_distillationsUncheckedCreateWithoutNew_drumsInput> | drum_distillationsCreateWithoutNew_drumsInput[] | drum_distillationsUncheckedCreateWithoutNew_drumsInput[]
    connectOrCreate?: drum_distillationsCreateOrConnectWithoutNew_drumsInput | drum_distillationsCreateOrConnectWithoutNew_drumsInput[]
    createMany?: drum_distillationsCreateManyNew_drumsInputEnvelope
    connect?: drum_distillationsWhereUniqueInput | drum_distillationsWhereUniqueInput[]
  }

  export type processesUncheckedCreateNestedManyWithoutNew_drumsInput = {
    create?: XOR<processesCreateWithoutNew_drumsInput, processesUncheckedCreateWithoutNew_drumsInput> | processesCreateWithoutNew_drumsInput[] | processesUncheckedCreateWithoutNew_drumsInput[]
    connectOrCreate?: processesCreateOrConnectWithoutNew_drumsInput | processesCreateOrConnectWithoutNew_drumsInput[]
    createMany?: processesCreateManyNew_drumsInputEnvelope
    connect?: processesWhereUniqueInput | processesWhereUniqueInput[]
  }

  export type transactionsUncheckedCreateNestedManyWithoutNew_drumsInput = {
    create?: XOR<transactionsCreateWithoutNew_drumsInput, transactionsUncheckedCreateWithoutNew_drumsInput> | transactionsCreateWithoutNew_drumsInput[] | transactionsUncheckedCreateWithoutNew_drumsInput[]
    connectOrCreate?: transactionsCreateOrConnectWithoutNew_drumsInput | transactionsCreateOrConnectWithoutNew_drumsInput[]
    createMany?: transactionsCreateManyNew_drumsInputEnvelope
    connect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
  }

  export type drum_distillationsUpdateManyWithoutNew_drumsNestedInput = {
    create?: XOR<drum_distillationsCreateWithoutNew_drumsInput, drum_distillationsUncheckedCreateWithoutNew_drumsInput> | drum_distillationsCreateWithoutNew_drumsInput[] | drum_distillationsUncheckedCreateWithoutNew_drumsInput[]
    connectOrCreate?: drum_distillationsCreateOrConnectWithoutNew_drumsInput | drum_distillationsCreateOrConnectWithoutNew_drumsInput[]
    upsert?: drum_distillationsUpsertWithWhereUniqueWithoutNew_drumsInput | drum_distillationsUpsertWithWhereUniqueWithoutNew_drumsInput[]
    createMany?: drum_distillationsCreateManyNew_drumsInputEnvelope
    set?: drum_distillationsWhereUniqueInput | drum_distillationsWhereUniqueInput[]
    disconnect?: drum_distillationsWhereUniqueInput | drum_distillationsWhereUniqueInput[]
    delete?: drum_distillationsWhereUniqueInput | drum_distillationsWhereUniqueInput[]
    connect?: drum_distillationsWhereUniqueInput | drum_distillationsWhereUniqueInput[]
    update?: drum_distillationsUpdateWithWhereUniqueWithoutNew_drumsInput | drum_distillationsUpdateWithWhereUniqueWithoutNew_drumsInput[]
    updateMany?: drum_distillationsUpdateManyWithWhereWithoutNew_drumsInput | drum_distillationsUpdateManyWithWhereWithoutNew_drumsInput[]
    deleteMany?: drum_distillationsScalarWhereInput | drum_distillationsScalarWhereInput[]
  }

  export type ordersUpdateOneWithoutNew_drumsNestedInput = {
    create?: XOR<ordersCreateWithoutNew_drumsInput, ordersUncheckedCreateWithoutNew_drumsInput>
    connectOrCreate?: ordersCreateOrConnectWithoutNew_drumsInput
    upsert?: ordersUpsertWithoutNew_drumsInput
    disconnect?: ordersWhereInput | boolean
    delete?: ordersWhereInput | boolean
    connect?: ordersWhereUniqueInput
    update?: XOR<XOR<ordersUpdateToOneWithWhereWithoutNew_drumsInput, ordersUpdateWithoutNew_drumsInput>, ordersUncheckedUpdateWithoutNew_drumsInput>
  }

  export type processesUpdateManyWithoutNew_drumsNestedInput = {
    create?: XOR<processesCreateWithoutNew_drumsInput, processesUncheckedCreateWithoutNew_drumsInput> | processesCreateWithoutNew_drumsInput[] | processesUncheckedCreateWithoutNew_drumsInput[]
    connectOrCreate?: processesCreateOrConnectWithoutNew_drumsInput | processesCreateOrConnectWithoutNew_drumsInput[]
    upsert?: processesUpsertWithWhereUniqueWithoutNew_drumsInput | processesUpsertWithWhereUniqueWithoutNew_drumsInput[]
    createMany?: processesCreateManyNew_drumsInputEnvelope
    set?: processesWhereUniqueInput | processesWhereUniqueInput[]
    disconnect?: processesWhereUniqueInput | processesWhereUniqueInput[]
    delete?: processesWhereUniqueInput | processesWhereUniqueInput[]
    connect?: processesWhereUniqueInput | processesWhereUniqueInput[]
    update?: processesUpdateWithWhereUniqueWithoutNew_drumsInput | processesUpdateWithWhereUniqueWithoutNew_drumsInput[]
    updateMany?: processesUpdateManyWithWhereWithoutNew_drumsInput | processesUpdateManyWithWhereWithoutNew_drumsInput[]
    deleteMany?: processesScalarWhereInput | processesScalarWhereInput[]
  }

  export type transactionsUpdateManyWithoutNew_drumsNestedInput = {
    create?: XOR<transactionsCreateWithoutNew_drumsInput, transactionsUncheckedCreateWithoutNew_drumsInput> | transactionsCreateWithoutNew_drumsInput[] | transactionsUncheckedCreateWithoutNew_drumsInput[]
    connectOrCreate?: transactionsCreateOrConnectWithoutNew_drumsInput | transactionsCreateOrConnectWithoutNew_drumsInput[]
    upsert?: transactionsUpsertWithWhereUniqueWithoutNew_drumsInput | transactionsUpsertWithWhereUniqueWithoutNew_drumsInput[]
    createMany?: transactionsCreateManyNew_drumsInputEnvelope
    set?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    disconnect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    delete?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    connect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    update?: transactionsUpdateWithWhereUniqueWithoutNew_drumsInput | transactionsUpdateWithWhereUniqueWithoutNew_drumsInput[]
    updateMany?: transactionsUpdateManyWithWhereWithoutNew_drumsInput | transactionsUpdateManyWithWhereWithoutNew_drumsInput[]
    deleteMany?: transactionsScalarWhereInput | transactionsScalarWhereInput[]
  }

  export type drum_distillationsUncheckedUpdateManyWithoutNew_drumsNestedInput = {
    create?: XOR<drum_distillationsCreateWithoutNew_drumsInput, drum_distillationsUncheckedCreateWithoutNew_drumsInput> | drum_distillationsCreateWithoutNew_drumsInput[] | drum_distillationsUncheckedCreateWithoutNew_drumsInput[]
    connectOrCreate?: drum_distillationsCreateOrConnectWithoutNew_drumsInput | drum_distillationsCreateOrConnectWithoutNew_drumsInput[]
    upsert?: drum_distillationsUpsertWithWhereUniqueWithoutNew_drumsInput | drum_distillationsUpsertWithWhereUniqueWithoutNew_drumsInput[]
    createMany?: drum_distillationsCreateManyNew_drumsInputEnvelope
    set?: drum_distillationsWhereUniqueInput | drum_distillationsWhereUniqueInput[]
    disconnect?: drum_distillationsWhereUniqueInput | drum_distillationsWhereUniqueInput[]
    delete?: drum_distillationsWhereUniqueInput | drum_distillationsWhereUniqueInput[]
    connect?: drum_distillationsWhereUniqueInput | drum_distillationsWhereUniqueInput[]
    update?: drum_distillationsUpdateWithWhereUniqueWithoutNew_drumsInput | drum_distillationsUpdateWithWhereUniqueWithoutNew_drumsInput[]
    updateMany?: drum_distillationsUpdateManyWithWhereWithoutNew_drumsInput | drum_distillationsUpdateManyWithWhereWithoutNew_drumsInput[]
    deleteMany?: drum_distillationsScalarWhereInput | drum_distillationsScalarWhereInput[]
  }

  export type processesUncheckedUpdateManyWithoutNew_drumsNestedInput = {
    create?: XOR<processesCreateWithoutNew_drumsInput, processesUncheckedCreateWithoutNew_drumsInput> | processesCreateWithoutNew_drumsInput[] | processesUncheckedCreateWithoutNew_drumsInput[]
    connectOrCreate?: processesCreateOrConnectWithoutNew_drumsInput | processesCreateOrConnectWithoutNew_drumsInput[]
    upsert?: processesUpsertWithWhereUniqueWithoutNew_drumsInput | processesUpsertWithWhereUniqueWithoutNew_drumsInput[]
    createMany?: processesCreateManyNew_drumsInputEnvelope
    set?: processesWhereUniqueInput | processesWhereUniqueInput[]
    disconnect?: processesWhereUniqueInput | processesWhereUniqueInput[]
    delete?: processesWhereUniqueInput | processesWhereUniqueInput[]
    connect?: processesWhereUniqueInput | processesWhereUniqueInput[]
    update?: processesUpdateWithWhereUniqueWithoutNew_drumsInput | processesUpdateWithWhereUniqueWithoutNew_drumsInput[]
    updateMany?: processesUpdateManyWithWhereWithoutNew_drumsInput | processesUpdateManyWithWhereWithoutNew_drumsInput[]
    deleteMany?: processesScalarWhereInput | processesScalarWhereInput[]
  }

  export type transactionsUncheckedUpdateManyWithoutNew_drumsNestedInput = {
    create?: XOR<transactionsCreateWithoutNew_drumsInput, transactionsUncheckedCreateWithoutNew_drumsInput> | transactionsCreateWithoutNew_drumsInput[] | transactionsUncheckedCreateWithoutNew_drumsInput[]
    connectOrCreate?: transactionsCreateOrConnectWithoutNew_drumsInput | transactionsCreateOrConnectWithoutNew_drumsInput[]
    upsert?: transactionsUpsertWithWhereUniqueWithoutNew_drumsInput | transactionsUpsertWithWhereUniqueWithoutNew_drumsInput[]
    createMany?: transactionsCreateManyNew_drumsInputEnvelope
    set?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    disconnect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    delete?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    connect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    update?: transactionsUpdateWithWhereUniqueWithoutNew_drumsInput | transactionsUpdateWithWhereUniqueWithoutNew_drumsInput[]
    updateMany?: transactionsUpdateManyWithWhereWithoutNew_drumsInput | transactionsUpdateManyWithWhereWithoutNew_drumsInput[]
    deleteMany?: transactionsScalarWhereInput | transactionsScalarWhereInput[]
  }

  export type deliveriesCreateNestedManyWithoutOrdersInput = {
    create?: XOR<deliveriesCreateWithoutOrdersInput, deliveriesUncheckedCreateWithoutOrdersInput> | deliveriesCreateWithoutOrdersInput[] | deliveriesUncheckedCreateWithoutOrdersInput[]
    connectOrCreate?: deliveriesCreateOrConnectWithoutOrdersInput | deliveriesCreateOrConnectWithoutOrdersInput[]
    createMany?: deliveriesCreateManyOrdersInputEnvelope
    connect?: deliveriesWhereUniqueInput | deliveriesWhereUniqueInput[]
  }

  export type new_drumsCreateNestedManyWithoutOrdersInput = {
    create?: XOR<new_drumsCreateWithoutOrdersInput, new_drumsUncheckedCreateWithoutOrdersInput> | new_drumsCreateWithoutOrdersInput[] | new_drumsUncheckedCreateWithoutOrdersInput[]
    connectOrCreate?: new_drumsCreateOrConnectWithoutOrdersInput | new_drumsCreateOrConnectWithoutOrdersInput[]
    createMany?: new_drumsCreateManyOrdersInputEnvelope
    connect?: new_drumsWhereUniqueInput | new_drumsWhereUniqueInput[]
  }

  export type deliveriesUncheckedCreateNestedManyWithoutOrdersInput = {
    create?: XOR<deliveriesCreateWithoutOrdersInput, deliveriesUncheckedCreateWithoutOrdersInput> | deliveriesCreateWithoutOrdersInput[] | deliveriesUncheckedCreateWithoutOrdersInput[]
    connectOrCreate?: deliveriesCreateOrConnectWithoutOrdersInput | deliveriesCreateOrConnectWithoutOrdersInput[]
    createMany?: deliveriesCreateManyOrdersInputEnvelope
    connect?: deliveriesWhereUniqueInput | deliveriesWhereUniqueInput[]
  }

  export type new_drumsUncheckedCreateNestedManyWithoutOrdersInput = {
    create?: XOR<new_drumsCreateWithoutOrdersInput, new_drumsUncheckedCreateWithoutOrdersInput> | new_drumsCreateWithoutOrdersInput[] | new_drumsUncheckedCreateWithoutOrdersInput[]
    connectOrCreate?: new_drumsCreateOrConnectWithoutOrdersInput | new_drumsCreateOrConnectWithoutOrdersInput[]
    createMany?: new_drumsCreateManyOrdersInputEnvelope
    connect?: new_drumsWhereUniqueInput | new_drumsWhereUniqueInput[]
  }

  export type deliveriesUpdateManyWithoutOrdersNestedInput = {
    create?: XOR<deliveriesCreateWithoutOrdersInput, deliveriesUncheckedCreateWithoutOrdersInput> | deliveriesCreateWithoutOrdersInput[] | deliveriesUncheckedCreateWithoutOrdersInput[]
    connectOrCreate?: deliveriesCreateOrConnectWithoutOrdersInput | deliveriesCreateOrConnectWithoutOrdersInput[]
    upsert?: deliveriesUpsertWithWhereUniqueWithoutOrdersInput | deliveriesUpsertWithWhereUniqueWithoutOrdersInput[]
    createMany?: deliveriesCreateManyOrdersInputEnvelope
    set?: deliveriesWhereUniqueInput | deliveriesWhereUniqueInput[]
    disconnect?: deliveriesWhereUniqueInput | deliveriesWhereUniqueInput[]
    delete?: deliveriesWhereUniqueInput | deliveriesWhereUniqueInput[]
    connect?: deliveriesWhereUniqueInput | deliveriesWhereUniqueInput[]
    update?: deliveriesUpdateWithWhereUniqueWithoutOrdersInput | deliveriesUpdateWithWhereUniqueWithoutOrdersInput[]
    updateMany?: deliveriesUpdateManyWithWhereWithoutOrdersInput | deliveriesUpdateManyWithWhereWithoutOrdersInput[]
    deleteMany?: deliveriesScalarWhereInput | deliveriesScalarWhereInput[]
  }

  export type new_drumsUpdateManyWithoutOrdersNestedInput = {
    create?: XOR<new_drumsCreateWithoutOrdersInput, new_drumsUncheckedCreateWithoutOrdersInput> | new_drumsCreateWithoutOrdersInput[] | new_drumsUncheckedCreateWithoutOrdersInput[]
    connectOrCreate?: new_drumsCreateOrConnectWithoutOrdersInput | new_drumsCreateOrConnectWithoutOrdersInput[]
    upsert?: new_drumsUpsertWithWhereUniqueWithoutOrdersInput | new_drumsUpsertWithWhereUniqueWithoutOrdersInput[]
    createMany?: new_drumsCreateManyOrdersInputEnvelope
    set?: new_drumsWhereUniqueInput | new_drumsWhereUniqueInput[]
    disconnect?: new_drumsWhereUniqueInput | new_drumsWhereUniqueInput[]
    delete?: new_drumsWhereUniqueInput | new_drumsWhereUniqueInput[]
    connect?: new_drumsWhereUniqueInput | new_drumsWhereUniqueInput[]
    update?: new_drumsUpdateWithWhereUniqueWithoutOrdersInput | new_drumsUpdateWithWhereUniqueWithoutOrdersInput[]
    updateMany?: new_drumsUpdateManyWithWhereWithoutOrdersInput | new_drumsUpdateManyWithWhereWithoutOrdersInput[]
    deleteMany?: new_drumsScalarWhereInput | new_drumsScalarWhereInput[]
  }

  export type deliveriesUncheckedUpdateManyWithoutOrdersNestedInput = {
    create?: XOR<deliveriesCreateWithoutOrdersInput, deliveriesUncheckedCreateWithoutOrdersInput> | deliveriesCreateWithoutOrdersInput[] | deliveriesUncheckedCreateWithoutOrdersInput[]
    connectOrCreate?: deliveriesCreateOrConnectWithoutOrdersInput | deliveriesCreateOrConnectWithoutOrdersInput[]
    upsert?: deliveriesUpsertWithWhereUniqueWithoutOrdersInput | deliveriesUpsertWithWhereUniqueWithoutOrdersInput[]
    createMany?: deliveriesCreateManyOrdersInputEnvelope
    set?: deliveriesWhereUniqueInput | deliveriesWhereUniqueInput[]
    disconnect?: deliveriesWhereUniqueInput | deliveriesWhereUniqueInput[]
    delete?: deliveriesWhereUniqueInput | deliveriesWhereUniqueInput[]
    connect?: deliveriesWhereUniqueInput | deliveriesWhereUniqueInput[]
    update?: deliveriesUpdateWithWhereUniqueWithoutOrdersInput | deliveriesUpdateWithWhereUniqueWithoutOrdersInput[]
    updateMany?: deliveriesUpdateManyWithWhereWithoutOrdersInput | deliveriesUpdateManyWithWhereWithoutOrdersInput[]
    deleteMany?: deliveriesScalarWhereInput | deliveriesScalarWhereInput[]
  }

  export type new_drumsUncheckedUpdateManyWithoutOrdersNestedInput = {
    create?: XOR<new_drumsCreateWithoutOrdersInput, new_drumsUncheckedCreateWithoutOrdersInput> | new_drumsCreateWithoutOrdersInput[] | new_drumsUncheckedCreateWithoutOrdersInput[]
    connectOrCreate?: new_drumsCreateOrConnectWithoutOrdersInput | new_drumsCreateOrConnectWithoutOrdersInput[]
    upsert?: new_drumsUpsertWithWhereUniqueWithoutOrdersInput | new_drumsUpsertWithWhereUniqueWithoutOrdersInput[]
    createMany?: new_drumsCreateManyOrdersInputEnvelope
    set?: new_drumsWhereUniqueInput | new_drumsWhereUniqueInput[]
    disconnect?: new_drumsWhereUniqueInput | new_drumsWhereUniqueInput[]
    delete?: new_drumsWhereUniqueInput | new_drumsWhereUniqueInput[]
    connect?: new_drumsWhereUniqueInput | new_drumsWhereUniqueInput[]
    update?: new_drumsUpdateWithWhereUniqueWithoutOrdersInput | new_drumsUpdateWithWhereUniqueWithoutOrdersInput[]
    updateMany?: new_drumsUpdateManyWithWhereWithoutOrdersInput | new_drumsUpdateManyWithWhereWithoutOrdersInput[]
    deleteMany?: new_drumsScalarWhereInput | new_drumsScalarWhereInput[]
  }

  export type new_drumsCreateNestedOneWithoutProcessesInput = {
    create?: XOR<new_drumsCreateWithoutProcessesInput, new_drumsUncheckedCreateWithoutProcessesInput>
    connectOrCreate?: new_drumsCreateOrConnectWithoutProcessesInput
    connect?: new_drumsWhereUniqueInput
  }

  export type stillsCreateNestedOneWithoutProcessesInput = {
    create?: XOR<stillsCreateWithoutProcessesInput, stillsUncheckedCreateWithoutProcessesInput>
    connectOrCreate?: stillsCreateOrConnectWithoutProcessesInput
    connect?: stillsWhereUniqueInput
  }

  export type transactionsCreateNestedManyWithoutProcessesInput = {
    create?: XOR<transactionsCreateWithoutProcessesInput, transactionsUncheckedCreateWithoutProcessesInput> | transactionsCreateWithoutProcessesInput[] | transactionsUncheckedCreateWithoutProcessesInput[]
    connectOrCreate?: transactionsCreateOrConnectWithoutProcessesInput | transactionsCreateOrConnectWithoutProcessesInput[]
    createMany?: transactionsCreateManyProcessesInputEnvelope
    connect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
  }

  export type transactionsUncheckedCreateNestedManyWithoutProcessesInput = {
    create?: XOR<transactionsCreateWithoutProcessesInput, transactionsUncheckedCreateWithoutProcessesInput> | transactionsCreateWithoutProcessesInput[] | transactionsUncheckedCreateWithoutProcessesInput[]
    connectOrCreate?: transactionsCreateOrConnectWithoutProcessesInput | transactionsCreateOrConnectWithoutProcessesInput[]
    createMany?: transactionsCreateManyProcessesInputEnvelope
    connect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
  }

  export type new_drumsUpdateOneWithoutProcessesNestedInput = {
    create?: XOR<new_drumsCreateWithoutProcessesInput, new_drumsUncheckedCreateWithoutProcessesInput>
    connectOrCreate?: new_drumsCreateOrConnectWithoutProcessesInput
    upsert?: new_drumsUpsertWithoutProcessesInput
    disconnect?: new_drumsWhereInput | boolean
    delete?: new_drumsWhereInput | boolean
    connect?: new_drumsWhereUniqueInput
    update?: XOR<XOR<new_drumsUpdateToOneWithWhereWithoutProcessesInput, new_drumsUpdateWithoutProcessesInput>, new_drumsUncheckedUpdateWithoutProcessesInput>
  }

  export type stillsUpdateOneRequiredWithoutProcessesNestedInput = {
    create?: XOR<stillsCreateWithoutProcessesInput, stillsUncheckedCreateWithoutProcessesInput>
    connectOrCreate?: stillsCreateOrConnectWithoutProcessesInput
    upsert?: stillsUpsertWithoutProcessesInput
    connect?: stillsWhereUniqueInput
    update?: XOR<XOR<stillsUpdateToOneWithWhereWithoutProcessesInput, stillsUpdateWithoutProcessesInput>, stillsUncheckedUpdateWithoutProcessesInput>
  }

  export type transactionsUpdateManyWithoutProcessesNestedInput = {
    create?: XOR<transactionsCreateWithoutProcessesInput, transactionsUncheckedCreateWithoutProcessesInput> | transactionsCreateWithoutProcessesInput[] | transactionsUncheckedCreateWithoutProcessesInput[]
    connectOrCreate?: transactionsCreateOrConnectWithoutProcessesInput | transactionsCreateOrConnectWithoutProcessesInput[]
    upsert?: transactionsUpsertWithWhereUniqueWithoutProcessesInput | transactionsUpsertWithWhereUniqueWithoutProcessesInput[]
    createMany?: transactionsCreateManyProcessesInputEnvelope
    set?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    disconnect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    delete?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    connect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    update?: transactionsUpdateWithWhereUniqueWithoutProcessesInput | transactionsUpdateWithWhereUniqueWithoutProcessesInput[]
    updateMany?: transactionsUpdateManyWithWhereWithoutProcessesInput | transactionsUpdateManyWithWhereWithoutProcessesInput[]
    deleteMany?: transactionsScalarWhereInput | transactionsScalarWhereInput[]
  }

  export type transactionsUncheckedUpdateManyWithoutProcessesNestedInput = {
    create?: XOR<transactionsCreateWithoutProcessesInput, transactionsUncheckedCreateWithoutProcessesInput> | transactionsCreateWithoutProcessesInput[] | transactionsUncheckedCreateWithoutProcessesInput[]
    connectOrCreate?: transactionsCreateOrConnectWithoutProcessesInput | transactionsCreateOrConnectWithoutProcessesInput[]
    upsert?: transactionsUpsertWithWhereUniqueWithoutProcessesInput | transactionsUpsertWithWhereUniqueWithoutProcessesInput[]
    createMany?: transactionsCreateManyProcessesInputEnvelope
    set?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    disconnect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    delete?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    connect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    update?: transactionsUpdateWithWhereUniqueWithoutProcessesInput | transactionsUpdateWithWhereUniqueWithoutProcessesInput[]
    updateMany?: transactionsUpdateManyWithWhereWithoutProcessesInput | transactionsUpdateManyWithWhereWithoutProcessesInput[]
    deleteMany?: transactionsScalarWhereInput | transactionsScalarWhereInput[]
  }

  export type distillationsCreateNestedOneWithoutRepro_additionsInput = {
    create?: XOR<distillationsCreateWithoutRepro_additionsInput, distillationsUncheckedCreateWithoutRepro_additionsInput>
    connectOrCreate?: distillationsCreateOrConnectWithoutRepro_additionsInput
    connect?: distillationsWhereUniqueInput
  }

  export type repro_drumsCreateNestedOneWithoutRepro_additionsInput = {
    create?: XOR<repro_drumsCreateWithoutRepro_additionsInput, repro_drumsUncheckedCreateWithoutRepro_additionsInput>
    connectOrCreate?: repro_drumsCreateOrConnectWithoutRepro_additionsInput
    connect?: repro_drumsWhereUniqueInput
  }

  export type distillationsUpdateOneWithoutRepro_additionsNestedInput = {
    create?: XOR<distillationsCreateWithoutRepro_additionsInput, distillationsUncheckedCreateWithoutRepro_additionsInput>
    connectOrCreate?: distillationsCreateOrConnectWithoutRepro_additionsInput
    upsert?: distillationsUpsertWithoutRepro_additionsInput
    disconnect?: distillationsWhereInput | boolean
    delete?: distillationsWhereInput | boolean
    connect?: distillationsWhereUniqueInput
    update?: XOR<XOR<distillationsUpdateToOneWithWhereWithoutRepro_additionsInput, distillationsUpdateWithoutRepro_additionsInput>, distillationsUncheckedUpdateWithoutRepro_additionsInput>
  }

  export type repro_drumsUpdateOneWithoutRepro_additionsNestedInput = {
    create?: XOR<repro_drumsCreateWithoutRepro_additionsInput, repro_drumsUncheckedCreateWithoutRepro_additionsInput>
    connectOrCreate?: repro_drumsCreateOrConnectWithoutRepro_additionsInput
    upsert?: repro_drumsUpsertWithoutRepro_additionsInput
    disconnect?: repro_drumsWhereInput | boolean
    delete?: repro_drumsWhereInput | boolean
    connect?: repro_drumsWhereUniqueInput
    update?: XOR<XOR<repro_drumsUpdateToOneWithWhereWithoutRepro_additionsInput, repro_drumsUpdateWithoutRepro_additionsInput>, repro_drumsUncheckedUpdateWithoutRepro_additionsInput>
  }

  export type repro_additionsCreateNestedManyWithoutRepro_drumsInput = {
    create?: XOR<repro_additionsCreateWithoutRepro_drumsInput, repro_additionsUncheckedCreateWithoutRepro_drumsInput> | repro_additionsCreateWithoutRepro_drumsInput[] | repro_additionsUncheckedCreateWithoutRepro_drumsInput[]
    connectOrCreate?: repro_additionsCreateOrConnectWithoutRepro_drumsInput | repro_additionsCreateOrConnectWithoutRepro_drumsInput[]
    createMany?: repro_additionsCreateManyRepro_drumsInputEnvelope
    connect?: repro_additionsWhereUniqueInput | repro_additionsWhereUniqueInput[]
  }

  export type transactionsCreateNestedManyWithoutRepro_drumsInput = {
    create?: XOR<transactionsCreateWithoutRepro_drumsInput, transactionsUncheckedCreateWithoutRepro_drumsInput> | transactionsCreateWithoutRepro_drumsInput[] | transactionsUncheckedCreateWithoutRepro_drumsInput[]
    connectOrCreate?: transactionsCreateOrConnectWithoutRepro_drumsInput | transactionsCreateOrConnectWithoutRepro_drumsInput[]
    createMany?: transactionsCreateManyRepro_drumsInputEnvelope
    connect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
  }

  export type repro_additionsUncheckedCreateNestedManyWithoutRepro_drumsInput = {
    create?: XOR<repro_additionsCreateWithoutRepro_drumsInput, repro_additionsUncheckedCreateWithoutRepro_drumsInput> | repro_additionsCreateWithoutRepro_drumsInput[] | repro_additionsUncheckedCreateWithoutRepro_drumsInput[]
    connectOrCreate?: repro_additionsCreateOrConnectWithoutRepro_drumsInput | repro_additionsCreateOrConnectWithoutRepro_drumsInput[]
    createMany?: repro_additionsCreateManyRepro_drumsInputEnvelope
    connect?: repro_additionsWhereUniqueInput | repro_additionsWhereUniqueInput[]
  }

  export type transactionsUncheckedCreateNestedManyWithoutRepro_drumsInput = {
    create?: XOR<transactionsCreateWithoutRepro_drumsInput, transactionsUncheckedCreateWithoutRepro_drumsInput> | transactionsCreateWithoutRepro_drumsInput[] | transactionsUncheckedCreateWithoutRepro_drumsInput[]
    connectOrCreate?: transactionsCreateOrConnectWithoutRepro_drumsInput | transactionsCreateOrConnectWithoutRepro_drumsInput[]
    createMany?: transactionsCreateManyRepro_drumsInputEnvelope
    connect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
  }

  export type repro_additionsUpdateManyWithoutRepro_drumsNestedInput = {
    create?: XOR<repro_additionsCreateWithoutRepro_drumsInput, repro_additionsUncheckedCreateWithoutRepro_drumsInput> | repro_additionsCreateWithoutRepro_drumsInput[] | repro_additionsUncheckedCreateWithoutRepro_drumsInput[]
    connectOrCreate?: repro_additionsCreateOrConnectWithoutRepro_drumsInput | repro_additionsCreateOrConnectWithoutRepro_drumsInput[]
    upsert?: repro_additionsUpsertWithWhereUniqueWithoutRepro_drumsInput | repro_additionsUpsertWithWhereUniqueWithoutRepro_drumsInput[]
    createMany?: repro_additionsCreateManyRepro_drumsInputEnvelope
    set?: repro_additionsWhereUniqueInput | repro_additionsWhereUniqueInput[]
    disconnect?: repro_additionsWhereUniqueInput | repro_additionsWhereUniqueInput[]
    delete?: repro_additionsWhereUniqueInput | repro_additionsWhereUniqueInput[]
    connect?: repro_additionsWhereUniqueInput | repro_additionsWhereUniqueInput[]
    update?: repro_additionsUpdateWithWhereUniqueWithoutRepro_drumsInput | repro_additionsUpdateWithWhereUniqueWithoutRepro_drumsInput[]
    updateMany?: repro_additionsUpdateManyWithWhereWithoutRepro_drumsInput | repro_additionsUpdateManyWithWhereWithoutRepro_drumsInput[]
    deleteMany?: repro_additionsScalarWhereInput | repro_additionsScalarWhereInput[]
  }

  export type transactionsUpdateManyWithoutRepro_drumsNestedInput = {
    create?: XOR<transactionsCreateWithoutRepro_drumsInput, transactionsUncheckedCreateWithoutRepro_drumsInput> | transactionsCreateWithoutRepro_drumsInput[] | transactionsUncheckedCreateWithoutRepro_drumsInput[]
    connectOrCreate?: transactionsCreateOrConnectWithoutRepro_drumsInput | transactionsCreateOrConnectWithoutRepro_drumsInput[]
    upsert?: transactionsUpsertWithWhereUniqueWithoutRepro_drumsInput | transactionsUpsertWithWhereUniqueWithoutRepro_drumsInput[]
    createMany?: transactionsCreateManyRepro_drumsInputEnvelope
    set?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    disconnect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    delete?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    connect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    update?: transactionsUpdateWithWhereUniqueWithoutRepro_drumsInput | transactionsUpdateWithWhereUniqueWithoutRepro_drumsInput[]
    updateMany?: transactionsUpdateManyWithWhereWithoutRepro_drumsInput | transactionsUpdateManyWithWhereWithoutRepro_drumsInput[]
    deleteMany?: transactionsScalarWhereInput | transactionsScalarWhereInput[]
  }

  export type repro_additionsUncheckedUpdateManyWithoutRepro_drumsNestedInput = {
    create?: XOR<repro_additionsCreateWithoutRepro_drumsInput, repro_additionsUncheckedCreateWithoutRepro_drumsInput> | repro_additionsCreateWithoutRepro_drumsInput[] | repro_additionsUncheckedCreateWithoutRepro_drumsInput[]
    connectOrCreate?: repro_additionsCreateOrConnectWithoutRepro_drumsInput | repro_additionsCreateOrConnectWithoutRepro_drumsInput[]
    upsert?: repro_additionsUpsertWithWhereUniqueWithoutRepro_drumsInput | repro_additionsUpsertWithWhereUniqueWithoutRepro_drumsInput[]
    createMany?: repro_additionsCreateManyRepro_drumsInputEnvelope
    set?: repro_additionsWhereUniqueInput | repro_additionsWhereUniqueInput[]
    disconnect?: repro_additionsWhereUniqueInput | repro_additionsWhereUniqueInput[]
    delete?: repro_additionsWhereUniqueInput | repro_additionsWhereUniqueInput[]
    connect?: repro_additionsWhereUniqueInput | repro_additionsWhereUniqueInput[]
    update?: repro_additionsUpdateWithWhereUniqueWithoutRepro_drumsInput | repro_additionsUpdateWithWhereUniqueWithoutRepro_drumsInput[]
    updateMany?: repro_additionsUpdateManyWithWhereWithoutRepro_drumsInput | repro_additionsUpdateManyWithWhereWithoutRepro_drumsInput[]
    deleteMany?: repro_additionsScalarWhereInput | repro_additionsScalarWhereInput[]
  }

  export type transactionsUncheckedUpdateManyWithoutRepro_drumsNestedInput = {
    create?: XOR<transactionsCreateWithoutRepro_drumsInput, transactionsUncheckedCreateWithoutRepro_drumsInput> | transactionsCreateWithoutRepro_drumsInput[] | transactionsUncheckedCreateWithoutRepro_drumsInput[]
    connectOrCreate?: transactionsCreateOrConnectWithoutRepro_drumsInput | transactionsCreateOrConnectWithoutRepro_drumsInput[]
    upsert?: transactionsUpsertWithWhereUniqueWithoutRepro_drumsInput | transactionsUpsertWithWhereUniqueWithoutRepro_drumsInput[]
    createMany?: transactionsCreateManyRepro_drumsInputEnvelope
    set?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    disconnect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    delete?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    connect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    update?: transactionsUpdateWithWhereUniqueWithoutRepro_drumsInput | transactionsUpdateWithWhereUniqueWithoutRepro_drumsInput[]
    updateMany?: transactionsUpdateManyWithWhereWithoutRepro_drumsInput | transactionsUpdateManyWithWhereWithoutRepro_drumsInput[]
    deleteMany?: transactionsScalarWhereInput | transactionsScalarWhereInput[]
  }

  export type deliveriesCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<deliveriesCreateWithoutTransactionsInput, deliveriesUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: deliveriesCreateOrConnectWithoutTransactionsInput
    connect?: deliveriesWhereUniqueInput
  }

  export type new_drumsCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<new_drumsCreateWithoutTransactionsInput, new_drumsUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: new_drumsCreateOrConnectWithoutTransactionsInput
    connect?: new_drumsWhereUniqueInput
  }

  export type processesCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<processesCreateWithoutTransactionsInput, processesUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: processesCreateOrConnectWithoutTransactionsInput
    connect?: processesWhereUniqueInput
  }

  export type repro_drumsCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<repro_drumsCreateWithoutTransactionsInput, repro_drumsUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: repro_drumsCreateOrConnectWithoutTransactionsInput
    connect?: repro_drumsWhereUniqueInput
  }

  export type deliveriesUpdateOneWithoutTransactionsNestedInput = {
    create?: XOR<deliveriesCreateWithoutTransactionsInput, deliveriesUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: deliveriesCreateOrConnectWithoutTransactionsInput
    upsert?: deliveriesUpsertWithoutTransactionsInput
    disconnect?: deliveriesWhereInput | boolean
    delete?: deliveriesWhereInput | boolean
    connect?: deliveriesWhereUniqueInput
    update?: XOR<XOR<deliveriesUpdateToOneWithWhereWithoutTransactionsInput, deliveriesUpdateWithoutTransactionsInput>, deliveriesUncheckedUpdateWithoutTransactionsInput>
  }

  export type new_drumsUpdateOneWithoutTransactionsNestedInput = {
    create?: XOR<new_drumsCreateWithoutTransactionsInput, new_drumsUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: new_drumsCreateOrConnectWithoutTransactionsInput
    upsert?: new_drumsUpsertWithoutTransactionsInput
    disconnect?: new_drumsWhereInput | boolean
    delete?: new_drumsWhereInput | boolean
    connect?: new_drumsWhereUniqueInput
    update?: XOR<XOR<new_drumsUpdateToOneWithWhereWithoutTransactionsInput, new_drumsUpdateWithoutTransactionsInput>, new_drumsUncheckedUpdateWithoutTransactionsInput>
  }

  export type processesUpdateOneWithoutTransactionsNestedInput = {
    create?: XOR<processesCreateWithoutTransactionsInput, processesUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: processesCreateOrConnectWithoutTransactionsInput
    upsert?: processesUpsertWithoutTransactionsInput
    disconnect?: processesWhereInput | boolean
    delete?: processesWhereInput | boolean
    connect?: processesWhereUniqueInput
    update?: XOR<XOR<processesUpdateToOneWithWhereWithoutTransactionsInput, processesUpdateWithoutTransactionsInput>, processesUncheckedUpdateWithoutTransactionsInput>
  }

  export type repro_drumsUpdateOneWithoutTransactionsNestedInput = {
    create?: XOR<repro_drumsCreateWithoutTransactionsInput, repro_drumsUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: repro_drumsCreateOrConnectWithoutTransactionsInput
    upsert?: repro_drumsUpsertWithoutTransactionsInput
    disconnect?: repro_drumsWhereInput | boolean
    delete?: repro_drumsWhereInput | boolean
    connect?: repro_drumsWhereUniqueInput
    update?: XOR<XOR<repro_drumsUpdateToOneWithWhereWithoutTransactionsInput, repro_drumsUpdateWithoutTransactionsInput>, repro_drumsUncheckedUpdateWithoutTransactionsInput>
  }

  export type processesCreateNestedManyWithoutStillsInput = {
    create?: XOR<processesCreateWithoutStillsInput, processesUncheckedCreateWithoutStillsInput> | processesCreateWithoutStillsInput[] | processesUncheckedCreateWithoutStillsInput[]
    connectOrCreate?: processesCreateOrConnectWithoutStillsInput | processesCreateOrConnectWithoutStillsInput[]
    createMany?: processesCreateManyStillsInputEnvelope
    connect?: processesWhereUniqueInput | processesWhereUniqueInput[]
  }

  export type processesUncheckedCreateNestedManyWithoutStillsInput = {
    create?: XOR<processesCreateWithoutStillsInput, processesUncheckedCreateWithoutStillsInput> | processesCreateWithoutStillsInput[] | processesUncheckedCreateWithoutStillsInput[]
    connectOrCreate?: processesCreateOrConnectWithoutStillsInput | processesCreateOrConnectWithoutStillsInput[]
    createMany?: processesCreateManyStillsInputEnvelope
    connect?: processesWhereUniqueInput | processesWhereUniqueInput[]
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type processesUpdateManyWithoutStillsNestedInput = {
    create?: XOR<processesCreateWithoutStillsInput, processesUncheckedCreateWithoutStillsInput> | processesCreateWithoutStillsInput[] | processesUncheckedCreateWithoutStillsInput[]
    connectOrCreate?: processesCreateOrConnectWithoutStillsInput | processesCreateOrConnectWithoutStillsInput[]
    upsert?: processesUpsertWithWhereUniqueWithoutStillsInput | processesUpsertWithWhereUniqueWithoutStillsInput[]
    createMany?: processesCreateManyStillsInputEnvelope
    set?: processesWhereUniqueInput | processesWhereUniqueInput[]
    disconnect?: processesWhereUniqueInput | processesWhereUniqueInput[]
    delete?: processesWhereUniqueInput | processesWhereUniqueInput[]
    connect?: processesWhereUniqueInput | processesWhereUniqueInput[]
    update?: processesUpdateWithWhereUniqueWithoutStillsInput | processesUpdateWithWhereUniqueWithoutStillsInput[]
    updateMany?: processesUpdateManyWithWhereWithoutStillsInput | processesUpdateManyWithWhereWithoutStillsInput[]
    deleteMany?: processesScalarWhereInput | processesScalarWhereInput[]
  }

  export type processesUncheckedUpdateManyWithoutStillsNestedInput = {
    create?: XOR<processesCreateWithoutStillsInput, processesUncheckedCreateWithoutStillsInput> | processesCreateWithoutStillsInput[] | processesUncheckedCreateWithoutStillsInput[]
    connectOrCreate?: processesCreateOrConnectWithoutStillsInput | processesCreateOrConnectWithoutStillsInput[]
    upsert?: processesUpsertWithWhereUniqueWithoutStillsInput | processesUpsertWithWhereUniqueWithoutStillsInput[]
    createMany?: processesCreateManyStillsInputEnvelope
    set?: processesWhereUniqueInput | processesWhereUniqueInput[]
    disconnect?: processesWhereUniqueInput | processesWhereUniqueInput[]
    delete?: processesWhereUniqueInput | processesWhereUniqueInput[]
    connect?: processesWhereUniqueInput | processesWhereUniqueInput[]
    update?: processesUpdateWithWhereUniqueWithoutStillsInput | processesUpdateWithWhereUniqueWithoutStillsInput[]
    updateMany?: processesUpdateManyWithWhereWithoutStillsInput | processesUpdateManyWithWhereWithoutStillsInput[]
    deleteMany?: processesScalarWhereInput | processesScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type product_pricesCreateWithoutBottle_sizesInput = {
    price: Decimal | DecimalJsLike | number | string
    products: productsCreateNestedOneWithoutProduct_pricesInput
  }

  export type product_pricesUncheckedCreateWithoutBottle_sizesInput = {
    product_id: number
    price: Decimal | DecimalJsLike | number | string
  }

  export type product_pricesCreateOrConnectWithoutBottle_sizesInput = {
    where: product_pricesWhereUniqueInput
    create: XOR<product_pricesCreateWithoutBottle_sizesInput, product_pricesUncheckedCreateWithoutBottle_sizesInput>
  }

  export type product_pricesCreateManyBottle_sizesInputEnvelope = {
    data: product_pricesCreateManyBottle_sizesInput | product_pricesCreateManyBottle_sizesInput[]
    skipDuplicates?: boolean
  }

  export type product_pricesUpsertWithWhereUniqueWithoutBottle_sizesInput = {
    where: product_pricesWhereUniqueInput
    update: XOR<product_pricesUpdateWithoutBottle_sizesInput, product_pricesUncheckedUpdateWithoutBottle_sizesInput>
    create: XOR<product_pricesCreateWithoutBottle_sizesInput, product_pricesUncheckedCreateWithoutBottle_sizesInput>
  }

  export type product_pricesUpdateWithWhereUniqueWithoutBottle_sizesInput = {
    where: product_pricesWhereUniqueInput
    data: XOR<product_pricesUpdateWithoutBottle_sizesInput, product_pricesUncheckedUpdateWithoutBottle_sizesInput>
  }

  export type product_pricesUpdateManyWithWhereWithoutBottle_sizesInput = {
    where: product_pricesScalarWhereInput
    data: XOR<product_pricesUpdateManyMutationInput, product_pricesUncheckedUpdateManyWithoutBottle_sizesInput>
  }

  export type product_pricesScalarWhereInput = {
    AND?: product_pricesScalarWhereInput | product_pricesScalarWhereInput[]
    OR?: product_pricesScalarWhereInput[]
    NOT?: product_pricesScalarWhereInput | product_pricesScalarWhereInput[]
    product_id?: IntFilter<"product_prices"> | number
    bottle_size_id?: IntFilter<"product_prices"> | number
    price?: DecimalFilter<"product_prices"> | Decimal | DecimalJsLike | number | string
  }

  export type bottle_sizesCreateWithoutProduct_pricesInput = {
    volume: string
  }

  export type bottle_sizesUncheckedCreateWithoutProduct_pricesInput = {
    id?: number
    volume: string
  }

  export type bottle_sizesCreateOrConnectWithoutProduct_pricesInput = {
    where: bottle_sizesWhereUniqueInput
    create: XOR<bottle_sizesCreateWithoutProduct_pricesInput, bottle_sizesUncheckedCreateWithoutProduct_pricesInput>
  }

  export type productsCreateWithoutProduct_pricesInput = {
    name: string
    sku: string
    grade: string
    raw_materials?: raw_materialsCreateNestedOneWithoutProductsInput
  }

  export type productsUncheckedCreateWithoutProduct_pricesInput = {
    product_id?: number
    name: string
    sku: string
    raw_material_id?: number | null
    grade: string
  }

  export type productsCreateOrConnectWithoutProduct_pricesInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutProduct_pricesInput, productsUncheckedCreateWithoutProduct_pricesInput>
  }

  export type bottle_sizesUpsertWithoutProduct_pricesInput = {
    update: XOR<bottle_sizesUpdateWithoutProduct_pricesInput, bottle_sizesUncheckedUpdateWithoutProduct_pricesInput>
    create: XOR<bottle_sizesCreateWithoutProduct_pricesInput, bottle_sizesUncheckedCreateWithoutProduct_pricesInput>
    where?: bottle_sizesWhereInput
  }

  export type bottle_sizesUpdateToOneWithWhereWithoutProduct_pricesInput = {
    where?: bottle_sizesWhereInput
    data: XOR<bottle_sizesUpdateWithoutProduct_pricesInput, bottle_sizesUncheckedUpdateWithoutProduct_pricesInput>
  }

  export type bottle_sizesUpdateWithoutProduct_pricesInput = {
    volume?: StringFieldUpdateOperationsInput | string
  }

  export type bottle_sizesUncheckedUpdateWithoutProduct_pricesInput = {
    id?: IntFieldUpdateOperationsInput | number
    volume?: StringFieldUpdateOperationsInput | string
  }

  export type productsUpsertWithoutProduct_pricesInput = {
    update: XOR<productsUpdateWithoutProduct_pricesInput, productsUncheckedUpdateWithoutProduct_pricesInput>
    create: XOR<productsCreateWithoutProduct_pricesInput, productsUncheckedCreateWithoutProduct_pricesInput>
    where?: productsWhereInput
  }

  export type productsUpdateToOneWithWhereWithoutProduct_pricesInput = {
    where?: productsWhereInput
    data: XOR<productsUpdateWithoutProduct_pricesInput, productsUncheckedUpdateWithoutProduct_pricesInput>
  }

  export type productsUpdateWithoutProduct_pricesInput = {
    name?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    raw_materials?: raw_materialsUpdateOneWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateWithoutProduct_pricesInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    raw_material_id?: NullableIntFieldUpdateOperationsInput | number | null
    grade?: StringFieldUpdateOperationsInput | string
  }

  export type product_pricesCreateWithoutProductsInput = {
    price: Decimal | DecimalJsLike | number | string
    bottle_sizes: bottle_sizesCreateNestedOneWithoutProduct_pricesInput
  }

  export type product_pricesUncheckedCreateWithoutProductsInput = {
    bottle_size_id: number
    price: Decimal | DecimalJsLike | number | string
  }

  export type product_pricesCreateOrConnectWithoutProductsInput = {
    where: product_pricesWhereUniqueInput
    create: XOR<product_pricesCreateWithoutProductsInput, product_pricesUncheckedCreateWithoutProductsInput>
  }

  export type product_pricesCreateManyProductsInputEnvelope = {
    data: product_pricesCreateManyProductsInput | product_pricesCreateManyProductsInput[]
    skipDuplicates?: boolean
  }

  export type raw_materialsCreateWithoutProductsInput = {
    name: string
    cas_number: string
    chemical_group?: string | null
    description?: string | null
    un_code?: string | null
    flash_point?: number | null
  }

  export type raw_materialsUncheckedCreateWithoutProductsInput = {
    raw_material_id?: number
    name: string
    cas_number: string
    chemical_group?: string | null
    description?: string | null
    un_code?: string | null
    flash_point?: number | null
  }

  export type raw_materialsCreateOrConnectWithoutProductsInput = {
    where: raw_materialsWhereUniqueInput
    create: XOR<raw_materialsCreateWithoutProductsInput, raw_materialsUncheckedCreateWithoutProductsInput>
  }

  export type product_pricesUpsertWithWhereUniqueWithoutProductsInput = {
    where: product_pricesWhereUniqueInput
    update: XOR<product_pricesUpdateWithoutProductsInput, product_pricesUncheckedUpdateWithoutProductsInput>
    create: XOR<product_pricesCreateWithoutProductsInput, product_pricesUncheckedCreateWithoutProductsInput>
  }

  export type product_pricesUpdateWithWhereUniqueWithoutProductsInput = {
    where: product_pricesWhereUniqueInput
    data: XOR<product_pricesUpdateWithoutProductsInput, product_pricesUncheckedUpdateWithoutProductsInput>
  }

  export type product_pricesUpdateManyWithWhereWithoutProductsInput = {
    where: product_pricesScalarWhereInput
    data: XOR<product_pricesUpdateManyMutationInput, product_pricesUncheckedUpdateManyWithoutProductsInput>
  }

  export type raw_materialsUpsertWithoutProductsInput = {
    update: XOR<raw_materialsUpdateWithoutProductsInput, raw_materialsUncheckedUpdateWithoutProductsInput>
    create: XOR<raw_materialsCreateWithoutProductsInput, raw_materialsUncheckedCreateWithoutProductsInput>
    where?: raw_materialsWhereInput
  }

  export type raw_materialsUpdateToOneWithWhereWithoutProductsInput = {
    where?: raw_materialsWhereInput
    data: XOR<raw_materialsUpdateWithoutProductsInput, raw_materialsUncheckedUpdateWithoutProductsInput>
  }

  export type raw_materialsUpdateWithoutProductsInput = {
    name?: StringFieldUpdateOperationsInput | string
    cas_number?: StringFieldUpdateOperationsInput | string
    chemical_group?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    un_code?: NullableStringFieldUpdateOperationsInput | string | null
    flash_point?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type raw_materialsUncheckedUpdateWithoutProductsInput = {
    raw_material_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cas_number?: StringFieldUpdateOperationsInput | string
    chemical_group?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    un_code?: NullableStringFieldUpdateOperationsInput | string | null
    flash_point?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type productsCreateWithoutRaw_materialsInput = {
    name: string
    sku: string
    grade: string
    product_prices?: product_pricesCreateNestedManyWithoutProductsInput
  }

  export type productsUncheckedCreateWithoutRaw_materialsInput = {
    product_id?: number
    name: string
    sku: string
    grade: string
    product_prices?: product_pricesUncheckedCreateNestedManyWithoutProductsInput
  }

  export type productsCreateOrConnectWithoutRaw_materialsInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutRaw_materialsInput, productsUncheckedCreateWithoutRaw_materialsInput>
  }

  export type productsCreateManyRaw_materialsInputEnvelope = {
    data: productsCreateManyRaw_materialsInput | productsCreateManyRaw_materialsInput[]
    skipDuplicates?: boolean
  }

  export type productsUpsertWithWhereUniqueWithoutRaw_materialsInput = {
    where: productsWhereUniqueInput
    update: XOR<productsUpdateWithoutRaw_materialsInput, productsUncheckedUpdateWithoutRaw_materialsInput>
    create: XOR<productsCreateWithoutRaw_materialsInput, productsUncheckedCreateWithoutRaw_materialsInput>
  }

  export type productsUpdateWithWhereUniqueWithoutRaw_materialsInput = {
    where: productsWhereUniqueInput
    data: XOR<productsUpdateWithoutRaw_materialsInput, productsUncheckedUpdateWithoutRaw_materialsInput>
  }

  export type productsUpdateManyWithWhereWithoutRaw_materialsInput = {
    where: productsScalarWhereInput
    data: XOR<productsUpdateManyMutationInput, productsUncheckedUpdateManyWithoutRaw_materialsInput>
  }

  export type productsScalarWhereInput = {
    AND?: productsScalarWhereInput | productsScalarWhereInput[]
    OR?: productsScalarWhereInput[]
    NOT?: productsScalarWhereInput | productsScalarWhereInput[]
    product_id?: IntFilter<"products"> | number
    name?: StringFilter<"products"> | string
    sku?: StringFilter<"products"> | string
    raw_material_id?: IntNullableFilter<"products"> | number | null
    grade?: StringFilter<"products"> | string
  }

  export type distillationsCreateWithoutBatchesInput = {
    loading_date?: Date | string | null
    start_date?: Date | string | null
    still_code?: string | null
    volume_in?: Decimal | DecimalJsLike | number | string | null
    transporter?: string | null
    loader?: string | null
    operator?: string | null
    completion_date?: Date | string | null
    volume_in_spec?: Decimal | DecimalJsLike | number | string | null
    volume_repro?: Decimal | DecimalJsLike | number | string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    drum_distillations?: drum_distillationsCreateNestedManyWithoutDistillationsInput
    repro_additions?: repro_additionsCreateNestedManyWithoutDistillationsInput
  }

  export type distillationsUncheckedCreateWithoutBatchesInput = {
    distillation_id?: number
    loading_date?: Date | string | null
    start_date?: Date | string | null
    still_code?: string | null
    volume_in?: Decimal | DecimalJsLike | number | string | null
    transporter?: string | null
    loader?: string | null
    operator?: string | null
    completion_date?: Date | string | null
    volume_in_spec?: Decimal | DecimalJsLike | number | string | null
    volume_repro?: Decimal | DecimalJsLike | number | string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    drum_distillations?: drum_distillationsUncheckedCreateNestedManyWithoutDistillationsInput
    repro_additions?: repro_additionsUncheckedCreateNestedManyWithoutDistillationsInput
  }

  export type distillationsCreateOrConnectWithoutBatchesInput = {
    where: distillationsWhereUniqueInput
    create: XOR<distillationsCreateWithoutBatchesInput, distillationsUncheckedCreateWithoutBatchesInput>
  }

  export type distillationsUpsertWithoutBatchesInput = {
    update: XOR<distillationsUpdateWithoutBatchesInput, distillationsUncheckedUpdateWithoutBatchesInput>
    create: XOR<distillationsCreateWithoutBatchesInput, distillationsUncheckedCreateWithoutBatchesInput>
    where?: distillationsWhereInput
  }

  export type distillationsUpdateToOneWithWhereWithoutBatchesInput = {
    where?: distillationsWhereInput
    data: XOR<distillationsUpdateWithoutBatchesInput, distillationsUncheckedUpdateWithoutBatchesInput>
  }

  export type distillationsUpdateWithoutBatchesInput = {
    loading_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    still_code?: NullableStringFieldUpdateOperationsInput | string | null
    volume_in?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    transporter?: NullableStringFieldUpdateOperationsInput | string | null
    loader?: NullableStringFieldUpdateOperationsInput | string | null
    operator?: NullableStringFieldUpdateOperationsInput | string | null
    completion_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    volume_in_spec?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    volume_repro?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    drum_distillations?: drum_distillationsUpdateManyWithoutDistillationsNestedInput
    repro_additions?: repro_additionsUpdateManyWithoutDistillationsNestedInput
  }

  export type distillationsUncheckedUpdateWithoutBatchesInput = {
    distillation_id?: IntFieldUpdateOperationsInput | number
    loading_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    still_code?: NullableStringFieldUpdateOperationsInput | string | null
    volume_in?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    transporter?: NullableStringFieldUpdateOperationsInput | string | null
    loader?: NullableStringFieldUpdateOperationsInput | string | null
    operator?: NullableStringFieldUpdateOperationsInput | string | null
    completion_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    volume_in_spec?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    volume_repro?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    drum_distillations?: drum_distillationsUncheckedUpdateManyWithoutDistillationsNestedInput
    repro_additions?: repro_additionsUncheckedUpdateManyWithoutDistillationsNestedInput
  }

  export type ordersCreateWithoutDeliveriesInput = {
    supplier: string
    material: string
    quantity: number
    date_ordered?: Date | string | null
    notes?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    quantity_received?: number
    delivery_status?: string
    new_drums?: new_drumsCreateNestedManyWithoutOrdersInput
  }

  export type ordersUncheckedCreateWithoutDeliveriesInput = {
    order_id?: number
    supplier: string
    material: string
    quantity: number
    date_ordered?: Date | string | null
    notes?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    quantity_received?: number
    delivery_status?: string
    new_drums?: new_drumsUncheckedCreateNestedManyWithoutOrdersInput
  }

  export type ordersCreateOrConnectWithoutDeliveriesInput = {
    where: ordersWhereUniqueInput
    create: XOR<ordersCreateWithoutDeliveriesInput, ordersUncheckedCreateWithoutDeliveriesInput>
  }

  export type transactionsCreateWithoutDeliveriesInput = {
    tx_type?: string
    tx_date?: Date | string
    material?: string | null
    tx_notes?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    direction?: string | null
    batch_code?: string | null
    new_drums?: new_drumsCreateNestedOneWithoutTransactionsInput
    processes?: processesCreateNestedOneWithoutTransactionsInput
    repro_drums?: repro_drumsCreateNestedOneWithoutTransactionsInput
  }

  export type transactionsUncheckedCreateWithoutDeliveriesInput = {
    tx_id?: number
    tx_type?: string
    tx_date?: Date | string
    material?: string | null
    drum_id?: number | null
    repro_id?: number | null
    tx_notes?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    process_id?: number | null
    direction?: string | null
    batch_code?: string | null
  }

  export type transactionsCreateOrConnectWithoutDeliveriesInput = {
    where: transactionsWhereUniqueInput
    create: XOR<transactionsCreateWithoutDeliveriesInput, transactionsUncheckedCreateWithoutDeliveriesInput>
  }

  export type transactionsCreateManyDeliveriesInputEnvelope = {
    data: transactionsCreateManyDeliveriesInput | transactionsCreateManyDeliveriesInput[]
    skipDuplicates?: boolean
  }

  export type ordersUpsertWithoutDeliveriesInput = {
    update: XOR<ordersUpdateWithoutDeliveriesInput, ordersUncheckedUpdateWithoutDeliveriesInput>
    create: XOR<ordersCreateWithoutDeliveriesInput, ordersUncheckedCreateWithoutDeliveriesInput>
    where?: ordersWhereInput
  }

  export type ordersUpdateToOneWithWhereWithoutDeliveriesInput = {
    where?: ordersWhereInput
    data: XOR<ordersUpdateWithoutDeliveriesInput, ordersUncheckedUpdateWithoutDeliveriesInput>
  }

  export type ordersUpdateWithoutDeliveriesInput = {
    supplier?: StringFieldUpdateOperationsInput | string
    material?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    date_ordered?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantity_received?: IntFieldUpdateOperationsInput | number
    delivery_status?: StringFieldUpdateOperationsInput | string
    new_drums?: new_drumsUpdateManyWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateWithoutDeliveriesInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    supplier?: StringFieldUpdateOperationsInput | string
    material?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    date_ordered?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantity_received?: IntFieldUpdateOperationsInput | number
    delivery_status?: StringFieldUpdateOperationsInput | string
    new_drums?: new_drumsUncheckedUpdateManyWithoutOrdersNestedInput
  }

  export type transactionsUpsertWithWhereUniqueWithoutDeliveriesInput = {
    where: transactionsWhereUniqueInput
    update: XOR<transactionsUpdateWithoutDeliveriesInput, transactionsUncheckedUpdateWithoutDeliveriesInput>
    create: XOR<transactionsCreateWithoutDeliveriesInput, transactionsUncheckedCreateWithoutDeliveriesInput>
  }

  export type transactionsUpdateWithWhereUniqueWithoutDeliveriesInput = {
    where: transactionsWhereUniqueInput
    data: XOR<transactionsUpdateWithoutDeliveriesInput, transactionsUncheckedUpdateWithoutDeliveriesInput>
  }

  export type transactionsUpdateManyWithWhereWithoutDeliveriesInput = {
    where: transactionsScalarWhereInput
    data: XOR<transactionsUpdateManyMutationInput, transactionsUncheckedUpdateManyWithoutDeliveriesInput>
  }

  export type transactionsScalarWhereInput = {
    AND?: transactionsScalarWhereInput | transactionsScalarWhereInput[]
    OR?: transactionsScalarWhereInput[]
    NOT?: transactionsScalarWhereInput | transactionsScalarWhereInput[]
    tx_id?: IntFilter<"transactions"> | number
    tx_type?: StringFilter<"transactions"> | string
    tx_date?: DateTimeFilter<"transactions"> | Date | string
    material?: StringNullableFilter<"transactions"> | string | null
    drum_id?: IntNullableFilter<"transactions"> | number | null
    repro_id?: IntNullableFilter<"transactions"> | number | null
    tx_notes?: StringNullableFilter<"transactions"> | string | null
    created_at?: DateTimeNullableFilter<"transactions"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"transactions"> | Date | string | null
    process_id?: IntNullableFilter<"transactions"> | number | null
    direction?: StringNullableFilter<"transactions"> | string | null
    delivery_id?: IntNullableFilter<"transactions"> | number | null
    batch_code?: StringNullableFilter<"transactions"> | string | null
  }

  export type batchesCreateWithoutDistillationsInput = {
    creation_date?: Date | string | null
    batch_code?: string | null
    grade?: string | null
    quantity?: Decimal | DecimalJsLike | number | string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type batchesUncheckedCreateWithoutDistillationsInput = {
    batch_id?: number
    creation_date?: Date | string | null
    batch_code?: string | null
    grade?: string | null
    quantity?: Decimal | DecimalJsLike | number | string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type batchesCreateOrConnectWithoutDistillationsInput = {
    where: batchesWhereUniqueInput
    create: XOR<batchesCreateWithoutDistillationsInput, batchesUncheckedCreateWithoutDistillationsInput>
  }

  export type batchesCreateManyDistillationsInputEnvelope = {
    data: batchesCreateManyDistillationsInput | batchesCreateManyDistillationsInput[]
    skipDuplicates?: boolean
  }

  export type drum_distillationsCreateWithoutDistillationsInput = {
    fraction_used?: Decimal | DecimalJsLike | number | string
    new_drums: new_drumsCreateNestedOneWithoutDrum_distillationsInput
  }

  export type drum_distillationsUncheckedCreateWithoutDistillationsInput = {
    drum_id: number
    fraction_used?: Decimal | DecimalJsLike | number | string
  }

  export type drum_distillationsCreateOrConnectWithoutDistillationsInput = {
    where: drum_distillationsWhereUniqueInput
    create: XOR<drum_distillationsCreateWithoutDistillationsInput, drum_distillationsUncheckedCreateWithoutDistillationsInput>
  }

  export type drum_distillationsCreateManyDistillationsInputEnvelope = {
    data: drum_distillationsCreateManyDistillationsInput | drum_distillationsCreateManyDistillationsInput[]
    skipDuplicates?: boolean
  }

  export type repro_additionsCreateWithoutDistillationsInput = {
    date_added?: Date | string | null
    volume_added: number
    volume_in_drum: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    repro_drums?: repro_drumsCreateNestedOneWithoutRepro_additionsInput
  }

  export type repro_additionsUncheckedCreateWithoutDistillationsInput = {
    addition_id?: number
    repro_drum_id?: number | null
    date_added?: Date | string | null
    volume_added: number
    volume_in_drum: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type repro_additionsCreateOrConnectWithoutDistillationsInput = {
    where: repro_additionsWhereUniqueInput
    create: XOR<repro_additionsCreateWithoutDistillationsInput, repro_additionsUncheckedCreateWithoutDistillationsInput>
  }

  export type repro_additionsCreateManyDistillationsInputEnvelope = {
    data: repro_additionsCreateManyDistillationsInput | repro_additionsCreateManyDistillationsInput[]
    skipDuplicates?: boolean
  }

  export type batchesUpsertWithWhereUniqueWithoutDistillationsInput = {
    where: batchesWhereUniqueInput
    update: XOR<batchesUpdateWithoutDistillationsInput, batchesUncheckedUpdateWithoutDistillationsInput>
    create: XOR<batchesCreateWithoutDistillationsInput, batchesUncheckedCreateWithoutDistillationsInput>
  }

  export type batchesUpdateWithWhereUniqueWithoutDistillationsInput = {
    where: batchesWhereUniqueInput
    data: XOR<batchesUpdateWithoutDistillationsInput, batchesUncheckedUpdateWithoutDistillationsInput>
  }

  export type batchesUpdateManyWithWhereWithoutDistillationsInput = {
    where: batchesScalarWhereInput
    data: XOR<batchesUpdateManyMutationInput, batchesUncheckedUpdateManyWithoutDistillationsInput>
  }

  export type batchesScalarWhereInput = {
    AND?: batchesScalarWhereInput | batchesScalarWhereInput[]
    OR?: batchesScalarWhereInput[]
    NOT?: batchesScalarWhereInput | batchesScalarWhereInput[]
    batch_id?: IntFilter<"batches"> | number
    distillation_id?: IntNullableFilter<"batches"> | number | null
    creation_date?: DateTimeNullableFilter<"batches"> | Date | string | null
    batch_code?: StringNullableFilter<"batches"> | string | null
    grade?: StringNullableFilter<"batches"> | string | null
    quantity?: DecimalNullableFilter<"batches"> | Decimal | DecimalJsLike | number | string | null
    created_at?: DateTimeNullableFilter<"batches"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"batches"> | Date | string | null
  }

  export type drum_distillationsUpsertWithWhereUniqueWithoutDistillationsInput = {
    where: drum_distillationsWhereUniqueInput
    update: XOR<drum_distillationsUpdateWithoutDistillationsInput, drum_distillationsUncheckedUpdateWithoutDistillationsInput>
    create: XOR<drum_distillationsCreateWithoutDistillationsInput, drum_distillationsUncheckedCreateWithoutDistillationsInput>
  }

  export type drum_distillationsUpdateWithWhereUniqueWithoutDistillationsInput = {
    where: drum_distillationsWhereUniqueInput
    data: XOR<drum_distillationsUpdateWithoutDistillationsInput, drum_distillationsUncheckedUpdateWithoutDistillationsInput>
  }

  export type drum_distillationsUpdateManyWithWhereWithoutDistillationsInput = {
    where: drum_distillationsScalarWhereInput
    data: XOR<drum_distillationsUpdateManyMutationInput, drum_distillationsUncheckedUpdateManyWithoutDistillationsInput>
  }

  export type drum_distillationsScalarWhereInput = {
    AND?: drum_distillationsScalarWhereInput | drum_distillationsScalarWhereInput[]
    OR?: drum_distillationsScalarWhereInput[]
    NOT?: drum_distillationsScalarWhereInput | drum_distillationsScalarWhereInput[]
    drum_id?: IntFilter<"drum_distillations"> | number
    distillation_id?: IntFilter<"drum_distillations"> | number
    fraction_used?: DecimalFilter<"drum_distillations"> | Decimal | DecimalJsLike | number | string
  }

  export type repro_additionsUpsertWithWhereUniqueWithoutDistillationsInput = {
    where: repro_additionsWhereUniqueInput
    update: XOR<repro_additionsUpdateWithoutDistillationsInput, repro_additionsUncheckedUpdateWithoutDistillationsInput>
    create: XOR<repro_additionsCreateWithoutDistillationsInput, repro_additionsUncheckedCreateWithoutDistillationsInput>
  }

  export type repro_additionsUpdateWithWhereUniqueWithoutDistillationsInput = {
    where: repro_additionsWhereUniqueInput
    data: XOR<repro_additionsUpdateWithoutDistillationsInput, repro_additionsUncheckedUpdateWithoutDistillationsInput>
  }

  export type repro_additionsUpdateManyWithWhereWithoutDistillationsInput = {
    where: repro_additionsScalarWhereInput
    data: XOR<repro_additionsUpdateManyMutationInput, repro_additionsUncheckedUpdateManyWithoutDistillationsInput>
  }

  export type repro_additionsScalarWhereInput = {
    AND?: repro_additionsScalarWhereInput | repro_additionsScalarWhereInput[]
    OR?: repro_additionsScalarWhereInput[]
    NOT?: repro_additionsScalarWhereInput | repro_additionsScalarWhereInput[]
    addition_id?: IntFilter<"repro_additions"> | number
    repro_drum_id?: IntNullableFilter<"repro_additions"> | number | null
    distillation_id?: IntNullableFilter<"repro_additions"> | number | null
    date_added?: DateTimeNullableFilter<"repro_additions"> | Date | string | null
    volume_added?: IntFilter<"repro_additions"> | number
    volume_in_drum?: IntFilter<"repro_additions"> | number
    created_at?: DateTimeNullableFilter<"repro_additions"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"repro_additions"> | Date | string | null
  }

  export type distillationsCreateWithoutDrum_distillationsInput = {
    loading_date?: Date | string | null
    start_date?: Date | string | null
    still_code?: string | null
    volume_in?: Decimal | DecimalJsLike | number | string | null
    transporter?: string | null
    loader?: string | null
    operator?: string | null
    completion_date?: Date | string | null
    volume_in_spec?: Decimal | DecimalJsLike | number | string | null
    volume_repro?: Decimal | DecimalJsLike | number | string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    batches?: batchesCreateNestedManyWithoutDistillationsInput
    repro_additions?: repro_additionsCreateNestedManyWithoutDistillationsInput
  }

  export type distillationsUncheckedCreateWithoutDrum_distillationsInput = {
    distillation_id?: number
    loading_date?: Date | string | null
    start_date?: Date | string | null
    still_code?: string | null
    volume_in?: Decimal | DecimalJsLike | number | string | null
    transporter?: string | null
    loader?: string | null
    operator?: string | null
    completion_date?: Date | string | null
    volume_in_spec?: Decimal | DecimalJsLike | number | string | null
    volume_repro?: Decimal | DecimalJsLike | number | string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    batches?: batchesUncheckedCreateNestedManyWithoutDistillationsInput
    repro_additions?: repro_additionsUncheckedCreateNestedManyWithoutDistillationsInput
  }

  export type distillationsCreateOrConnectWithoutDrum_distillationsInput = {
    where: distillationsWhereUniqueInput
    create: XOR<distillationsCreateWithoutDrum_distillationsInput, distillationsUncheckedCreateWithoutDrum_distillationsInput>
  }

  export type new_drumsCreateWithoutDrum_distillationsInput = {
    import_id?: number | null
    material: string
    date_processed?: Date | string | null
    status?: string
    location?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    orders?: ordersCreateNestedOneWithoutNew_drumsInput
    processes?: processesCreateNestedManyWithoutNew_drumsInput
    transactions?: transactionsCreateNestedManyWithoutNew_drumsInput
  }

  export type new_drumsUncheckedCreateWithoutDrum_distillationsInput = {
    drum_id?: number
    import_id?: number | null
    material: string
    date_processed?: Date | string | null
    status?: string
    location?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    order_id?: number | null
    processes?: processesUncheckedCreateNestedManyWithoutNew_drumsInput
    transactions?: transactionsUncheckedCreateNestedManyWithoutNew_drumsInput
  }

  export type new_drumsCreateOrConnectWithoutDrum_distillationsInput = {
    where: new_drumsWhereUniqueInput
    create: XOR<new_drumsCreateWithoutDrum_distillationsInput, new_drumsUncheckedCreateWithoutDrum_distillationsInput>
  }

  export type distillationsUpsertWithoutDrum_distillationsInput = {
    update: XOR<distillationsUpdateWithoutDrum_distillationsInput, distillationsUncheckedUpdateWithoutDrum_distillationsInput>
    create: XOR<distillationsCreateWithoutDrum_distillationsInput, distillationsUncheckedCreateWithoutDrum_distillationsInput>
    where?: distillationsWhereInput
  }

  export type distillationsUpdateToOneWithWhereWithoutDrum_distillationsInput = {
    where?: distillationsWhereInput
    data: XOR<distillationsUpdateWithoutDrum_distillationsInput, distillationsUncheckedUpdateWithoutDrum_distillationsInput>
  }

  export type distillationsUpdateWithoutDrum_distillationsInput = {
    loading_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    still_code?: NullableStringFieldUpdateOperationsInput | string | null
    volume_in?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    transporter?: NullableStringFieldUpdateOperationsInput | string | null
    loader?: NullableStringFieldUpdateOperationsInput | string | null
    operator?: NullableStringFieldUpdateOperationsInput | string | null
    completion_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    volume_in_spec?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    volume_repro?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    batches?: batchesUpdateManyWithoutDistillationsNestedInput
    repro_additions?: repro_additionsUpdateManyWithoutDistillationsNestedInput
  }

  export type distillationsUncheckedUpdateWithoutDrum_distillationsInput = {
    distillation_id?: IntFieldUpdateOperationsInput | number
    loading_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    still_code?: NullableStringFieldUpdateOperationsInput | string | null
    volume_in?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    transporter?: NullableStringFieldUpdateOperationsInput | string | null
    loader?: NullableStringFieldUpdateOperationsInput | string | null
    operator?: NullableStringFieldUpdateOperationsInput | string | null
    completion_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    volume_in_spec?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    volume_repro?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    batches?: batchesUncheckedUpdateManyWithoutDistillationsNestedInput
    repro_additions?: repro_additionsUncheckedUpdateManyWithoutDistillationsNestedInput
  }

  export type new_drumsUpsertWithoutDrum_distillationsInput = {
    update: XOR<new_drumsUpdateWithoutDrum_distillationsInput, new_drumsUncheckedUpdateWithoutDrum_distillationsInput>
    create: XOR<new_drumsCreateWithoutDrum_distillationsInput, new_drumsUncheckedCreateWithoutDrum_distillationsInput>
    where?: new_drumsWhereInput
  }

  export type new_drumsUpdateToOneWithWhereWithoutDrum_distillationsInput = {
    where?: new_drumsWhereInput
    data: XOR<new_drumsUpdateWithoutDrum_distillationsInput, new_drumsUncheckedUpdateWithoutDrum_distillationsInput>
  }

  export type new_drumsUpdateWithoutDrum_distillationsInput = {
    import_id?: NullableIntFieldUpdateOperationsInput | number | null
    material?: StringFieldUpdateOperationsInput | string
    date_processed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orders?: ordersUpdateOneWithoutNew_drumsNestedInput
    processes?: processesUpdateManyWithoutNew_drumsNestedInput
    transactions?: transactionsUpdateManyWithoutNew_drumsNestedInput
  }

  export type new_drumsUncheckedUpdateWithoutDrum_distillationsInput = {
    drum_id?: IntFieldUpdateOperationsInput | number
    import_id?: NullableIntFieldUpdateOperationsInput | number | null
    material?: StringFieldUpdateOperationsInput | string
    date_processed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order_id?: NullableIntFieldUpdateOperationsInput | number | null
    processes?: processesUncheckedUpdateManyWithoutNew_drumsNestedInput
    transactions?: transactionsUncheckedUpdateManyWithoutNew_drumsNestedInput
  }

  export type drum_distillationsCreateWithoutNew_drumsInput = {
    fraction_used?: Decimal | DecimalJsLike | number | string
    distillations: distillationsCreateNestedOneWithoutDrum_distillationsInput
  }

  export type drum_distillationsUncheckedCreateWithoutNew_drumsInput = {
    distillation_id: number
    fraction_used?: Decimal | DecimalJsLike | number | string
  }

  export type drum_distillationsCreateOrConnectWithoutNew_drumsInput = {
    where: drum_distillationsWhereUniqueInput
    create: XOR<drum_distillationsCreateWithoutNew_drumsInput, drum_distillationsUncheckedCreateWithoutNew_drumsInput>
  }

  export type drum_distillationsCreateManyNew_drumsInputEnvelope = {
    data: drum_distillationsCreateManyNew_drumsInput | drum_distillationsCreateManyNew_drumsInput[]
    skipDuplicates?: boolean
  }

  export type ordersCreateWithoutNew_drumsInput = {
    supplier: string
    material: string
    quantity: number
    date_ordered?: Date | string | null
    notes?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    quantity_received?: number
    delivery_status?: string
    deliveries?: deliveriesCreateNestedManyWithoutOrdersInput
  }

  export type ordersUncheckedCreateWithoutNew_drumsInput = {
    order_id?: number
    supplier: string
    material: string
    quantity: number
    date_ordered?: Date | string | null
    notes?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    quantity_received?: number
    delivery_status?: string
    deliveries?: deliveriesUncheckedCreateNestedManyWithoutOrdersInput
  }

  export type ordersCreateOrConnectWithoutNew_drumsInput = {
    where: ordersWhereUniqueInput
    create: XOR<ordersCreateWithoutNew_drumsInput, ordersUncheckedCreateWithoutNew_drumsInput>
  }

  export type processesCreateWithoutNew_drumsInput = {
    material?: string | null
    supplier?: string | null
    operator?: string | null
    loader?: string | null
    transporter?: string | null
    date_processed?: Date | string | null
    stills: stillsCreateNestedOneWithoutProcessesInput
    transactions?: transactionsCreateNestedManyWithoutProcessesInput
  }

  export type processesUncheckedCreateWithoutNew_drumsInput = {
    process_id?: number
    material?: string | null
    supplier?: string | null
    still_code: string
    operator?: string | null
    loader?: string | null
    transporter?: string | null
    date_processed?: Date | string | null
    transactions?: transactionsUncheckedCreateNestedManyWithoutProcessesInput
  }

  export type processesCreateOrConnectWithoutNew_drumsInput = {
    where: processesWhereUniqueInput
    create: XOR<processesCreateWithoutNew_drumsInput, processesUncheckedCreateWithoutNew_drumsInput>
  }

  export type processesCreateManyNew_drumsInputEnvelope = {
    data: processesCreateManyNew_drumsInput | processesCreateManyNew_drumsInput[]
    skipDuplicates?: boolean
  }

  export type transactionsCreateWithoutNew_drumsInput = {
    tx_type?: string
    tx_date?: Date | string
    material?: string | null
    tx_notes?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    direction?: string | null
    batch_code?: string | null
    deliveries?: deliveriesCreateNestedOneWithoutTransactionsInput
    processes?: processesCreateNestedOneWithoutTransactionsInput
    repro_drums?: repro_drumsCreateNestedOneWithoutTransactionsInput
  }

  export type transactionsUncheckedCreateWithoutNew_drumsInput = {
    tx_id?: number
    tx_type?: string
    tx_date?: Date | string
    material?: string | null
    repro_id?: number | null
    tx_notes?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    process_id?: number | null
    direction?: string | null
    delivery_id?: number | null
    batch_code?: string | null
  }

  export type transactionsCreateOrConnectWithoutNew_drumsInput = {
    where: transactionsWhereUniqueInput
    create: XOR<transactionsCreateWithoutNew_drumsInput, transactionsUncheckedCreateWithoutNew_drumsInput>
  }

  export type transactionsCreateManyNew_drumsInputEnvelope = {
    data: transactionsCreateManyNew_drumsInput | transactionsCreateManyNew_drumsInput[]
    skipDuplicates?: boolean
  }

  export type drum_distillationsUpsertWithWhereUniqueWithoutNew_drumsInput = {
    where: drum_distillationsWhereUniqueInput
    update: XOR<drum_distillationsUpdateWithoutNew_drumsInput, drum_distillationsUncheckedUpdateWithoutNew_drumsInput>
    create: XOR<drum_distillationsCreateWithoutNew_drumsInput, drum_distillationsUncheckedCreateWithoutNew_drumsInput>
  }

  export type drum_distillationsUpdateWithWhereUniqueWithoutNew_drumsInput = {
    where: drum_distillationsWhereUniqueInput
    data: XOR<drum_distillationsUpdateWithoutNew_drumsInput, drum_distillationsUncheckedUpdateWithoutNew_drumsInput>
  }

  export type drum_distillationsUpdateManyWithWhereWithoutNew_drumsInput = {
    where: drum_distillationsScalarWhereInput
    data: XOR<drum_distillationsUpdateManyMutationInput, drum_distillationsUncheckedUpdateManyWithoutNew_drumsInput>
  }

  export type ordersUpsertWithoutNew_drumsInput = {
    update: XOR<ordersUpdateWithoutNew_drumsInput, ordersUncheckedUpdateWithoutNew_drumsInput>
    create: XOR<ordersCreateWithoutNew_drumsInput, ordersUncheckedCreateWithoutNew_drumsInput>
    where?: ordersWhereInput
  }

  export type ordersUpdateToOneWithWhereWithoutNew_drumsInput = {
    where?: ordersWhereInput
    data: XOR<ordersUpdateWithoutNew_drumsInput, ordersUncheckedUpdateWithoutNew_drumsInput>
  }

  export type ordersUpdateWithoutNew_drumsInput = {
    supplier?: StringFieldUpdateOperationsInput | string
    material?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    date_ordered?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantity_received?: IntFieldUpdateOperationsInput | number
    delivery_status?: StringFieldUpdateOperationsInput | string
    deliveries?: deliveriesUpdateManyWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateWithoutNew_drumsInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    supplier?: StringFieldUpdateOperationsInput | string
    material?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    date_ordered?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantity_received?: IntFieldUpdateOperationsInput | number
    delivery_status?: StringFieldUpdateOperationsInput | string
    deliveries?: deliveriesUncheckedUpdateManyWithoutOrdersNestedInput
  }

  export type processesUpsertWithWhereUniqueWithoutNew_drumsInput = {
    where: processesWhereUniqueInput
    update: XOR<processesUpdateWithoutNew_drumsInput, processesUncheckedUpdateWithoutNew_drumsInput>
    create: XOR<processesCreateWithoutNew_drumsInput, processesUncheckedCreateWithoutNew_drumsInput>
  }

  export type processesUpdateWithWhereUniqueWithoutNew_drumsInput = {
    where: processesWhereUniqueInput
    data: XOR<processesUpdateWithoutNew_drumsInput, processesUncheckedUpdateWithoutNew_drumsInput>
  }

  export type processesUpdateManyWithWhereWithoutNew_drumsInput = {
    where: processesScalarWhereInput
    data: XOR<processesUpdateManyMutationInput, processesUncheckedUpdateManyWithoutNew_drumsInput>
  }

  export type processesScalarWhereInput = {
    AND?: processesScalarWhereInput | processesScalarWhereInput[]
    OR?: processesScalarWhereInput[]
    NOT?: processesScalarWhereInput | processesScalarWhereInput[]
    process_id?: IntFilter<"processes"> | number
    material?: StringNullableFilter<"processes"> | string | null
    drum_id?: IntNullableFilter<"processes"> | number | null
    supplier?: StringNullableFilter<"processes"> | string | null
    still_code?: StringFilter<"processes"> | string
    operator?: StringNullableFilter<"processes"> | string | null
    loader?: StringNullableFilter<"processes"> | string | null
    transporter?: StringNullableFilter<"processes"> | string | null
    date_processed?: DateTimeNullableFilter<"processes"> | Date | string | null
  }

  export type transactionsUpsertWithWhereUniqueWithoutNew_drumsInput = {
    where: transactionsWhereUniqueInput
    update: XOR<transactionsUpdateWithoutNew_drumsInput, transactionsUncheckedUpdateWithoutNew_drumsInput>
    create: XOR<transactionsCreateWithoutNew_drumsInput, transactionsUncheckedCreateWithoutNew_drumsInput>
  }

  export type transactionsUpdateWithWhereUniqueWithoutNew_drumsInput = {
    where: transactionsWhereUniqueInput
    data: XOR<transactionsUpdateWithoutNew_drumsInput, transactionsUncheckedUpdateWithoutNew_drumsInput>
  }

  export type transactionsUpdateManyWithWhereWithoutNew_drumsInput = {
    where: transactionsScalarWhereInput
    data: XOR<transactionsUpdateManyMutationInput, transactionsUncheckedUpdateManyWithoutNew_drumsInput>
  }

  export type deliveriesCreateWithoutOrdersInput = {
    quantity_received: number
    date_received?: Date | string
    batch_code?: string | null
    location?: string | null
    delivery_notes?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    transactions?: transactionsCreateNestedManyWithoutDeliveriesInput
  }

  export type deliveriesUncheckedCreateWithoutOrdersInput = {
    delivery_id?: number
    quantity_received: number
    date_received?: Date | string
    batch_code?: string | null
    location?: string | null
    delivery_notes?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    transactions?: transactionsUncheckedCreateNestedManyWithoutDeliveriesInput
  }

  export type deliveriesCreateOrConnectWithoutOrdersInput = {
    where: deliveriesWhereUniqueInput
    create: XOR<deliveriesCreateWithoutOrdersInput, deliveriesUncheckedCreateWithoutOrdersInput>
  }

  export type deliveriesCreateManyOrdersInputEnvelope = {
    data: deliveriesCreateManyOrdersInput | deliveriesCreateManyOrdersInput[]
    skipDuplicates?: boolean
  }

  export type new_drumsCreateWithoutOrdersInput = {
    import_id?: number | null
    material: string
    date_processed?: Date | string | null
    status?: string
    location?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    drum_distillations?: drum_distillationsCreateNestedManyWithoutNew_drumsInput
    processes?: processesCreateNestedManyWithoutNew_drumsInput
    transactions?: transactionsCreateNestedManyWithoutNew_drumsInput
  }

  export type new_drumsUncheckedCreateWithoutOrdersInput = {
    drum_id?: number
    import_id?: number | null
    material: string
    date_processed?: Date | string | null
    status?: string
    location?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    drum_distillations?: drum_distillationsUncheckedCreateNestedManyWithoutNew_drumsInput
    processes?: processesUncheckedCreateNestedManyWithoutNew_drumsInput
    transactions?: transactionsUncheckedCreateNestedManyWithoutNew_drumsInput
  }

  export type new_drumsCreateOrConnectWithoutOrdersInput = {
    where: new_drumsWhereUniqueInput
    create: XOR<new_drumsCreateWithoutOrdersInput, new_drumsUncheckedCreateWithoutOrdersInput>
  }

  export type new_drumsCreateManyOrdersInputEnvelope = {
    data: new_drumsCreateManyOrdersInput | new_drumsCreateManyOrdersInput[]
    skipDuplicates?: boolean
  }

  export type deliveriesUpsertWithWhereUniqueWithoutOrdersInput = {
    where: deliveriesWhereUniqueInput
    update: XOR<deliveriesUpdateWithoutOrdersInput, deliveriesUncheckedUpdateWithoutOrdersInput>
    create: XOR<deliveriesCreateWithoutOrdersInput, deliveriesUncheckedCreateWithoutOrdersInput>
  }

  export type deliveriesUpdateWithWhereUniqueWithoutOrdersInput = {
    where: deliveriesWhereUniqueInput
    data: XOR<deliveriesUpdateWithoutOrdersInput, deliveriesUncheckedUpdateWithoutOrdersInput>
  }

  export type deliveriesUpdateManyWithWhereWithoutOrdersInput = {
    where: deliveriesScalarWhereInput
    data: XOR<deliveriesUpdateManyMutationInput, deliveriesUncheckedUpdateManyWithoutOrdersInput>
  }

  export type deliveriesScalarWhereInput = {
    AND?: deliveriesScalarWhereInput | deliveriesScalarWhereInput[]
    OR?: deliveriesScalarWhereInput[]
    NOT?: deliveriesScalarWhereInput | deliveriesScalarWhereInput[]
    delivery_id?: IntFilter<"deliveries"> | number
    order_id?: IntNullableFilter<"deliveries"> | number | null
    quantity_received?: IntFilter<"deliveries"> | number
    date_received?: DateTimeFilter<"deliveries"> | Date | string
    batch_code?: StringNullableFilter<"deliveries"> | string | null
    location?: StringNullableFilter<"deliveries"> | string | null
    delivery_notes?: StringNullableFilter<"deliveries"> | string | null
    created_at?: DateTimeNullableFilter<"deliveries"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"deliveries"> | Date | string | null
  }

  export type new_drumsUpsertWithWhereUniqueWithoutOrdersInput = {
    where: new_drumsWhereUniqueInput
    update: XOR<new_drumsUpdateWithoutOrdersInput, new_drumsUncheckedUpdateWithoutOrdersInput>
    create: XOR<new_drumsCreateWithoutOrdersInput, new_drumsUncheckedCreateWithoutOrdersInput>
  }

  export type new_drumsUpdateWithWhereUniqueWithoutOrdersInput = {
    where: new_drumsWhereUniqueInput
    data: XOR<new_drumsUpdateWithoutOrdersInput, new_drumsUncheckedUpdateWithoutOrdersInput>
  }

  export type new_drumsUpdateManyWithWhereWithoutOrdersInput = {
    where: new_drumsScalarWhereInput
    data: XOR<new_drumsUpdateManyMutationInput, new_drumsUncheckedUpdateManyWithoutOrdersInput>
  }

  export type new_drumsScalarWhereInput = {
    AND?: new_drumsScalarWhereInput | new_drumsScalarWhereInput[]
    OR?: new_drumsScalarWhereInput[]
    NOT?: new_drumsScalarWhereInput | new_drumsScalarWhereInput[]
    drum_id?: IntFilter<"new_drums"> | number
    import_id?: IntNullableFilter<"new_drums"> | number | null
    material?: StringFilter<"new_drums"> | string
    date_processed?: DateTimeNullableFilter<"new_drums"> | Date | string | null
    status?: StringFilter<"new_drums"> | string
    location?: StringNullableFilter<"new_drums"> | string | null
    created_at?: DateTimeNullableFilter<"new_drums"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"new_drums"> | Date | string | null
    order_id?: IntNullableFilter<"new_drums"> | number | null
  }

  export type new_drumsCreateWithoutProcessesInput = {
    import_id?: number | null
    material: string
    date_processed?: Date | string | null
    status?: string
    location?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    drum_distillations?: drum_distillationsCreateNestedManyWithoutNew_drumsInput
    orders?: ordersCreateNestedOneWithoutNew_drumsInput
    transactions?: transactionsCreateNestedManyWithoutNew_drumsInput
  }

  export type new_drumsUncheckedCreateWithoutProcessesInput = {
    drum_id?: number
    import_id?: number | null
    material: string
    date_processed?: Date | string | null
    status?: string
    location?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    order_id?: number | null
    drum_distillations?: drum_distillationsUncheckedCreateNestedManyWithoutNew_drumsInput
    transactions?: transactionsUncheckedCreateNestedManyWithoutNew_drumsInput
  }

  export type new_drumsCreateOrConnectWithoutProcessesInput = {
    where: new_drumsWhereUniqueInput
    create: XOR<new_drumsCreateWithoutProcessesInput, new_drumsUncheckedCreateWithoutProcessesInput>
  }

  export type stillsCreateWithoutProcessesInput = {
    code: string
    site: string
    power: number
    capacity: number
    is_vacuum?: boolean | null
    is_operational?: boolean | null
  }

  export type stillsUncheckedCreateWithoutProcessesInput = {
    code: string
    site: string
    power: number
    capacity: number
    is_vacuum?: boolean | null
    is_operational?: boolean | null
  }

  export type stillsCreateOrConnectWithoutProcessesInput = {
    where: stillsWhereUniqueInput
    create: XOR<stillsCreateWithoutProcessesInput, stillsUncheckedCreateWithoutProcessesInput>
  }

  export type transactionsCreateWithoutProcessesInput = {
    tx_type?: string
    tx_date?: Date | string
    material?: string | null
    tx_notes?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    direction?: string | null
    batch_code?: string | null
    deliveries?: deliveriesCreateNestedOneWithoutTransactionsInput
    new_drums?: new_drumsCreateNestedOneWithoutTransactionsInput
    repro_drums?: repro_drumsCreateNestedOneWithoutTransactionsInput
  }

  export type transactionsUncheckedCreateWithoutProcessesInput = {
    tx_id?: number
    tx_type?: string
    tx_date?: Date | string
    material?: string | null
    drum_id?: number | null
    repro_id?: number | null
    tx_notes?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    direction?: string | null
    delivery_id?: number | null
    batch_code?: string | null
  }

  export type transactionsCreateOrConnectWithoutProcessesInput = {
    where: transactionsWhereUniqueInput
    create: XOR<transactionsCreateWithoutProcessesInput, transactionsUncheckedCreateWithoutProcessesInput>
  }

  export type transactionsCreateManyProcessesInputEnvelope = {
    data: transactionsCreateManyProcessesInput | transactionsCreateManyProcessesInput[]
    skipDuplicates?: boolean
  }

  export type new_drumsUpsertWithoutProcessesInput = {
    update: XOR<new_drumsUpdateWithoutProcessesInput, new_drumsUncheckedUpdateWithoutProcessesInput>
    create: XOR<new_drumsCreateWithoutProcessesInput, new_drumsUncheckedCreateWithoutProcessesInput>
    where?: new_drumsWhereInput
  }

  export type new_drumsUpdateToOneWithWhereWithoutProcessesInput = {
    where?: new_drumsWhereInput
    data: XOR<new_drumsUpdateWithoutProcessesInput, new_drumsUncheckedUpdateWithoutProcessesInput>
  }

  export type new_drumsUpdateWithoutProcessesInput = {
    import_id?: NullableIntFieldUpdateOperationsInput | number | null
    material?: StringFieldUpdateOperationsInput | string
    date_processed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    drum_distillations?: drum_distillationsUpdateManyWithoutNew_drumsNestedInput
    orders?: ordersUpdateOneWithoutNew_drumsNestedInput
    transactions?: transactionsUpdateManyWithoutNew_drumsNestedInput
  }

  export type new_drumsUncheckedUpdateWithoutProcessesInput = {
    drum_id?: IntFieldUpdateOperationsInput | number
    import_id?: NullableIntFieldUpdateOperationsInput | number | null
    material?: StringFieldUpdateOperationsInput | string
    date_processed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order_id?: NullableIntFieldUpdateOperationsInput | number | null
    drum_distillations?: drum_distillationsUncheckedUpdateManyWithoutNew_drumsNestedInput
    transactions?: transactionsUncheckedUpdateManyWithoutNew_drumsNestedInput
  }

  export type stillsUpsertWithoutProcessesInput = {
    update: XOR<stillsUpdateWithoutProcessesInput, stillsUncheckedUpdateWithoutProcessesInput>
    create: XOR<stillsCreateWithoutProcessesInput, stillsUncheckedCreateWithoutProcessesInput>
    where?: stillsWhereInput
  }

  export type stillsUpdateToOneWithWhereWithoutProcessesInput = {
    where?: stillsWhereInput
    data: XOR<stillsUpdateWithoutProcessesInput, stillsUncheckedUpdateWithoutProcessesInput>
  }

  export type stillsUpdateWithoutProcessesInput = {
    code?: StringFieldUpdateOperationsInput | string
    site?: StringFieldUpdateOperationsInput | string
    power?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    is_vacuum?: NullableBoolFieldUpdateOperationsInput | boolean | null
    is_operational?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type stillsUncheckedUpdateWithoutProcessesInput = {
    code?: StringFieldUpdateOperationsInput | string
    site?: StringFieldUpdateOperationsInput | string
    power?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    is_vacuum?: NullableBoolFieldUpdateOperationsInput | boolean | null
    is_operational?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type transactionsUpsertWithWhereUniqueWithoutProcessesInput = {
    where: transactionsWhereUniqueInput
    update: XOR<transactionsUpdateWithoutProcessesInput, transactionsUncheckedUpdateWithoutProcessesInput>
    create: XOR<transactionsCreateWithoutProcessesInput, transactionsUncheckedCreateWithoutProcessesInput>
  }

  export type transactionsUpdateWithWhereUniqueWithoutProcessesInput = {
    where: transactionsWhereUniqueInput
    data: XOR<transactionsUpdateWithoutProcessesInput, transactionsUncheckedUpdateWithoutProcessesInput>
  }

  export type transactionsUpdateManyWithWhereWithoutProcessesInput = {
    where: transactionsScalarWhereInput
    data: XOR<transactionsUpdateManyMutationInput, transactionsUncheckedUpdateManyWithoutProcessesInput>
  }

  export type distillationsCreateWithoutRepro_additionsInput = {
    loading_date?: Date | string | null
    start_date?: Date | string | null
    still_code?: string | null
    volume_in?: Decimal | DecimalJsLike | number | string | null
    transporter?: string | null
    loader?: string | null
    operator?: string | null
    completion_date?: Date | string | null
    volume_in_spec?: Decimal | DecimalJsLike | number | string | null
    volume_repro?: Decimal | DecimalJsLike | number | string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    batches?: batchesCreateNestedManyWithoutDistillationsInput
    drum_distillations?: drum_distillationsCreateNestedManyWithoutDistillationsInput
  }

  export type distillationsUncheckedCreateWithoutRepro_additionsInput = {
    distillation_id?: number
    loading_date?: Date | string | null
    start_date?: Date | string | null
    still_code?: string | null
    volume_in?: Decimal | DecimalJsLike | number | string | null
    transporter?: string | null
    loader?: string | null
    operator?: string | null
    completion_date?: Date | string | null
    volume_in_spec?: Decimal | DecimalJsLike | number | string | null
    volume_repro?: Decimal | DecimalJsLike | number | string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    batches?: batchesUncheckedCreateNestedManyWithoutDistillationsInput
    drum_distillations?: drum_distillationsUncheckedCreateNestedManyWithoutDistillationsInput
  }

  export type distillationsCreateOrConnectWithoutRepro_additionsInput = {
    where: distillationsWhereUniqueInput
    create: XOR<distillationsCreateWithoutRepro_additionsInput, distillationsUncheckedCreateWithoutRepro_additionsInput>
  }

  export type repro_drumsCreateWithoutRepro_additionsInput = {
    date_created?: Date | string
    material: string
    capacity?: number
    current_volume?: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    status?: string
    volume_status?: string
    notes?: string | null
    location?: string | null
    transactions?: transactionsCreateNestedManyWithoutRepro_drumsInput
  }

  export type repro_drumsUncheckedCreateWithoutRepro_additionsInput = {
    repro_drum_id?: number
    date_created?: Date | string
    material: string
    capacity?: number
    current_volume?: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    status?: string
    volume_status?: string
    notes?: string | null
    location?: string | null
    transactions?: transactionsUncheckedCreateNestedManyWithoutRepro_drumsInput
  }

  export type repro_drumsCreateOrConnectWithoutRepro_additionsInput = {
    where: repro_drumsWhereUniqueInput
    create: XOR<repro_drumsCreateWithoutRepro_additionsInput, repro_drumsUncheckedCreateWithoutRepro_additionsInput>
  }

  export type distillationsUpsertWithoutRepro_additionsInput = {
    update: XOR<distillationsUpdateWithoutRepro_additionsInput, distillationsUncheckedUpdateWithoutRepro_additionsInput>
    create: XOR<distillationsCreateWithoutRepro_additionsInput, distillationsUncheckedCreateWithoutRepro_additionsInput>
    where?: distillationsWhereInput
  }

  export type distillationsUpdateToOneWithWhereWithoutRepro_additionsInput = {
    where?: distillationsWhereInput
    data: XOR<distillationsUpdateWithoutRepro_additionsInput, distillationsUncheckedUpdateWithoutRepro_additionsInput>
  }

  export type distillationsUpdateWithoutRepro_additionsInput = {
    loading_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    still_code?: NullableStringFieldUpdateOperationsInput | string | null
    volume_in?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    transporter?: NullableStringFieldUpdateOperationsInput | string | null
    loader?: NullableStringFieldUpdateOperationsInput | string | null
    operator?: NullableStringFieldUpdateOperationsInput | string | null
    completion_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    volume_in_spec?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    volume_repro?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    batches?: batchesUpdateManyWithoutDistillationsNestedInput
    drum_distillations?: drum_distillationsUpdateManyWithoutDistillationsNestedInput
  }

  export type distillationsUncheckedUpdateWithoutRepro_additionsInput = {
    distillation_id?: IntFieldUpdateOperationsInput | number
    loading_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    still_code?: NullableStringFieldUpdateOperationsInput | string | null
    volume_in?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    transporter?: NullableStringFieldUpdateOperationsInput | string | null
    loader?: NullableStringFieldUpdateOperationsInput | string | null
    operator?: NullableStringFieldUpdateOperationsInput | string | null
    completion_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    volume_in_spec?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    volume_repro?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    batches?: batchesUncheckedUpdateManyWithoutDistillationsNestedInput
    drum_distillations?: drum_distillationsUncheckedUpdateManyWithoutDistillationsNestedInput
  }

  export type repro_drumsUpsertWithoutRepro_additionsInput = {
    update: XOR<repro_drumsUpdateWithoutRepro_additionsInput, repro_drumsUncheckedUpdateWithoutRepro_additionsInput>
    create: XOR<repro_drumsCreateWithoutRepro_additionsInput, repro_drumsUncheckedCreateWithoutRepro_additionsInput>
    where?: repro_drumsWhereInput
  }

  export type repro_drumsUpdateToOneWithWhereWithoutRepro_additionsInput = {
    where?: repro_drumsWhereInput
    data: XOR<repro_drumsUpdateWithoutRepro_additionsInput, repro_drumsUncheckedUpdateWithoutRepro_additionsInput>
  }

  export type repro_drumsUpdateWithoutRepro_additionsInput = {
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    material?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    current_volume?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    volume_status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    transactions?: transactionsUpdateManyWithoutRepro_drumsNestedInput
  }

  export type repro_drumsUncheckedUpdateWithoutRepro_additionsInput = {
    repro_drum_id?: IntFieldUpdateOperationsInput | number
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    material?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    current_volume?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    volume_status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    transactions?: transactionsUncheckedUpdateManyWithoutRepro_drumsNestedInput
  }

  export type repro_additionsCreateWithoutRepro_drumsInput = {
    date_added?: Date | string | null
    volume_added: number
    volume_in_drum: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    distillations?: distillationsCreateNestedOneWithoutRepro_additionsInput
  }

  export type repro_additionsUncheckedCreateWithoutRepro_drumsInput = {
    addition_id?: number
    distillation_id?: number | null
    date_added?: Date | string | null
    volume_added: number
    volume_in_drum: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type repro_additionsCreateOrConnectWithoutRepro_drumsInput = {
    where: repro_additionsWhereUniqueInput
    create: XOR<repro_additionsCreateWithoutRepro_drumsInput, repro_additionsUncheckedCreateWithoutRepro_drumsInput>
  }

  export type repro_additionsCreateManyRepro_drumsInputEnvelope = {
    data: repro_additionsCreateManyRepro_drumsInput | repro_additionsCreateManyRepro_drumsInput[]
    skipDuplicates?: boolean
  }

  export type transactionsCreateWithoutRepro_drumsInput = {
    tx_type?: string
    tx_date?: Date | string
    material?: string | null
    tx_notes?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    direction?: string | null
    batch_code?: string | null
    deliveries?: deliveriesCreateNestedOneWithoutTransactionsInput
    new_drums?: new_drumsCreateNestedOneWithoutTransactionsInput
    processes?: processesCreateNestedOneWithoutTransactionsInput
  }

  export type transactionsUncheckedCreateWithoutRepro_drumsInput = {
    tx_id?: number
    tx_type?: string
    tx_date?: Date | string
    material?: string | null
    drum_id?: number | null
    tx_notes?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    process_id?: number | null
    direction?: string | null
    delivery_id?: number | null
    batch_code?: string | null
  }

  export type transactionsCreateOrConnectWithoutRepro_drumsInput = {
    where: transactionsWhereUniqueInput
    create: XOR<transactionsCreateWithoutRepro_drumsInput, transactionsUncheckedCreateWithoutRepro_drumsInput>
  }

  export type transactionsCreateManyRepro_drumsInputEnvelope = {
    data: transactionsCreateManyRepro_drumsInput | transactionsCreateManyRepro_drumsInput[]
    skipDuplicates?: boolean
  }

  export type repro_additionsUpsertWithWhereUniqueWithoutRepro_drumsInput = {
    where: repro_additionsWhereUniqueInput
    update: XOR<repro_additionsUpdateWithoutRepro_drumsInput, repro_additionsUncheckedUpdateWithoutRepro_drumsInput>
    create: XOR<repro_additionsCreateWithoutRepro_drumsInput, repro_additionsUncheckedCreateWithoutRepro_drumsInput>
  }

  export type repro_additionsUpdateWithWhereUniqueWithoutRepro_drumsInput = {
    where: repro_additionsWhereUniqueInput
    data: XOR<repro_additionsUpdateWithoutRepro_drumsInput, repro_additionsUncheckedUpdateWithoutRepro_drumsInput>
  }

  export type repro_additionsUpdateManyWithWhereWithoutRepro_drumsInput = {
    where: repro_additionsScalarWhereInput
    data: XOR<repro_additionsUpdateManyMutationInput, repro_additionsUncheckedUpdateManyWithoutRepro_drumsInput>
  }

  export type transactionsUpsertWithWhereUniqueWithoutRepro_drumsInput = {
    where: transactionsWhereUniqueInput
    update: XOR<transactionsUpdateWithoutRepro_drumsInput, transactionsUncheckedUpdateWithoutRepro_drumsInput>
    create: XOR<transactionsCreateWithoutRepro_drumsInput, transactionsUncheckedCreateWithoutRepro_drumsInput>
  }

  export type transactionsUpdateWithWhereUniqueWithoutRepro_drumsInput = {
    where: transactionsWhereUniqueInput
    data: XOR<transactionsUpdateWithoutRepro_drumsInput, transactionsUncheckedUpdateWithoutRepro_drumsInput>
  }

  export type transactionsUpdateManyWithWhereWithoutRepro_drumsInput = {
    where: transactionsScalarWhereInput
    data: XOR<transactionsUpdateManyMutationInput, transactionsUncheckedUpdateManyWithoutRepro_drumsInput>
  }

  export type deliveriesCreateWithoutTransactionsInput = {
    quantity_received: number
    date_received?: Date | string
    batch_code?: string | null
    location?: string | null
    delivery_notes?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    orders?: ordersCreateNestedOneWithoutDeliveriesInput
  }

  export type deliveriesUncheckedCreateWithoutTransactionsInput = {
    delivery_id?: number
    order_id?: number | null
    quantity_received: number
    date_received?: Date | string
    batch_code?: string | null
    location?: string | null
    delivery_notes?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type deliveriesCreateOrConnectWithoutTransactionsInput = {
    where: deliveriesWhereUniqueInput
    create: XOR<deliveriesCreateWithoutTransactionsInput, deliveriesUncheckedCreateWithoutTransactionsInput>
  }

  export type new_drumsCreateWithoutTransactionsInput = {
    import_id?: number | null
    material: string
    date_processed?: Date | string | null
    status?: string
    location?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    drum_distillations?: drum_distillationsCreateNestedManyWithoutNew_drumsInput
    orders?: ordersCreateNestedOneWithoutNew_drumsInput
    processes?: processesCreateNestedManyWithoutNew_drumsInput
  }

  export type new_drumsUncheckedCreateWithoutTransactionsInput = {
    drum_id?: number
    import_id?: number | null
    material: string
    date_processed?: Date | string | null
    status?: string
    location?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    order_id?: number | null
    drum_distillations?: drum_distillationsUncheckedCreateNestedManyWithoutNew_drumsInput
    processes?: processesUncheckedCreateNestedManyWithoutNew_drumsInput
  }

  export type new_drumsCreateOrConnectWithoutTransactionsInput = {
    where: new_drumsWhereUniqueInput
    create: XOR<new_drumsCreateWithoutTransactionsInput, new_drumsUncheckedCreateWithoutTransactionsInput>
  }

  export type processesCreateWithoutTransactionsInput = {
    material?: string | null
    supplier?: string | null
    operator?: string | null
    loader?: string | null
    transporter?: string | null
    date_processed?: Date | string | null
    new_drums?: new_drumsCreateNestedOneWithoutProcessesInput
    stills: stillsCreateNestedOneWithoutProcessesInput
  }

  export type processesUncheckedCreateWithoutTransactionsInput = {
    process_id?: number
    material?: string | null
    drum_id?: number | null
    supplier?: string | null
    still_code: string
    operator?: string | null
    loader?: string | null
    transporter?: string | null
    date_processed?: Date | string | null
  }

  export type processesCreateOrConnectWithoutTransactionsInput = {
    where: processesWhereUniqueInput
    create: XOR<processesCreateWithoutTransactionsInput, processesUncheckedCreateWithoutTransactionsInput>
  }

  export type repro_drumsCreateWithoutTransactionsInput = {
    date_created?: Date | string
    material: string
    capacity?: number
    current_volume?: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    status?: string
    volume_status?: string
    notes?: string | null
    location?: string | null
    repro_additions?: repro_additionsCreateNestedManyWithoutRepro_drumsInput
  }

  export type repro_drumsUncheckedCreateWithoutTransactionsInput = {
    repro_drum_id?: number
    date_created?: Date | string
    material: string
    capacity?: number
    current_volume?: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    status?: string
    volume_status?: string
    notes?: string | null
    location?: string | null
    repro_additions?: repro_additionsUncheckedCreateNestedManyWithoutRepro_drumsInput
  }

  export type repro_drumsCreateOrConnectWithoutTransactionsInput = {
    where: repro_drumsWhereUniqueInput
    create: XOR<repro_drumsCreateWithoutTransactionsInput, repro_drumsUncheckedCreateWithoutTransactionsInput>
  }

  export type deliveriesUpsertWithoutTransactionsInput = {
    update: XOR<deliveriesUpdateWithoutTransactionsInput, deliveriesUncheckedUpdateWithoutTransactionsInput>
    create: XOR<deliveriesCreateWithoutTransactionsInput, deliveriesUncheckedCreateWithoutTransactionsInput>
    where?: deliveriesWhereInput
  }

  export type deliveriesUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: deliveriesWhereInput
    data: XOR<deliveriesUpdateWithoutTransactionsInput, deliveriesUncheckedUpdateWithoutTransactionsInput>
  }

  export type deliveriesUpdateWithoutTransactionsInput = {
    quantity_received?: IntFieldUpdateOperationsInput | number
    date_received?: DateTimeFieldUpdateOperationsInput | Date | string
    batch_code?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    delivery_notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orders?: ordersUpdateOneWithoutDeliveriesNestedInput
  }

  export type deliveriesUncheckedUpdateWithoutTransactionsInput = {
    delivery_id?: IntFieldUpdateOperationsInput | number
    order_id?: NullableIntFieldUpdateOperationsInput | number | null
    quantity_received?: IntFieldUpdateOperationsInput | number
    date_received?: DateTimeFieldUpdateOperationsInput | Date | string
    batch_code?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    delivery_notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type new_drumsUpsertWithoutTransactionsInput = {
    update: XOR<new_drumsUpdateWithoutTransactionsInput, new_drumsUncheckedUpdateWithoutTransactionsInput>
    create: XOR<new_drumsCreateWithoutTransactionsInput, new_drumsUncheckedCreateWithoutTransactionsInput>
    where?: new_drumsWhereInput
  }

  export type new_drumsUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: new_drumsWhereInput
    data: XOR<new_drumsUpdateWithoutTransactionsInput, new_drumsUncheckedUpdateWithoutTransactionsInput>
  }

  export type new_drumsUpdateWithoutTransactionsInput = {
    import_id?: NullableIntFieldUpdateOperationsInput | number | null
    material?: StringFieldUpdateOperationsInput | string
    date_processed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    drum_distillations?: drum_distillationsUpdateManyWithoutNew_drumsNestedInput
    orders?: ordersUpdateOneWithoutNew_drumsNestedInput
    processes?: processesUpdateManyWithoutNew_drumsNestedInput
  }

  export type new_drumsUncheckedUpdateWithoutTransactionsInput = {
    drum_id?: IntFieldUpdateOperationsInput | number
    import_id?: NullableIntFieldUpdateOperationsInput | number | null
    material?: StringFieldUpdateOperationsInput | string
    date_processed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order_id?: NullableIntFieldUpdateOperationsInput | number | null
    drum_distillations?: drum_distillationsUncheckedUpdateManyWithoutNew_drumsNestedInput
    processes?: processesUncheckedUpdateManyWithoutNew_drumsNestedInput
  }

  export type processesUpsertWithoutTransactionsInput = {
    update: XOR<processesUpdateWithoutTransactionsInput, processesUncheckedUpdateWithoutTransactionsInput>
    create: XOR<processesCreateWithoutTransactionsInput, processesUncheckedCreateWithoutTransactionsInput>
    where?: processesWhereInput
  }

  export type processesUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: processesWhereInput
    data: XOR<processesUpdateWithoutTransactionsInput, processesUncheckedUpdateWithoutTransactionsInput>
  }

  export type processesUpdateWithoutTransactionsInput = {
    material?: NullableStringFieldUpdateOperationsInput | string | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    operator?: NullableStringFieldUpdateOperationsInput | string | null
    loader?: NullableStringFieldUpdateOperationsInput | string | null
    transporter?: NullableStringFieldUpdateOperationsInput | string | null
    date_processed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    new_drums?: new_drumsUpdateOneWithoutProcessesNestedInput
    stills?: stillsUpdateOneRequiredWithoutProcessesNestedInput
  }

  export type processesUncheckedUpdateWithoutTransactionsInput = {
    process_id?: IntFieldUpdateOperationsInput | number
    material?: NullableStringFieldUpdateOperationsInput | string | null
    drum_id?: NullableIntFieldUpdateOperationsInput | number | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    still_code?: StringFieldUpdateOperationsInput | string
    operator?: NullableStringFieldUpdateOperationsInput | string | null
    loader?: NullableStringFieldUpdateOperationsInput | string | null
    transporter?: NullableStringFieldUpdateOperationsInput | string | null
    date_processed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type repro_drumsUpsertWithoutTransactionsInput = {
    update: XOR<repro_drumsUpdateWithoutTransactionsInput, repro_drumsUncheckedUpdateWithoutTransactionsInput>
    create: XOR<repro_drumsCreateWithoutTransactionsInput, repro_drumsUncheckedCreateWithoutTransactionsInput>
    where?: repro_drumsWhereInput
  }

  export type repro_drumsUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: repro_drumsWhereInput
    data: XOR<repro_drumsUpdateWithoutTransactionsInput, repro_drumsUncheckedUpdateWithoutTransactionsInput>
  }

  export type repro_drumsUpdateWithoutTransactionsInput = {
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    material?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    current_volume?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    volume_status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    repro_additions?: repro_additionsUpdateManyWithoutRepro_drumsNestedInput
  }

  export type repro_drumsUncheckedUpdateWithoutTransactionsInput = {
    repro_drum_id?: IntFieldUpdateOperationsInput | number
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    material?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    current_volume?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    volume_status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    repro_additions?: repro_additionsUncheckedUpdateManyWithoutRepro_drumsNestedInput
  }

  export type processesCreateWithoutStillsInput = {
    material?: string | null
    supplier?: string | null
    operator?: string | null
    loader?: string | null
    transporter?: string | null
    date_processed?: Date | string | null
    new_drums?: new_drumsCreateNestedOneWithoutProcessesInput
    transactions?: transactionsCreateNestedManyWithoutProcessesInput
  }

  export type processesUncheckedCreateWithoutStillsInput = {
    process_id?: number
    material?: string | null
    drum_id?: number | null
    supplier?: string | null
    operator?: string | null
    loader?: string | null
    transporter?: string | null
    date_processed?: Date | string | null
    transactions?: transactionsUncheckedCreateNestedManyWithoutProcessesInput
  }

  export type processesCreateOrConnectWithoutStillsInput = {
    where: processesWhereUniqueInput
    create: XOR<processesCreateWithoutStillsInput, processesUncheckedCreateWithoutStillsInput>
  }

  export type processesCreateManyStillsInputEnvelope = {
    data: processesCreateManyStillsInput | processesCreateManyStillsInput[]
    skipDuplicates?: boolean
  }

  export type processesUpsertWithWhereUniqueWithoutStillsInput = {
    where: processesWhereUniqueInput
    update: XOR<processesUpdateWithoutStillsInput, processesUncheckedUpdateWithoutStillsInput>
    create: XOR<processesCreateWithoutStillsInput, processesUncheckedCreateWithoutStillsInput>
  }

  export type processesUpdateWithWhereUniqueWithoutStillsInput = {
    where: processesWhereUniqueInput
    data: XOR<processesUpdateWithoutStillsInput, processesUncheckedUpdateWithoutStillsInput>
  }

  export type processesUpdateManyWithWhereWithoutStillsInput = {
    where: processesScalarWhereInput
    data: XOR<processesUpdateManyMutationInput, processesUncheckedUpdateManyWithoutStillsInput>
  }

  export type product_pricesCreateManyBottle_sizesInput = {
    product_id: number
    price: Decimal | DecimalJsLike | number | string
  }

  export type product_pricesUpdateWithoutBottle_sizesInput = {
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    products?: productsUpdateOneRequiredWithoutProduct_pricesNestedInput
  }

  export type product_pricesUncheckedUpdateWithoutBottle_sizesInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type product_pricesUncheckedUpdateManyWithoutBottle_sizesInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type product_pricesCreateManyProductsInput = {
    bottle_size_id: number
    price: Decimal | DecimalJsLike | number | string
  }

  export type product_pricesUpdateWithoutProductsInput = {
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bottle_sizes?: bottle_sizesUpdateOneRequiredWithoutProduct_pricesNestedInput
  }

  export type product_pricesUncheckedUpdateWithoutProductsInput = {
    bottle_size_id?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type product_pricesUncheckedUpdateManyWithoutProductsInput = {
    bottle_size_id?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type productsCreateManyRaw_materialsInput = {
    product_id?: number
    name: string
    sku: string
    grade: string
  }

  export type productsUpdateWithoutRaw_materialsInput = {
    name?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    product_prices?: product_pricesUpdateManyWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateWithoutRaw_materialsInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    product_prices?: product_pricesUncheckedUpdateManyWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateManyWithoutRaw_materialsInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
  }

  export type transactionsCreateManyDeliveriesInput = {
    tx_id?: number
    tx_type?: string
    tx_date?: Date | string
    material?: string | null
    drum_id?: number | null
    repro_id?: number | null
    tx_notes?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    process_id?: number | null
    direction?: string | null
    batch_code?: string | null
  }

  export type transactionsUpdateWithoutDeliveriesInput = {
    tx_type?: StringFieldUpdateOperationsInput | string
    tx_date?: DateTimeFieldUpdateOperationsInput | Date | string
    material?: NullableStringFieldUpdateOperationsInput | string | null
    tx_notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    direction?: NullableStringFieldUpdateOperationsInput | string | null
    batch_code?: NullableStringFieldUpdateOperationsInput | string | null
    new_drums?: new_drumsUpdateOneWithoutTransactionsNestedInput
    processes?: processesUpdateOneWithoutTransactionsNestedInput
    repro_drums?: repro_drumsUpdateOneWithoutTransactionsNestedInput
  }

  export type transactionsUncheckedUpdateWithoutDeliveriesInput = {
    tx_id?: IntFieldUpdateOperationsInput | number
    tx_type?: StringFieldUpdateOperationsInput | string
    tx_date?: DateTimeFieldUpdateOperationsInput | Date | string
    material?: NullableStringFieldUpdateOperationsInput | string | null
    drum_id?: NullableIntFieldUpdateOperationsInput | number | null
    repro_id?: NullableIntFieldUpdateOperationsInput | number | null
    tx_notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    process_id?: NullableIntFieldUpdateOperationsInput | number | null
    direction?: NullableStringFieldUpdateOperationsInput | string | null
    batch_code?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type transactionsUncheckedUpdateManyWithoutDeliveriesInput = {
    tx_id?: IntFieldUpdateOperationsInput | number
    tx_type?: StringFieldUpdateOperationsInput | string
    tx_date?: DateTimeFieldUpdateOperationsInput | Date | string
    material?: NullableStringFieldUpdateOperationsInput | string | null
    drum_id?: NullableIntFieldUpdateOperationsInput | number | null
    repro_id?: NullableIntFieldUpdateOperationsInput | number | null
    tx_notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    process_id?: NullableIntFieldUpdateOperationsInput | number | null
    direction?: NullableStringFieldUpdateOperationsInput | string | null
    batch_code?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type batchesCreateManyDistillationsInput = {
    batch_id?: number
    creation_date?: Date | string | null
    batch_code?: string | null
    grade?: string | null
    quantity?: Decimal | DecimalJsLike | number | string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type drum_distillationsCreateManyDistillationsInput = {
    drum_id: number
    fraction_used?: Decimal | DecimalJsLike | number | string
  }

  export type repro_additionsCreateManyDistillationsInput = {
    addition_id?: number
    repro_drum_id?: number | null
    date_added?: Date | string | null
    volume_added: number
    volume_in_drum: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type batchesUpdateWithoutDistillationsInput = {
    creation_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    batch_code?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type batchesUncheckedUpdateWithoutDistillationsInput = {
    batch_id?: IntFieldUpdateOperationsInput | number
    creation_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    batch_code?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type batchesUncheckedUpdateManyWithoutDistillationsInput = {
    batch_id?: IntFieldUpdateOperationsInput | number
    creation_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    batch_code?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type drum_distillationsUpdateWithoutDistillationsInput = {
    fraction_used?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    new_drums?: new_drumsUpdateOneRequiredWithoutDrum_distillationsNestedInput
  }

  export type drum_distillationsUncheckedUpdateWithoutDistillationsInput = {
    drum_id?: IntFieldUpdateOperationsInput | number
    fraction_used?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type drum_distillationsUncheckedUpdateManyWithoutDistillationsInput = {
    drum_id?: IntFieldUpdateOperationsInput | number
    fraction_used?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type repro_additionsUpdateWithoutDistillationsInput = {
    date_added?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    volume_added?: IntFieldUpdateOperationsInput | number
    volume_in_drum?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    repro_drums?: repro_drumsUpdateOneWithoutRepro_additionsNestedInput
  }

  export type repro_additionsUncheckedUpdateWithoutDistillationsInput = {
    addition_id?: IntFieldUpdateOperationsInput | number
    repro_drum_id?: NullableIntFieldUpdateOperationsInput | number | null
    date_added?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    volume_added?: IntFieldUpdateOperationsInput | number
    volume_in_drum?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type repro_additionsUncheckedUpdateManyWithoutDistillationsInput = {
    addition_id?: IntFieldUpdateOperationsInput | number
    repro_drum_id?: NullableIntFieldUpdateOperationsInput | number | null
    date_added?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    volume_added?: IntFieldUpdateOperationsInput | number
    volume_in_drum?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type drum_distillationsCreateManyNew_drumsInput = {
    distillation_id: number
    fraction_used?: Decimal | DecimalJsLike | number | string
  }

  export type processesCreateManyNew_drumsInput = {
    process_id?: number
    material?: string | null
    supplier?: string | null
    still_code: string
    operator?: string | null
    loader?: string | null
    transporter?: string | null
    date_processed?: Date | string | null
  }

  export type transactionsCreateManyNew_drumsInput = {
    tx_id?: number
    tx_type?: string
    tx_date?: Date | string
    material?: string | null
    repro_id?: number | null
    tx_notes?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    process_id?: number | null
    direction?: string | null
    delivery_id?: number | null
    batch_code?: string | null
  }

  export type drum_distillationsUpdateWithoutNew_drumsInput = {
    fraction_used?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    distillations?: distillationsUpdateOneRequiredWithoutDrum_distillationsNestedInput
  }

  export type drum_distillationsUncheckedUpdateWithoutNew_drumsInput = {
    distillation_id?: IntFieldUpdateOperationsInput | number
    fraction_used?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type drum_distillationsUncheckedUpdateManyWithoutNew_drumsInput = {
    distillation_id?: IntFieldUpdateOperationsInput | number
    fraction_used?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type processesUpdateWithoutNew_drumsInput = {
    material?: NullableStringFieldUpdateOperationsInput | string | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    operator?: NullableStringFieldUpdateOperationsInput | string | null
    loader?: NullableStringFieldUpdateOperationsInput | string | null
    transporter?: NullableStringFieldUpdateOperationsInput | string | null
    date_processed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stills?: stillsUpdateOneRequiredWithoutProcessesNestedInput
    transactions?: transactionsUpdateManyWithoutProcessesNestedInput
  }

  export type processesUncheckedUpdateWithoutNew_drumsInput = {
    process_id?: IntFieldUpdateOperationsInput | number
    material?: NullableStringFieldUpdateOperationsInput | string | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    still_code?: StringFieldUpdateOperationsInput | string
    operator?: NullableStringFieldUpdateOperationsInput | string | null
    loader?: NullableStringFieldUpdateOperationsInput | string | null
    transporter?: NullableStringFieldUpdateOperationsInput | string | null
    date_processed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transactions?: transactionsUncheckedUpdateManyWithoutProcessesNestedInput
  }

  export type processesUncheckedUpdateManyWithoutNew_drumsInput = {
    process_id?: IntFieldUpdateOperationsInput | number
    material?: NullableStringFieldUpdateOperationsInput | string | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    still_code?: StringFieldUpdateOperationsInput | string
    operator?: NullableStringFieldUpdateOperationsInput | string | null
    loader?: NullableStringFieldUpdateOperationsInput | string | null
    transporter?: NullableStringFieldUpdateOperationsInput | string | null
    date_processed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type transactionsUpdateWithoutNew_drumsInput = {
    tx_type?: StringFieldUpdateOperationsInput | string
    tx_date?: DateTimeFieldUpdateOperationsInput | Date | string
    material?: NullableStringFieldUpdateOperationsInput | string | null
    tx_notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    direction?: NullableStringFieldUpdateOperationsInput | string | null
    batch_code?: NullableStringFieldUpdateOperationsInput | string | null
    deliveries?: deliveriesUpdateOneWithoutTransactionsNestedInput
    processes?: processesUpdateOneWithoutTransactionsNestedInput
    repro_drums?: repro_drumsUpdateOneWithoutTransactionsNestedInput
  }

  export type transactionsUncheckedUpdateWithoutNew_drumsInput = {
    tx_id?: IntFieldUpdateOperationsInput | number
    tx_type?: StringFieldUpdateOperationsInput | string
    tx_date?: DateTimeFieldUpdateOperationsInput | Date | string
    material?: NullableStringFieldUpdateOperationsInput | string | null
    repro_id?: NullableIntFieldUpdateOperationsInput | number | null
    tx_notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    process_id?: NullableIntFieldUpdateOperationsInput | number | null
    direction?: NullableStringFieldUpdateOperationsInput | string | null
    delivery_id?: NullableIntFieldUpdateOperationsInput | number | null
    batch_code?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type transactionsUncheckedUpdateManyWithoutNew_drumsInput = {
    tx_id?: IntFieldUpdateOperationsInput | number
    tx_type?: StringFieldUpdateOperationsInput | string
    tx_date?: DateTimeFieldUpdateOperationsInput | Date | string
    material?: NullableStringFieldUpdateOperationsInput | string | null
    repro_id?: NullableIntFieldUpdateOperationsInput | number | null
    tx_notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    process_id?: NullableIntFieldUpdateOperationsInput | number | null
    direction?: NullableStringFieldUpdateOperationsInput | string | null
    delivery_id?: NullableIntFieldUpdateOperationsInput | number | null
    batch_code?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type deliveriesCreateManyOrdersInput = {
    delivery_id?: number
    quantity_received: number
    date_received?: Date | string
    batch_code?: string | null
    location?: string | null
    delivery_notes?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type new_drumsCreateManyOrdersInput = {
    drum_id?: number
    import_id?: number | null
    material: string
    date_processed?: Date | string | null
    status?: string
    location?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type deliveriesUpdateWithoutOrdersInput = {
    quantity_received?: IntFieldUpdateOperationsInput | number
    date_received?: DateTimeFieldUpdateOperationsInput | Date | string
    batch_code?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    delivery_notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transactions?: transactionsUpdateManyWithoutDeliveriesNestedInput
  }

  export type deliveriesUncheckedUpdateWithoutOrdersInput = {
    delivery_id?: IntFieldUpdateOperationsInput | number
    quantity_received?: IntFieldUpdateOperationsInput | number
    date_received?: DateTimeFieldUpdateOperationsInput | Date | string
    batch_code?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    delivery_notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transactions?: transactionsUncheckedUpdateManyWithoutDeliveriesNestedInput
  }

  export type deliveriesUncheckedUpdateManyWithoutOrdersInput = {
    delivery_id?: IntFieldUpdateOperationsInput | number
    quantity_received?: IntFieldUpdateOperationsInput | number
    date_received?: DateTimeFieldUpdateOperationsInput | Date | string
    batch_code?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    delivery_notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type new_drumsUpdateWithoutOrdersInput = {
    import_id?: NullableIntFieldUpdateOperationsInput | number | null
    material?: StringFieldUpdateOperationsInput | string
    date_processed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    drum_distillations?: drum_distillationsUpdateManyWithoutNew_drumsNestedInput
    processes?: processesUpdateManyWithoutNew_drumsNestedInput
    transactions?: transactionsUpdateManyWithoutNew_drumsNestedInput
  }

  export type new_drumsUncheckedUpdateWithoutOrdersInput = {
    drum_id?: IntFieldUpdateOperationsInput | number
    import_id?: NullableIntFieldUpdateOperationsInput | number | null
    material?: StringFieldUpdateOperationsInput | string
    date_processed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    drum_distillations?: drum_distillationsUncheckedUpdateManyWithoutNew_drumsNestedInput
    processes?: processesUncheckedUpdateManyWithoutNew_drumsNestedInput
    transactions?: transactionsUncheckedUpdateManyWithoutNew_drumsNestedInput
  }

  export type new_drumsUncheckedUpdateManyWithoutOrdersInput = {
    drum_id?: IntFieldUpdateOperationsInput | number
    import_id?: NullableIntFieldUpdateOperationsInput | number | null
    material?: StringFieldUpdateOperationsInput | string
    date_processed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type transactionsCreateManyProcessesInput = {
    tx_id?: number
    tx_type?: string
    tx_date?: Date | string
    material?: string | null
    drum_id?: number | null
    repro_id?: number | null
    tx_notes?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    direction?: string | null
    delivery_id?: number | null
    batch_code?: string | null
  }

  export type transactionsUpdateWithoutProcessesInput = {
    tx_type?: StringFieldUpdateOperationsInput | string
    tx_date?: DateTimeFieldUpdateOperationsInput | Date | string
    material?: NullableStringFieldUpdateOperationsInput | string | null
    tx_notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    direction?: NullableStringFieldUpdateOperationsInput | string | null
    batch_code?: NullableStringFieldUpdateOperationsInput | string | null
    deliveries?: deliveriesUpdateOneWithoutTransactionsNestedInput
    new_drums?: new_drumsUpdateOneWithoutTransactionsNestedInput
    repro_drums?: repro_drumsUpdateOneWithoutTransactionsNestedInput
  }

  export type transactionsUncheckedUpdateWithoutProcessesInput = {
    tx_id?: IntFieldUpdateOperationsInput | number
    tx_type?: StringFieldUpdateOperationsInput | string
    tx_date?: DateTimeFieldUpdateOperationsInput | Date | string
    material?: NullableStringFieldUpdateOperationsInput | string | null
    drum_id?: NullableIntFieldUpdateOperationsInput | number | null
    repro_id?: NullableIntFieldUpdateOperationsInput | number | null
    tx_notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    direction?: NullableStringFieldUpdateOperationsInput | string | null
    delivery_id?: NullableIntFieldUpdateOperationsInput | number | null
    batch_code?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type transactionsUncheckedUpdateManyWithoutProcessesInput = {
    tx_id?: IntFieldUpdateOperationsInput | number
    tx_type?: StringFieldUpdateOperationsInput | string
    tx_date?: DateTimeFieldUpdateOperationsInput | Date | string
    material?: NullableStringFieldUpdateOperationsInput | string | null
    drum_id?: NullableIntFieldUpdateOperationsInput | number | null
    repro_id?: NullableIntFieldUpdateOperationsInput | number | null
    tx_notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    direction?: NullableStringFieldUpdateOperationsInput | string | null
    delivery_id?: NullableIntFieldUpdateOperationsInput | number | null
    batch_code?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type repro_additionsCreateManyRepro_drumsInput = {
    addition_id?: number
    distillation_id?: number | null
    date_added?: Date | string | null
    volume_added: number
    volume_in_drum: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type transactionsCreateManyRepro_drumsInput = {
    tx_id?: number
    tx_type?: string
    tx_date?: Date | string
    material?: string | null
    drum_id?: number | null
    tx_notes?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    process_id?: number | null
    direction?: string | null
    delivery_id?: number | null
    batch_code?: string | null
  }

  export type repro_additionsUpdateWithoutRepro_drumsInput = {
    date_added?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    volume_added?: IntFieldUpdateOperationsInput | number
    volume_in_drum?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    distillations?: distillationsUpdateOneWithoutRepro_additionsNestedInput
  }

  export type repro_additionsUncheckedUpdateWithoutRepro_drumsInput = {
    addition_id?: IntFieldUpdateOperationsInput | number
    distillation_id?: NullableIntFieldUpdateOperationsInput | number | null
    date_added?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    volume_added?: IntFieldUpdateOperationsInput | number
    volume_in_drum?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type repro_additionsUncheckedUpdateManyWithoutRepro_drumsInput = {
    addition_id?: IntFieldUpdateOperationsInput | number
    distillation_id?: NullableIntFieldUpdateOperationsInput | number | null
    date_added?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    volume_added?: IntFieldUpdateOperationsInput | number
    volume_in_drum?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type transactionsUpdateWithoutRepro_drumsInput = {
    tx_type?: StringFieldUpdateOperationsInput | string
    tx_date?: DateTimeFieldUpdateOperationsInput | Date | string
    material?: NullableStringFieldUpdateOperationsInput | string | null
    tx_notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    direction?: NullableStringFieldUpdateOperationsInput | string | null
    batch_code?: NullableStringFieldUpdateOperationsInput | string | null
    deliveries?: deliveriesUpdateOneWithoutTransactionsNestedInput
    new_drums?: new_drumsUpdateOneWithoutTransactionsNestedInput
    processes?: processesUpdateOneWithoutTransactionsNestedInput
  }

  export type transactionsUncheckedUpdateWithoutRepro_drumsInput = {
    tx_id?: IntFieldUpdateOperationsInput | number
    tx_type?: StringFieldUpdateOperationsInput | string
    tx_date?: DateTimeFieldUpdateOperationsInput | Date | string
    material?: NullableStringFieldUpdateOperationsInput | string | null
    drum_id?: NullableIntFieldUpdateOperationsInput | number | null
    tx_notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    process_id?: NullableIntFieldUpdateOperationsInput | number | null
    direction?: NullableStringFieldUpdateOperationsInput | string | null
    delivery_id?: NullableIntFieldUpdateOperationsInput | number | null
    batch_code?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type transactionsUncheckedUpdateManyWithoutRepro_drumsInput = {
    tx_id?: IntFieldUpdateOperationsInput | number
    tx_type?: StringFieldUpdateOperationsInput | string
    tx_date?: DateTimeFieldUpdateOperationsInput | Date | string
    material?: NullableStringFieldUpdateOperationsInput | string | null
    drum_id?: NullableIntFieldUpdateOperationsInput | number | null
    tx_notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    process_id?: NullableIntFieldUpdateOperationsInput | number | null
    direction?: NullableStringFieldUpdateOperationsInput | string | null
    delivery_id?: NullableIntFieldUpdateOperationsInput | number | null
    batch_code?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type processesCreateManyStillsInput = {
    process_id?: number
    material?: string | null
    drum_id?: number | null
    supplier?: string | null
    operator?: string | null
    loader?: string | null
    transporter?: string | null
    date_processed?: Date | string | null
  }

  export type processesUpdateWithoutStillsInput = {
    material?: NullableStringFieldUpdateOperationsInput | string | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    operator?: NullableStringFieldUpdateOperationsInput | string | null
    loader?: NullableStringFieldUpdateOperationsInput | string | null
    transporter?: NullableStringFieldUpdateOperationsInput | string | null
    date_processed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    new_drums?: new_drumsUpdateOneWithoutProcessesNestedInput
    transactions?: transactionsUpdateManyWithoutProcessesNestedInput
  }

  export type processesUncheckedUpdateWithoutStillsInput = {
    process_id?: IntFieldUpdateOperationsInput | number
    material?: NullableStringFieldUpdateOperationsInput | string | null
    drum_id?: NullableIntFieldUpdateOperationsInput | number | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    operator?: NullableStringFieldUpdateOperationsInput | string | null
    loader?: NullableStringFieldUpdateOperationsInput | string | null
    transporter?: NullableStringFieldUpdateOperationsInput | string | null
    date_processed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transactions?: transactionsUncheckedUpdateManyWithoutProcessesNestedInput
  }

  export type processesUncheckedUpdateManyWithoutStillsInput = {
    process_id?: IntFieldUpdateOperationsInput | number
    material?: NullableStringFieldUpdateOperationsInput | string | null
    drum_id?: NullableIntFieldUpdateOperationsInput | number | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    operator?: NullableStringFieldUpdateOperationsInput | string | null
    loader?: NullableStringFieldUpdateOperationsInput | string | null
    transporter?: NullableStringFieldUpdateOperationsInput | string | null
    date_processed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}